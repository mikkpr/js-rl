!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist/",n(n.s=23)}([function(t,e,n){"use strict";n.d(e,"a",(function(){return at})),n.d(e,"b",(function(){return N})),n.d(e,"c",(function(){return y})),n.d(e,"d",(function(){return K})),n.d(e,"e",(function(){return E})),n.d(e,"f",(function(){return c})),n.d(e,"g",(function(){return Y})),n.d(e,"h",(function(){return q})),n.d(e,"i",(function(){return R})),n.d(e,"j",(function(){return Z})),n.d(e,"k",(function(){return U})),n.d(e,"l",(function(){return J})),n.d(e,"m",(function(){return ut})),n.d(e,"n",(function(){return ft})),n.d(e,"o",(function(){return ot})),n.d(e,"p",(function(){return dt})),n.d(e,"q",(function(){return j})),n.d(e,"r",(function(){return M})),n.d(e,"s",(function(){return D})),n.d(e,"t",(function(){return F})),n.d(e,"u",(function(){return k})),n.d(e,"v",(function(){return yt})),n.d(e,"w",(function(){return rt})),n.d(e,"x",(function(){return B})),n.d(e,"y",(function(){return Q})),n.d(e,"z",(function(){return tt})),n.d(e,"A",(function(){return et})),n.d(e,"B",(function(){return nt})),n.d(e,"C",(function(){return V})),n.d(e,"D",(function(){return st})),n.d(e,"E",(function(){return ct})),n.d(e,"F",(function(){return lt})),n.d(e,"G",(function(){return ht})),n.d(e,"H",(function(){return pt})),n.d(e,"I",(function(){return _t})),n.d(e,"J",(function(){return gt})),n.d(e,"K",(function(){return vt})),n.d(e,"L",(function(){return H})),n.d(e,"M",(function(){return l})),n.d(e,"N",(function(){return G})),n.d(e,"O",(function(){return C})),n.d(e,"P",(function(){return W})),n.d(e,"Q",(function(){return z})),n.d(e,"R",(function(){return X})),n.d(e,"S",(function(){return m})),n.d(e,"T",(function(){return x})),n.d(e,"U",(function(){return s})),n.d(e,"V",(function(){return P})),n.d(e,"W",(function(){return b})),n.d(e,"X",(function(){return L})),n.d(e,"Y",(function(){return p})),n.d(e,"Z",(function(){return f})),n.d(e,"ab",(function(){return v})),n.d(e,"bb",(function(){return d})),n.d(e,"cb",(function(){return w})),n.d(e,"db",(function(){return u})),n.d(e,"eb",(function(){return h})),n.d(e,"fb",(function(){return S})),n.d(e,"gb",(function(){return T})),n.d(e,"hb",(function(){return O}));var r=n(3),i=n(11),o=n(2),a=n(17),s=function(t){return function(){return t}}(!0),u=function(){};var c=function(t){return t};"function"==typeof Symbol&&Symbol.asyncIterator&&Symbol.asyncIterator;function l(t,e,n){if(!e(t))throw new Error(n)}var f=function(t,e){Object(i.a)(t,e),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach((function(n){t[n]=e[n]}))},h=function(t,e){var n;return(n=[]).concat.apply(n,e.map(t))};function d(t,e){var n=t.indexOf(e);n>=0&&t.splice(n,1)}function p(t){var e=!1;return function(){e||(e=!0,t())}}var _=function(t){throw t},g=function(t){return{value:t,done:!0}};function v(t,e,n){void 0===e&&(e=_),void 0===n&&(n="iterator");var r={meta:{name:n},next:t,throw:e,return:g,isSagaIterator:!0};return"undefined"!=typeof Symbol&&(r[Symbol.iterator]=function(){return r}),r}function y(t,e){var n=e.sagaStack;console.error(t),console.error(n)}var m=function(t){return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: "+t+"\n")},b=function(t){return Array.apply(null,new Array(t))},E=function(t){return function(e){return t(Object.defineProperty(e,r.f,{value:!0}))}},O=function(t){return t===r.k},T=function(t){return t===r.j},w=function(t){return O(t)||T(t)};function P(t,e){var n=Object.keys(t),r=n.length;var i,a=0,s=Object(o.a)(t)?b(r):{},c={};return n.forEach((function(t){var n=function(n,o){i||(o||w(n)?(e.cancel(),e(n,o)):(s[t]=n,++a===r&&(i=!0,e(s))))};n.cancel=u,c[t]=n})),e.cancel=function(){i||(i=!0,n.forEach((function(t){return c[t].cancel()})))},c}function x(t){return{name:t.name||"anonymous",location:S(t)}}function S(t){return t[r.g]}var A={isEmpty:s,put:u,take:u};function I(t,e){void 0===t&&(t=10);var n=new Array(t),r=0,i=0,o=0,a=function(e){n[i]=e,i=(i+1)%t,r++},s=function(){if(0!=r){var e=n[o];return n[o]=null,r--,o=(o+1)%t,e}},u=function(){for(var t=[];r;)t.push(s());return t};return{isEmpty:function(){return 0==r},put:function(s){var c;if(r<t)a(s);else switch(e){case 1:throw new Error("Channel's Buffer overflow!");case 3:n[i]=s,o=i=(i+1)%t;break;case 4:c=2*t,n=u(),r=n.length,i=n.length,o=0,n.length=c,t=c,a(s)}},take:s,flush:u}}var L=function(){return A},M=function(t){return I(t,3)},C=function(t){return I(t,4)},R=Object.freeze({__proto__:null,none:L,fixed:function(t){return I(t,1)},dropping:function(t){return I(t,2)},sliding:M,expanding:C}),k="TAKE",j="PUT",N="ALL",D="RACE",K="CALL",V="CPS",Y="FORK",U="JOIN",H="CANCEL",F="SELECT",G="ACTION_CHANNEL",W="CANCELLED",z="FLUSH",q="GET_CONTEXT",X="SET_CONTEXT",B=Object.freeze({__proto__:null,TAKE:k,PUT:j,ALL:N,RACE:D,CALL:K,CPS:V,FORK:Y,JOIN:U,CANCEL:H,SELECT:F,ACTION_CHANNEL:G,CANCELLED:W,FLUSH:z,GET_CONTEXT:q,SET_CONTEXT:X}),$=function(t,e){var n;return(n={})[r.c]=!0,n.combinator=!1,n.type=t,n.payload=e,n},Z=function(t){return $(Y,Object(i.a)({},t.payload,{detached:!0}))};function J(t,e){return void 0===t&&(t="*"),Object(o.i)(t)?$(k,{pattern:t}):Object(o.f)(t)&&Object(o.g)(e)&&Object(o.i)(e)?$(k,{channel:t,pattern:e}):Object(o.b)(t)?$(k,{channel:t}):void 0}var Q=function(){var t=J.apply(void 0,arguments);return t.payload.maybe=!0,t};function tt(t,e){return Object(o.n)(e)&&(e=t,t=void 0),$(j,{channel:t,action:e})}var et=function(){var t=tt.apply(void 0,arguments);return t.payload.resolve=!0,t};function nt(t){var e=$(N,t);return e.combinator=!0,e}function rt(t){var e=$(D,t);return e.combinator=!0,e}function it(t,e){var n,r=null;return Object(o.d)(t)?n=t:(Object(o.a)(t)?(r=t[0],n=t[1]):(r=t.context,n=t.fn),r&&Object(o.k)(n)&&Object(o.d)(r[n])&&(n=r[n])),{context:r,fn:n,args:e}}function ot(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return $(K,it(t,n))}function at(t,e,n){void 0===n&&(n=[]);return $(K,it([t,e],n))}function st(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return $(V,it(t,n))}function ut(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return $(Y,it(t,n))}function ct(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return Z(ut.apply(void 0,[t].concat(n)))}function lt(t){return $(U,t)}function ft(t){return void 0===t&&(t=r.h),$(H,t)}function ht(t){void 0===t&&(t=c);for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return $(F,{selector:t,args:n})}function dt(t,e){return $(G,{pattern:t,buffer:e})}function pt(){return $(W,{})}function _t(t){return $(z,t)}function gt(t){return $(q,t)}function vt(t){return $(X,t)}var yt=ot.bind(null,a.a)},function(t,e,n){"use strict";const r=2.3283064365386963e-10;class i{constructor(){this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}getSeed(){return this._seed}setSeed(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*r,t=69069*t+1>>>0,this._s1=t*r,t=69069*t+1>>>0,this._s2=t*r,this._c=1,this}getUniform(){let t=2091639*this._s0+this._c*r;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2}getUniformInt(t,e){let n=Math.max(t,e),r=Math.min(t,e);return Math.floor(this.getUniform()*(n-r+1))+r}getNormal(t=0,e=1){let n,r,i;do{n=2*this.getUniform()-1,r=2*this.getUniform()-1,i=n*n+r*r}while(i>1||0==i);return t+n*Math.sqrt(-2*Math.log(i)/i)*e}getPercentage(){return 1+Math.floor(100*this.getUniform())}getItem(t){return t.length?t[Math.floor(this.getUniform()*t.length)]:null}shuffle(t){let e=[],n=t.slice();for(;n.length;){let t=n.indexOf(this.getItem(n));e.push(n.splice(t,1)[0])}return e}getWeightedValue(t){let e=0;for(let n in t)e+=t[n];let n,r=this.getUniform()*e,i=0;for(n in t)if(i+=t[n],r<i)return n;return n}getState(){return[this._s0,this._s1,this._s2,this._c]}setState(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this}clone(){return(new i).setState(this.getState())}}e.a=(new i).setSeed(Date.now())},function(t,e,n){"use strict";n.d(e,"a",(function(){return u})),n.d(e,"b",(function(){return d})),n.d(e,"c",(function(){return v})),n.d(e,"d",(function(){return a})),n.d(e,"e",(function(){return f})),n.d(e,"f",(function(){return g})),n.d(e,"g",(function(){return o})),n.d(e,"h",(function(){return c})),n.d(e,"i",(function(){return h})),n.d(e,"j",(function(){return l})),n.d(e,"k",(function(){return s})),n.d(e,"l",(function(){return p})),n.d(e,"m",(function(){return _})),n.d(e,"n",(function(){return i}));var r=n(3),i=function(t){return null==t},o=function(t){return null!=t},a=function(t){return"function"==typeof t},s=function(t){return"string"==typeof t},u=Array.isArray,c=function(t){return t&&!u(t)&&"object"==typeof t},l=function(t){return t&&a(t.then)},f=function(t){return t&&a(t.next)&&a(t.throw)},h=function t(e){return e&&(s(e)||_(e)||a(e)||u(e)&&e.every(t))},d=function(t){return t&&a(t.take)&&a(t.close)},p=function(t){return a(t)&&t.hasOwnProperty("toString")},_=function(t){return Boolean(t)&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype},g=function(t){return d(t)&&t[r.e]},v=function(t){return t&&t[r.c]}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i})),n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return a})),n.d(e,"d",(function(){return s})),n.d(e,"e",(function(){return u})),n.d(e,"f",(function(){return c})),n.d(e,"g",(function(){return p})),n.d(e,"h",(function(){return l})),n.d(e,"i",(function(){return f})),n.d(e,"j",(function(){return h})),n.d(e,"k",(function(){return d}));var r=function(t){return"@@redux-saga/"+t},i=r("CANCEL_PROMISE"),o=r("CHANNEL_END"),a=r("IO"),s=r("MATCH"),u=r("MULTICAST"),c=r("SAGA_ACTION"),l=r("SELF_CANCELLATION"),f=r("TASK"),h=r("TASK_CANCEL"),d=r("TERMINATE"),p=r("LOCATION")},function(t,e,n){"use strict";function r(t,e){return(t%e+e)%e}function i(t,e=0,n=1){return t<e?e:t>n?n:t}function o(t){return t.charAt(0).toUpperCase()+t.substring(1)}function a(t,...e){let n=a.map;return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,(function(r,i,a,s){if("%"==t.charAt(s-1))return r.substring(1);if(!e.length)return r;let u=e[0],c=(i||a).split(","),l=c.shift()||"",f=n[l.toLowerCase()];if(!f)return r;u=e.shift();let h=u[f].apply(u,c),d=l.charAt(0);return d!=d.toLowerCase()&&(h=o(h)),h}))}n.r(e),n.d(e,"mod",(function(){return r})),n.d(e,"clamp",(function(){return i})),n.d(e,"capitalize",(function(){return o})),n.d(e,"format",(function(){return a})),a.map={s:"toString"}},function(t,e,n){"use strict";n.r(e),n.d(e,"fromString",(function(){return o})),n.d(e,"add",(function(){return a})),n.d(e,"add_",(function(){return s})),n.d(e,"multiply",(function(){return u})),n.d(e,"multiply_",(function(){return c})),n.d(e,"interpolate",(function(){return l})),n.d(e,"lerp",(function(){return f})),n.d(e,"interpolateHSL",(function(){return h})),n.d(e,"lerpHSL",(function(){return d})),n.d(e,"randomize",(function(){return p})),n.d(e,"rgb2hsl",(function(){return _})),n.d(e,"hsl2rgb",(function(){return v})),n.d(e,"toRGB",(function(){return y})),n.d(e,"toHex",(function(){return m}));var r=n(4),i=n(1);function o(t){let e,n;if(t in b)e=b[t];else{if("#"==t.charAt(0)){let n=(t.match(/[0-9a-f]/gi)||[]).map(t=>parseInt(t,16));if(3==n.length)e=n.map(t=>17*t);else{for(let t=0;t<3;t++)n[t+1]+=16*n[t],n.splice(t,1);e=n}}else e=(n=t.match(/rgb\(([0-9, ]+)\)/i))?n[1].split(/\s*,\s*/).map(t=>parseInt(t)):[0,0,0];b[t]=e}return e.slice()}function a(t,...e){let n=t.slice();for(let t=0;t<3;t++)for(let r=0;r<e.length;r++)n[t]+=e[r][t];return n}function s(t,...e){for(let n=0;n<3;n++)for(let r=0;r<e.length;r++)t[n]+=e[r][n];return t}function u(t,...e){let n=t.slice();for(let t=0;t<3;t++){for(let r=0;r<e.length;r++)n[t]*=e[r][t]/255;n[t]=Math.round(n[t])}return n}function c(t,...e){for(let n=0;n<3;n++){for(let r=0;r<e.length;r++)t[n]*=e[r][n]/255;t[n]=Math.round(t[n])}return t}function l(t,e,n=.5){let r=t.slice();for(let i=0;i<3;i++)r[i]=Math.round(r[i]+n*(e[i]-t[i]));return r}const f=l;function h(t,e,n=.5){let r=_(t),i=_(e);for(let t=0;t<3;t++)r[t]+=n*(i[t]-r[t]);return v(r)}const d=h;function p(t,e){e instanceof Array||(e=Math.round(i.a.getNormal(0,e)));let n=t.slice();for(let t=0;t<3;t++)n[t]+=e instanceof Array?Math.round(i.a.getNormal(0,e[t])):e;return n}function _(t){let e,n=t[0]/255,r=t[1]/255,i=t[2]/255,o=Math.max(n,r,i),a=Math.min(n,r,i),s=0,u=(o+a)/2;if(o==a)e=0;else{let t=o-a;switch(e=u>.5?t/(2-o-a):t/(o+a),o){case n:s=(r-i)/t+(r<i?6:0);break;case r:s=(i-n)/t+2;break;case i:s=(n-r)/t+4}s/=6}return[s,e,u]}function g(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function v(t){let e=t[2];if(0==t[1])return e=Math.round(255*e),[e,e,e];{let n=t[1],r=e<.5?e*(1+n):e+n-e*n,i=2*e-r,o=g(i,r,t[0]+1/3),a=g(i,r,t[0]),s=g(i,r,t[0]-1/3);return[Math.round(255*o),Math.round(255*a),Math.round(255*s)]}}function y(t){return`rgb(${t.map(t=>Object(r.clamp)(t,0,255)).join(",")})`}function m(t){return"#"+t.map(t=>Object(r.clamp)(t,0,255).toString(16).padStart(2,"0")).join("")}const b={black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},function(t,e,n){"use strict";function r(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+t+(n.length?" "+n.join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function i(t){return!!t&&!!t[B]}function o(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return!e||e===Object.prototype}(t)||Array.isArray(t)||!!t[X]||!!t.constructor[X]||h(t)||d(t))}function a(t){if(t&&t[B])return t[B].t}function s(t,e){0===u(t)?Z(t).forEach((function(n){return e(n,t[n],t)})):t.forEach((function(n,r){return e(r,n,t)}))}function u(t){var e=t[B];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:h(t)?2:d(t)?3:0}function c(t,e){return 2===u(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function l(t,e){return 2===u(t)?t.get(e):t[e]}function f(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function h(t){return G&&t instanceof Map}function d(t){return W&&t instanceof Set}function p(t){return t.o||t.t}function _(t,e){if(void 0===e&&(e=!1),Array.isArray(t))return t.slice();var n=Object.create(Object.getPrototypeOf(t));return s(t,(function(i){if(i!==B){var o=Object.getOwnPropertyDescriptor(t,i),a=o.value;o.get&&(e||r(1),a=o.get.call(t)),o.enumerable?n[i]=a:Object.defineProperty(n,i,{value:a,writable:!0,configurable:!0})}})),n}function g(t,e){i(t)||Object.isFrozen(t)||!o(t)||(u(t)>1&&(t.set=t.add=t.clear=t.delete=v),Object.freeze(t),e&&s(t,(function(t,e){return g(e,!0)})))}function v(){r(2)}function y(t){var e=J[t];return e||r(19,t),e}function m(t,e){J[t]=e}function b(){return H}function E(t,e){e&&(y("Patches"),t.u=[],t.s=[],t.v=e)}function O(t){T(t),t.p.forEach(P),t.p=null}function T(t){t===H&&(H=t.l)}function w(t){return H={p:[],l:H,h:t,m:!0,_:0}}function P(t){var e=t[B];0===e.i||1===e.i?e.j():e.O=!0}function x(t,e){e._=e.p.length;var n=e.p[0],i=void 0!==t&&t!==n;return e.h.g||y("ES5").S(e,t,i),i?(n[B].P&&(O(e),r(4)),o(t)&&(t=S(e,t),e.l||I(e,t)),e.u&&y("Patches").M(n[B],t,e.u,e.s)):t=S(e,n,[]),O(e),e.u&&e.v(e.u,e.s),t!==q?t:void 0}function S(t,e,n){if(Object.isFrozen(e))return e;var r=e[B];if(!r)return s(e,(function(i,o){return A(t,r,e,i,o,n)})),e;if(r.A!==t)return e;if(!r.P)return I(t,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var i=4===r.i||5===r.i?r.o=_(r.k,!0):r.o;s(i,(function(e,o){return A(t,r,i,e,o,n)})),I(t,i,!1),n&&t.u&&y("Patches").R(r,n,t.u,t.s)}return r.o}function A(t,e,n,r,a,s){if(i(a)){var h=S(t,a,s&&e&&3!==e.i&&!c(e.D,r)?s.concat(r):void 0);if(p=r,_=h,2===(g=u(d=n))?d.set(p,_):3===g?(d.delete(p),d.add(_)):d[p]=_,!i(h))return;t.m=!1}var d,p,_,g;if((!e||!f(a,l(e.t,r)))&&o(a)){if(!t.h.N&&t._<1)return;S(t,a),e&&e.A.l||I(t,a)}}function I(t,e,n){void 0===n&&(n=!1),t.h.N&&t.m&&g(e,n)}function L(t,e){var n=t[B],r=Reflect.getOwnPropertyDescriptor(n?p(n):t,e);return r&&r.value}function M(t){if(!t.P){if(t.P=!0,0===t.i||1===t.i){var e=t.o=_(t.t);s(t.p,(function(t,n){e[t]=n})),t.p=void 0}t.l&&M(t.l)}}function C(t){t.o||(t.o=_(t.t))}function R(t,e,n){var r=h(e)?y("MapSet").T(e,n):d(e)?y("MapSet").F(e,n):t.g?function(t,e){var n=Array.isArray(t),r={i:n?1:0,A:e?e.A:b(),P:!1,I:!1,D:{},l:e,t:t,k:null,p:{},o:null,j:null,C:!1},i=r,o=Q;n&&(i=[r],o=tt);var a=Proxy.revocable(i,o),s=a.revoke,u=a.proxy;return r.k=u,r.j=s,u}(e,n):y("ES5").J(e,n);return(n?n.A:b()).p.push(r),r}function k(t,e){t.g?M(e):y("ES5").K(e)}function j(){function t(t,e){var n=t[B];if(n&&!n.$){n.$=!0;var r=t[e];return n.$=!1,r}return t[e]}function e(t){t.P||(t.P=!0,t.l&&e(t.l))}function n(t){t.o||(t.o=a(t.t))}function a(t){var e=t&&t[B];if(e){e.$=!0;var n=_(e.k,!0);return e.$=!1,n}return _(t)}function u(t){for(var n=t.length-1;n>=0;n--){var r=t[n][B];if(!r.P)switch(r.i){case 5:h(r)&&e(r);break;case 4:l(r)&&e(r)}}}function l(t){for(var e=t.t,n=t.k,r=Object.keys(n),i=r.length-1;i>=0;i--){var o=r[i],a=e[o];if(void 0===a&&!c(e,o))return!0;var s=n[o],u=s&&s[B];if(u?u.t!==a:!f(s,a))return!0}return r.length!==Object.keys(e).length}function h(t){var e=t.k;if(e.length!==t.t.length)return!0;var n=Object.getOwnPropertyDescriptor(e,e.length-1);return!(!n||n.get)}function d(t){t.O&&r(3,JSON.stringify(p(t)))}var g={};m("ES5",{J:function(r,i){var u=Array.isArray(r),c=a(r);s(c,(function(i){!function(r,i,a){var s=g[i];s?s.enumerable=a:g[i]=s={enumerable:a,get:function(){return function(e,r){d(e);var i=t(p(e),r);return e.$?i:i===t(e.t,r)&&o(i)?(n(e),e.o[r]=R(e.A.h,i,e)):i}(this[B],i)},set:function(r){!function(r,i,o){if(d(r),r.D[i]=!0,!r.P){if(f(o,t(p(r),i)))return;e(r),n(r)}r.o[i]=o}(this[B],i,r)}},Object.defineProperty(r,i,s)}(c,i,u||function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!(!n||!n.enumerable)}(r,i))}));var l={i:u?5:4,A:i?i.A:b(),P:!1,$:!1,I:!1,D:{},l:i,t:r,k:c,o:null,O:!1,C:!1};return Object.defineProperty(c,B,{value:l,writable:!0}),c},K:e,S:function(t,n,r){t.p.forEach((function(t){t[B].$=!0})),r?i(n)&&n[B].A===t&&u(t.p):(t.u&&function t(n){if(n&&"object"==typeof n){var r=n[B];if(r){var i=r.t,o=r.k,a=r.D,u=r.i;if(4===u)s(o,(function(n){n!==B&&(void 0!==i[n]||c(i,n)?a[n]||t(o[n]):(a[n]=!0,e(r)))})),s(i,(function(t){void 0!==o[t]||c(o,t)||(a[t]=!1,e(r))}));else if(5===u){if(h(r)&&(e(r),a.length=!0),o.length<i.length)for(var l=o.length;l<i.length;l++)a[l]=!1;else for(var f=i.length;f<o.length;f++)a[f]=!0;for(var d=Math.min(o.length,i.length),p=0;p<d;p++)void 0===a[p]&&t(o[p])}}}}(t.p[0]),u(t.p))}})}function N(){function t(e){if(!e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(t);if(h(e))return new Map(Array.from(e.entries()).map((function(e){return[e[0],t(e[1])]})));if(d(e))return new Set(Array.from(e).map(t));var n=Object.create(Object.getPrototypeOf(e));for(var r in e)n[r]=t(e[r]);return n}var e="add";m("Patches",{U:function(n,i){return i.forEach((function(i){for(var o=i.path,a=i.op,s=n,c=0;c<o.length-1;c++)"object"!=typeof(s=l(s,o[c]))&&r(15,o.join("/"));var f=u(s),h=t(i.value),d=o[o.length-1];switch(a){case"replace":switch(f){case 2:return s.set(d,h);case 3:r(16);default:return s[d]=h}case e:switch(f){case 1:return s.splice(d,0,h);case 2:return s.set(d,h);case 3:return s.add(h);default:return s[d]=h}case"remove":switch(f){case 1:return s.splice(d,1);case 2:return s.delete(d);case 3:return s.delete(i.value);default:return delete s[d]}default:r(17,a)}})),n},R:function(t,n,r,i){switch(t.i){case 0:case 4:case 2:return function(t,n,r,i){var o=t.t,a=t.o;s(t.D,(function(t,s){var u=l(o,t),f=l(a,t),h=s?c(o,t)?"replace":e:"remove";if(u!==f||"replace"!==h){var d=n.concat(t);r.push("remove"===h?{op:h,path:d}:{op:h,path:d,value:f}),i.push(h===e?{op:"remove",path:d}:"remove"===h?{op:e,path:d,value:u}:{op:"replace",path:d,value:u})}}))}(t,n,r,i);case 5:case 1:return function(t,n,r,i){var o=t.t,a=t.D,s=t.o;if(s.length<o.length){var u=[s,o];o=u[0],s=u[1];var c=[i,r];r=c[0],i=c[1]}for(var l=s.length-o.length,f=0;o[f]===s[f]&&f<o.length;)++f;for(var h=o.length;h>f&&o[h-1]===s[h+l-1];)--h;for(var d=f;d<h;++d)if(a[d]&&s[d]!==o[d]){var p=n.concat([d]);r.push({op:"replace",path:p,value:s[d]}),i.push({op:"replace",path:p,value:o[d]})}for(var _=r.length,g=h+l-1;g>=h;--g){var v=n.concat([g]);r[_+g-h]={op:e,path:v,value:s[g]},i.push({op:"remove",path:v})}}(t,n,r,i);case 3:return function(t,n,r,i){var o=t.t,a=t.o,s=0;o.forEach((function(t){if(!a.has(t)){var o=n.concat([s]);r.push({op:"remove",path:o,value:t}),i.unshift({op:e,path:o,value:t})}s++})),s=0,a.forEach((function(t){if(!o.has(t)){var a=n.concat([s]);r.push({op:e,path:a,value:t}),i.unshift({op:"remove",path:a,value:t})}s++}))}(t,n,r,i)}},M:function(t,e,n,r){n.push({op:"replace",path:[],value:e}),r.push({op:"replace",path:[],value:t.t})}})}function D(){function t(t,e){function n(){this.constructor=t}a(t,e),t.prototype=(n.prototype=e.prototype,new n)}function e(t){t.o||(t.D=new Map,t.o=new Map(t.t))}function n(t){t.o||(t.o=new Set,t.t.forEach((function(e){if(o(e)){var n=R(t.A.h,e,t);t.p.set(e,n),t.o.add(n)}else t.o.add(e)})))}function i(t){t.O&&r(3,JSON.stringify(p(t)))}var a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},s=function(){function n(t,e){return this[B]={i:2,l:e,A:e?e.A:b(),P:!1,I:!1,o:void 0,D:void 0,t:t,k:this,C:!1,O:!1},this}t(n,Map);var r=n.prototype;return Object.defineProperty(r,"size",{get:function(){return p(this[B]).size}}),r.has=function(t){return p(this[B]).has(t)},r.set=function(t,n){var r=this[B];return i(r),p(r).get(t)!==n&&(e(r),k(r.A.h,r),r.D.set(t,!0),r.o.set(t,n),r.D.set(t,!0)),this},r.delete=function(t){if(!this.has(t))return!1;var n=this[B];return i(n),e(n),k(n.A.h,n),n.D.set(t,!1),n.o.delete(t),!0},r.clear=function(){var t=this[B];return i(t),e(t),k(t.A.h,t),t.D=new Map,t.o.clear()},r.forEach=function(t,e){var n=this;p(this[B]).forEach((function(r,i){t.call(e,n.get(i),i,n)}))},r.get=function(t){var n=this[B];i(n);var r=p(n).get(t);if(n.I||!o(r))return r;if(r!==n.t.get(t))return r;var a=R(n.A.h,r,n);return e(n),n.o.set(t,a),a},r.keys=function(){return p(this[B]).keys()},r.values=function(){var t,e=this,n=this.keys();return(t={})[$]=function(){return e.values()},t.next=function(){var t=n.next();return t.done?t:{done:!1,value:e.get(t.value)}},t},r.entries=function(){var t,e=this,n=this.keys();return(t={})[$]=function(){return e.entries()},t.next=function(){var t=n.next();if(t.done)return t;var r=e.get(t.value);return{done:!1,value:[t.value,r]}},t},r[$]=function(){return this.entries()},n}(),u=function(){function e(t,e){return this[B]={i:3,l:e,A:e?e.A:b(),P:!1,I:!1,o:void 0,t:t,k:this,p:new Map,O:!1,C:!1},this}t(e,Set);var r=e.prototype;return Object.defineProperty(r,"size",{get:function(){return p(this[B]).size}}),r.has=function(t){var e=this[B];return i(e),e.o?!!e.o.has(t)||!(!e.p.has(t)||!e.o.has(e.p.get(t))):e.t.has(t)},r.add=function(t){var e=this[B];return i(e),e.o?e.o.add(t):e.t.has(t)||(n(e),k(e.A.h,e),e.o.add(t)),this},r.delete=function(t){if(!this.has(t))return!1;var e=this[B];return i(e),n(e),k(e.A.h,e),e.o.delete(t)||!!e.p.has(t)&&e.o.delete(e.p.get(t))},r.clear=function(){var t=this[B];return i(t),n(t),k(t.A.h,t),t.o.clear()},r.values=function(){var t=this[B];return i(t),n(t),t.o.values()},r.entries=function(){var t=this[B];return i(t),n(t),t.o.entries()},r.keys=function(){return this.values()},r[$]=function(){return this.values()},r.forEach=function(t,e){for(var n=this.values(),r=n.next();!r.done;)t.call(e,r.value,r.value,this),r=n.next()},e}();m("MapSet",{T:function(t,e){return new s(t,e)},F:function(t,e){return new u(t,e)}})}function K(){j(),D(),N()}function V(t){return t}function Y(t){return t}n.r(e),n.d(e,"Immer",(function(){return et})),n.d(e,"applyPatches",(function(){return st})),n.d(e,"castDraft",(function(){return V})),n.d(e,"castImmutable",(function(){return Y})),n.d(e,"createDraft",(function(){return ut})),n.d(e,"enableAllPlugins",(function(){return K})),n.d(e,"enableES5",(function(){return j})),n.d(e,"enableMapSet",(function(){return D})),n.d(e,"enablePatches",(function(){return N})),n.d(e,"finishDraft",(function(){return ct})),n.d(e,"immerable",(function(){return X})),n.d(e,"isDraft",(function(){return i})),n.d(e,"isDraftable",(function(){return o})),n.d(e,"nothing",(function(){return q})),n.d(e,"original",(function(){return a})),n.d(e,"produce",(function(){return rt})),n.d(e,"produceWithPatches",(function(){return it})),n.d(e,"setAutoFreeze",(function(){return ot})),n.d(e,"setUseProxies",(function(){return at}));var U,H,F="undefined"!=typeof Symbol,G="undefined"!=typeof Map,W="undefined"!=typeof Set,z="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,q=F?Symbol("immer-nothing"):((U={})["immer-nothing"]=!0,U),X=F?Symbol("immer-draftable"):"__$immer_draftable",B=F?Symbol("immer-state"):"__$immer_state",$=F?Symbol.iterator:"@@iterator",Z="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames,J={},Q={get:function(t,e){if(e===B)return t;var n=t.p;if(!t.P&&c(n,e))return n[e];var r=p(t)[e];if(t.I||!o(r))return r;if(t.P){if(r!==L(t.t,e))return r;n=t.o}return n[e]=R(t.A.h,r,t)},has:function(t,e){return e in p(t)},ownKeys:function(t){return Reflect.ownKeys(p(t))},set:function(t,e,n){if(!t.P){var r=L(t.t,e);if(n?f(r,n)||n===t.p[e]:f(r,n)&&e in t.t)return!0;C(t),M(t)}return t.D[e]=!0,t.o[e]=n,!0},deleteProperty:function(t,e){return void 0!==L(t.t,e)||e in t.t?(t.D[e]=!1,C(t),M(t)):t.D[e]&&delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var n=p(t),r=Reflect.getOwnPropertyDescriptor(n,e);return r&&(r.writable=!0,r.configurable=1!==t.i||"length"!==e),r},defineProperty:function(){r(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){r(12)}},tt={};s(Q,(function(t,e){tt[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),tt.deleteProperty=function(t,e){return Q.deleteProperty.call(this,t[0],e)},tt.set=function(t,e,n){return Q.set.call(this,t[0],e,n,t[0])};var et=function(){function t(t){this.g=z,this.N=!1,"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var e=t.prototype;return e.produce=function(t,e,n){if("function"==typeof t&&"function"!=typeof e){var i=e;e=t;var a=this;return function(t){var n=this;void 0===t&&(t=i);for(var r=arguments.length,o=Array(r>1?r-1:0),s=1;s<r;s++)o[s-1]=arguments[s];return a.produce(t,(function(t){var r;return(r=e).call.apply(r,[n,t].concat(o))}))}}var s;if("function"!=typeof e&&r(6),void 0!==n&&"function"!=typeof n&&r(7),o(t)){var u=w(this),c=R(this,t,void 0),l=!0;try{s=e(c),l=!1}finally{l?O(u):T(u)}return"undefined"!=typeof Promise&&s instanceof Promise?s.then((function(t){return E(u,n),x(t,u)}),(function(t){throw O(u),t})):(E(u,n),x(s,u))}if((s=e(t))!==q)return void 0===s&&(s=t),this.N&&g(s,!0),s},e.produceWithPatches=function(t,e){var n,r,i=this;return"function"==typeof t?function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return i.produceWithPatches(e,(function(e){return t.apply(void 0,[e].concat(r))}))}:[this.produce(t,e,(function(t,e){n=t,r=e})),n,r]},e.createDraft=function(t){o(t)||r(8);var e=w(this),n=R(this,t,void 0);return n[B].C=!0,T(e),n},e.finishDraft=function(t,e){var n=(t&&t[B]).A;return E(n,e),x(void 0,n)},e.setAutoFreeze=function(t){this.N=t},e.setUseProxies=function(t){z||r(20),this.g=t},e.applyPatches=function(t,e){var n;for(n=e.length-1;n>=0;n--){var r=e[n];if(0===r.path.length&&"replace"===r.op){t=r.value;break}}var o=y("Patches").U;return i(t)?o(t,e):this.produce(t,(function(t){return o(t,e.slice(n+1))}))},t}(),nt=new et,rt=nt.produce,it=nt.produceWithPatches.bind(nt),ot=nt.setAutoFreeze.bind(nt),at=nt.setUseProxies.bind(nt),st=nt.applyPatches.bind(nt),ut=nt.createDraft.bind(nt),ct=nt.finishDraft.bind(nt);e.default=rt},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.cellKey=function(t,e){return t+"_"+e}},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0});var i,o=n(13);!function(t){t.FLOOR="FLOOR",t.WALL="WALL"}(i=e.CELL_TYPES||(e.CELL_TYPES={})),e.CELL_PROPERTIES=((r={})[i.FLOOR]={glyph:o.GLYPH_TYPES.FLOOR,solid:!1},r[i.WALL]={glyph:o.GLYPH_TYPES.WALL,solid:!0},r)},function(t,e,n){"use strict";var r,i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var a,s=o(n(10)),u=n(15),c=n(13),l=n(8);!function(t){t.PLAYER="PLAYER",t.FOLIAGE="FOLIAGE"}(a=e.ENTITY_TYPES||(e.ENTITY_TYPES={})),e.ENTITY_PROPERTIES=((r={})[a.PLAYER]={controllable:!0},r),e.setupEntities=function(t){var e=t.WIDTH,n=t.HEIGHT,r=t.BOTTOM_PANEL_HEIGHT,o=t.playerID,f=t.game.getState(),h=Object.values(f.map).filter((function(t){return t.type===l.CELL_TYPES.FLOOR})),d=s.RNG.getItem(h),p=d.x,_=d.y,g={x:p,y:_},v={x:e/2-p,y:(n-r)/2-_},y=[];y.push(i(i({},g),{glyph:c.GLYPH_TYPES.PLAYER,type:a.PLAYER,id:o,inventory:[]})),u.action("UPDATE_ENTITIES",{entities:y}),u.action("UPDATE_CAMERA_POSITION",{x:v.x,y:v.y})}},function(t,e,n){"use strict";n.r(e),n.d(e,"RNG",(function(){return i.a})),n.d(e,"Display",(function(){return R})),n.d(e,"StringGenerator",(function(){return k})),n.d(e,"EventQueue",(function(){return j})),n.d(e,"Scheduler",(function(){return D})),n.d(e,"FOV",(function(){return Y})),n.d(e,"Map",(function(){return B})),n.d(e,"Noise",(function(){return J})),n.d(e,"Path",(function(){return tt})),n.d(e,"Engine",(function(){return et})),n.d(e,"Lighting",(function(){return nt})),n.d(e,"DEFAULT_WIDTH",(function(){return S})),n.d(e,"DEFAULT_HEIGHT",(function(){return A})),n.d(e,"DIRS",(function(){return I})),n.d(e,"KEYS",(function(){return L})),n.d(e,"Util",(function(){return rt})),n.d(e,"Color",(function(){return it})),n.d(e,"Text",(function(){return ot}));var r={};n.r(r),n.d(r,"TYPE_TEXT",(function(){return b})),n.d(r,"TYPE_NEWLINE",(function(){return E})),n.d(r,"TYPE_FG",(function(){return O})),n.d(r,"TYPE_BG",(function(){return T})),n.d(r,"measure",(function(){return w})),n.d(r,"tokenize",(function(){return P}));var i=n(1),o=n(12);class a extends o.a{constructor(){super(),this._ctx=document.createElement("canvas").getContext("2d")}schedule(t){requestAnimationFrame(t)}getContainer(){return this._ctx.canvas}setOptions(t){super.setOptions(t);const e=`${t.fontStyle?t.fontStyle+" ":""} ${t.fontSize}px ${t.fontFamily}`;this._ctx.font=e,this._updateSize(),this._ctx.font=e,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}clear(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}eventToPosition(t,e){let n=this._ctx.canvas,r=n.getBoundingClientRect();return t-=r.left,e-=r.top,t*=n.width/r.width,e*=n.height/r.height,t<0||e<0||t>=n.width||e>=n.height?[-1,-1]:this._normalizedEventToPosition(t,e)}}var s=n(4);class u extends a{constructor(){super(),this._spacingX=0,this._spacingY=0,this._hexSize=0}draw(t,e){let[n,r,i,o,a]=t,s=[(n+1)*this._spacingX,r*this._spacingY+this._hexSize];if(this._options.transpose&&s.reverse(),e&&(this._ctx.fillStyle=a,this._fill(s[0],s[1])),!i)return;this._ctx.fillStyle=o;let u=[].concat(i);for(let t=0;t<u.length;t++)this._ctx.fillText(u[t],s[0],Math.ceil(s[1]))}computeSize(t,e){return this._options.transpose&&(t+=e,t-=e=t-e),[Math.floor(t/this._spacingX)-1,Math.floor((e-2*this._hexSize)/this._spacingY+1)]}computeFontSize(t,e){this._options.transpose&&(t+=e,t-=e=t-e);let n=2*t/((this._options.width+1)*Math.sqrt(3))-1,r=e/(2+1.5*(this._options.height-1)),i=Math.min(n,r),o=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let a=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=o;let s=a/100;i=Math.floor(i)+1;let u=2*i/(this._options.spacing*(1+s/Math.sqrt(3)));return Math.ceil(u)-1}_normalizedEventToPosition(t,e){let n;this._options.transpose?(t+=e,t-=e=t-e,n=this._ctx.canvas.width):n=this._ctx.canvas.height;let r=n/this._options.height;return e=Math.floor(e/r),Object(s.mod)(e,2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]}_fill(t,e){let n=this._hexSize,r=this._options.border;const i=this._ctx;i.beginPath(),this._options.transpose?(i.moveTo(t-n+r,e),i.lineTo(t-n/2+r,e+this._spacingX-r),i.lineTo(t+n/2-r,e+this._spacingX-r),i.lineTo(t+n-r,e),i.lineTo(t+n/2-r,e-this._spacingX+r),i.lineTo(t-n/2+r,e-this._spacingX+r),i.lineTo(t-n+r,e)):(i.moveTo(t,e-n+r),i.lineTo(t+this._spacingX-r,e-n/2+r),i.lineTo(t+this._spacingX-r,e+n/2-r),i.lineTo(t,e+n-r),i.lineTo(t-this._spacingX+r,e+n/2-r),i.lineTo(t-this._spacingX+r,e-n/2+r),i.lineTo(t,e-n+r)),i.fill()}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);let n,r;this._hexSize=Math.floor(t.spacing*(t.fontSize+e/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,t.transpose?(n="height",r="width"):(n="width",r="height"),this._ctx.canvas[n]=Math.ceil((t.width+1)*this._spacingX),this._ctx.canvas[r]=Math.ceil((t.height-1)*this._spacingY+2*this._hexSize)}}class c extends a{constructor(){super(),this._spacingX=0,this._spacingY=0,this._canvasCache={}}setOptions(t){super.setOptions(t),this._canvasCache={}}draw(t,e){c.cache?this._drawWithCache(t):this._drawNoCache(t,e)}_drawWithCache(t){let e,[n,r,i,o,a]=t,s=""+i+o+a;if(s in this._canvasCache)e=this._canvasCache[s];else{let t=this._options.border;e=document.createElement("canvas");let n=e.getContext("2d");if(e.width=this._spacingX,e.height=this._spacingY,n.fillStyle=a,n.fillRect(t,t,e.width-t,e.height-t),i){n.fillStyle=o,n.font=this._ctx.font,n.textAlign="center",n.textBaseline="middle";let t=[].concat(i);for(let e=0;e<t.length;e++)n.fillText(t[e],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[s]=e}this._ctx.drawImage(e,n*this._spacingX,r*this._spacingY)}_drawNoCache(t,e){let[n,r,i,o,a]=t;if(e){let t=this._options.border;this._ctx.fillStyle=a,this._ctx.fillRect(n*this._spacingX+t,r*this._spacingY+t,this._spacingX-t,this._spacingY-t)}if(!i)return;this._ctx.fillStyle=o;let s=[].concat(i);for(let t=0;t<s.length;t++)this._ctx.fillText(s[t],(n+.5)*this._spacingX,Math.ceil((r+.5)*this._spacingY))}computeSize(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}computeFontSize(t,e){let n=Math.floor(t/this._options.width),r=Math.floor(e/this._options.height),i=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let o=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=i;let a=o/100*r/n;return a>1&&(r=Math.floor(r/a)),Math.floor(r/this._options.spacing)}_normalizedEventToPosition(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),t.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=t.width*this._spacingX,this._ctx.canvas.height=t.height*this._spacingY}}c.cache=!1;class l extends a{constructor(){super(),this._colorCanvas=document.createElement("canvas")}draw(t,e){let[n,r,i,o,a]=t,s=this._options.tileWidth,u=this._options.tileHeight;if(e&&(this._options.tileColorize?this._ctx.clearRect(n*s,r*u,s,u):(this._ctx.fillStyle=a,this._ctx.fillRect(n*s,r*u,s,u))),!i)return;let c=[].concat(i),l=[].concat(o),f=[].concat(a);for(let t=0;t<c.length;t++){let e=this._options.tileMap[c[t]];if(!e)throw new Error(`Char "${c[t]}" not found in tileMap`);if(this._options.tileColorize){let i=this._colorCanvas,o=i.getContext("2d");o.globalCompositeOperation="source-over",o.clearRect(0,0,s,u);let a=l[t],c=f[t];o.drawImage(this._options.tileSet,e[0],e[1],s,u,0,0,s,u),"transparent"!=a&&(o.fillStyle=a,o.globalCompositeOperation="source-atop",o.fillRect(0,0,s,u)),"transparent"!=c&&(o.fillStyle=c,o.globalCompositeOperation="destination-over",o.fillRect(0,0,s,u)),this._ctx.drawImage(i,n*s,r*u,s,u)}else this._ctx.drawImage(this._options.tileSet,e[0],e[1],s,u,n*s,r*u,s,u)}}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._options;this._ctx.canvas.width=t.width*t.tileWidth,this._ctx.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight}}var f=n(5);class h extends o.a{static isSupported(){return!!document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0})}constructor(){super(),this._uniforms={};try{this._gl=this._initWebGL()}catch(t){alert(t.message)}}schedule(t){requestAnimationFrame(t)}getContainer(){return this._gl.canvas}setOptions(t){super.setOptions(t),this._updateSize();let e=this._options.tileSet;e&&"complete"in e&&!e.complete?e.addEventListener("load",()=>this._updateTexture(e)):this._updateTexture(e)}draw(t,e){const n=this._gl,r=this._options;let[i,o,a,s,u]=t,c=n.canvas.height-(o+1)*r.tileHeight;if(n.scissor(i*r.tileWidth,c,r.tileWidth,r.tileHeight),e&&(r.tileColorize?n.clearColor(0,0,0,0):n.clearColor(...v(u)),n.clear(n.COLOR_BUFFER_BIT)),!a)return;let l=[].concat(a),f=[].concat(u),h=[].concat(s);n.uniform2fv(this._uniforms.targetPosRel,[i,o]);for(let t=0;t<l.length;t++){let e=this._options.tileMap[l[t]];if(!e)throw new Error(`Char "${l[t]}" not found in tileMap`);n.uniform1f(this._uniforms.colorize,r.tileColorize?1:0),n.uniform2fv(this._uniforms.tilesetPosAbs,e),r.tileColorize&&(n.uniform4fv(this._uniforms.tint,v(h[t])),n.uniform4fv(this._uniforms.bg,v(f[t]))),n.drawArrays(n.TRIANGLE_STRIP,0,4)}}clear(){const t=this._gl;t.clearColor(...v(this._options.bg)),t.scissor(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT)}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}eventToPosition(t,e){let n=this._gl.canvas,r=n.getBoundingClientRect();return t-=r.left,e-=r.top,t*=n.width/r.width,e*=n.height/r.height,t<0||e<0||t>=n.width||e>=n.height?[-1,-1]:this._normalizedEventToPosition(t,e)}_initWebGL(){let t=document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0});window.gl=t;let e=function(t,e,n){const r=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r)||"");const i=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(i,n),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(i)||"");const o=t.createProgram();if(t.attachShader(o,r),t.attachShader(o,i),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(o)||"");return o}(t,p,_);return t.useProgram(e),function(t){const e=new Float32Array([0,0,1,0,0,1,1,1]),n=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0)}(t),d.forEach(n=>this._uniforms[n]=t.getUniformLocation(e,n)),this._program=e,t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),t.enable(t.SCISSOR_TEST),t}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._gl,e=this._options,n=[e.width*e.tileWidth,e.height*e.tileHeight];t.canvas.width=n[0],t.canvas.height=n[1],t.viewport(0,0,n[0],n[1]),t.uniform2fv(this._uniforms.tileSize,[e.tileWidth,e.tileHeight]),t.uniform2fv(this._uniforms.targetSize,n)}_updateTexture(t){!function(t,e){let n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,0),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e)}(this._gl,t)}}const d=["targetPosRel","tilesetPosAbs","tileSize","targetSize","colorize","bg","tint"],p="\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}".trim(),_="\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}".trim();let g={};function v(t){if(!(t in g)){let e;if("transparent"==t)e=[0,0,0,0];else if(t.indexOf("rgba")>-1){e=(t.match(/[\d.]+/g)||[]).map(Number);for(let t=0;t<3;t++)e[t]=e[t]/255}else e=f.fromString(t).map(t=>t/255),e.push(1);g[t]=e}return g[t]}var y=n(22);const m=/%([bc]){([^}]*)}/g,b=0,E=1,O=2,T=3;function w(t,e){let n={width:0,height:1},r=P(t,e),i=0;for(let t=0;t<r.length;t++){let e=r[t];switch(e.type){case b:i+=e.value.length;break;case E:n.height++,n.width=Math.max(n.width,i),i=0}}return n.width=Math.max(n.width,i),n}function P(t,e){let n=[],r=0;t.replace(m,(function(e,i,o,a){let s=t.substring(r,a);return s.length&&n.push({type:b,value:s}),n.push({type:"c"==i?O:T,value:o.trim()}),r=a+e.length,""}));let i=t.substring(r);return i.length&&n.push({type:b,value:i}),function(t,e){e||(e=1/0);let n=0,r=0,i=-1;for(;n<t.length;){let o=t[n];if(o.type==E&&(r=0,i=-1),o.type!=b){n++;continue}for(;0==r&&" "==o.value.charAt(0);)o.value=o.value.substring(1);let a=o.value.indexOf("\n");if(-1!=a){o.value=x(t,n,a,!0);let e=o.value.split("");for(;e.length&&" "==e[e.length-1];)e.pop();o.value=e.join("")}if(o.value.length){if(r+o.value.length>e){let a=-1;for(;;){let t=o.value.indexOf(" ",a+1);if(-1==t)break;if(r+t>e)break;a=t}if(-1!=a)o.value=x(t,n,a,!0);else if(-1!=i){let e=t[i],r=e.value.lastIndexOf(" ");e.value=x(t,i,r,!0),n=i}else o.value=x(t,n,e-r,!1)}else r+=o.value.length,-1!=o.value.indexOf(" ")&&(i=n);n++}else t.splice(n,1)}t.push({type:E});let o=null;for(let e=0;e<t.length;e++){let n=t[e];switch(n.type){case b:o=n;break;case E:if(o){let t=o.value.split("");for(;t.length&&" "==t[t.length-1];)t.pop();o.value=t.join("")}o=null}}return t.pop(),t}(n,e)}function x(t,e,n,r){let i={type:E},o={type:b,value:t[e].value.substring(n+(r?1:0))};return t.splice(e+1,0,i,o),t[e].value.substring(0,n)}let S=80,A=25;const I={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]},L={VK_CANCEL:3,VK_HELP:6,VK_BACK_SPACE:8,VK_TAB:9,VK_CLEAR:12,VK_RETURN:13,VK_ENTER:14,VK_SHIFT:16,VK_CONTROL:17,VK_ALT:18,VK_PAUSE:19,VK_CAPS_LOCK:20,VK_ESCAPE:27,VK_SPACE:32,VK_PAGE_UP:33,VK_PAGE_DOWN:34,VK_END:35,VK_HOME:36,VK_LEFT:37,VK_UP:38,VK_RIGHT:39,VK_DOWN:40,VK_PRINTSCREEN:44,VK_INSERT:45,VK_DELETE:46,VK_0:48,VK_1:49,VK_2:50,VK_3:51,VK_4:52,VK_5:53,VK_6:54,VK_7:55,VK_8:56,VK_9:57,VK_COLON:58,VK_SEMICOLON:59,VK_LESS_THAN:60,VK_EQUALS:61,VK_GREATER_THAN:62,VK_QUESTION_MARK:63,VK_AT:64,VK_A:65,VK_B:66,VK_C:67,VK_D:68,VK_E:69,VK_F:70,VK_G:71,VK_H:72,VK_I:73,VK_J:74,VK_K:75,VK_L:76,VK_M:77,VK_N:78,VK_O:79,VK_P:80,VK_Q:81,VK_R:82,VK_S:83,VK_T:84,VK_U:85,VK_V:86,VK_W:87,VK_X:88,VK_Y:89,VK_Z:90,VK_CONTEXT_MENU:93,VK_NUMPAD0:96,VK_NUMPAD1:97,VK_NUMPAD2:98,VK_NUMPAD3:99,VK_NUMPAD4:100,VK_NUMPAD5:101,VK_NUMPAD6:102,VK_NUMPAD7:103,VK_NUMPAD8:104,VK_NUMPAD9:105,VK_MULTIPLY:106,VK_ADD:107,VK_SEPARATOR:108,VK_SUBTRACT:109,VK_DECIMAL:110,VK_DIVIDE:111,VK_F1:112,VK_F2:113,VK_F3:114,VK_F4:115,VK_F5:116,VK_F6:117,VK_F7:118,VK_F8:119,VK_F9:120,VK_F10:121,VK_F11:122,VK_F12:123,VK_F13:124,VK_F14:125,VK_F15:126,VK_F16:127,VK_F17:128,VK_F18:129,VK_F19:130,VK_F20:131,VK_F21:132,VK_F22:133,VK_F23:134,VK_F24:135,VK_NUM_LOCK:144,VK_SCROLL_LOCK:145,VK_CIRCUMFLEX:160,VK_EXCLAMATION:161,VK_DOUBLE_QUOTE:162,VK_HASH:163,VK_DOLLAR:164,VK_PERCENT:165,VK_AMPERSAND:166,VK_UNDERSCORE:167,VK_OPEN_PAREN:168,VK_CLOSE_PAREN:169,VK_ASTERISK:170,VK_PLUS:171,VK_PIPE:172,VK_HYPHEN_MINUS:173,VK_OPEN_CURLY_BRACKET:174,VK_CLOSE_CURLY_BRACKET:175,VK_TILDE:176,VK_COMMA:188,VK_PERIOD:190,VK_SLASH:191,VK_BACK_QUOTE:192,VK_OPEN_BRACKET:219,VK_BACK_SLASH:220,VK_CLOSE_BRACKET:221,VK_QUOTE:222,VK_META:224,VK_ALTGR:225,VK_WIN:91,VK_KANA:21,VK_HANGUL:21,VK_EISU:22,VK_JUNJA:23,VK_FINAL:24,VK_HANJA:25,VK_KANJI:25,VK_CONVERT:28,VK_NONCONVERT:29,VK_ACCEPT:30,VK_MODECHANGE:31,VK_SELECT:41,VK_PRINT:42,VK_EXECUTE:43,VK_SLEEP:95},M={hex:u,rect:c,tile:l,"tile-gl":h,term:y.a},C={width:S,height:A,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1};class R{constructor(t={}){this._data={},this._dirty=!1,this._options={},t=Object.assign({},C,t),this.setOptions(t),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),this._backend.schedule(this._tick)}DEBUG(t,e,n){let r=[this._options.bg,this._options.fg];this.draw(t,e,null,null,r[n%r.length])}clear(){this._data={},this._dirty=!0}setOptions(t){if(Object.assign(this._options,t),t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){if(t.layout){let e=M[t.layout];this._backend=new e}this._backend.setOptions(this._options),this._dirty=!0}return this}getOptions(){return this._options}getContainer(){return this._backend.getContainer()}computeSize(t,e){return this._backend.computeSize(t,e)}computeFontSize(t,e){return this._backend.computeFontSize(t,e)}computeTileSize(t,e){return[Math.floor(t/this._options.width),Math.floor(e/this._options.height)]}eventToPosition(t){let e,n;return"touches"in t?(e=t.touches[0].clientX,n=t.touches[0].clientY):(e=t.clientX,n=t.clientY),this._backend.eventToPosition(e,n)}draw(t,e,n,r,i){r||(r=this._options.fg),i||(i=this._options.bg);let o=`${t},${e}`;this._data[o]=[t,e,n,r,i],!0!==this._dirty&&(this._dirty||(this._dirty={}),this._dirty[o]=!0)}drawText(t,e,n,r){let i=null,o=null,a=t,s=e,u=1;r||(r=this._options.width-t);let c=P(n,r);for(;c.length;){let e=c.shift();switch(e.type){case b:let n=!1,r=!1,c=!1,l=!1;for(let t=0;t<e.value.length;t++){let u=e.value.charCodeAt(t),f=e.value.charAt(t);c=u>65280&&u<65377||u>65500&&u<65512||u>65518,n=32==f.charCodeAt(0)||12288==f.charCodeAt(0),!l||c||n||a++,c&&!r&&a++,this.draw(a++,s,f,i,o),r=n,l=c}break;case O:i=e.value||null;break;case T:o=e.value||null;break;case E:a=t,s++,u++}}return u}_tick(){if(this._backend.schedule(this._tick),this._dirty){if(!0===this._dirty){this._backend.clear();for(let t in this._data)this._draw(t,!1)}else for(let t in this._dirty)this._draw(t,!0);this._dirty=!1}}_draw(t,e){let n=this._data[t];n[4]!=this._options.bg&&(e=!0),this._backend.draw(n,e)}}R.Rect=c,R.Hex=u,R.Tile=l,R.TileGL=h,R.Term=y.a;class k{constructor(t){this._options={words:!1,order:3,prior:.001},Object.assign(this._options,t),this._boundary=String.fromCharCode(0),this._suffix=this._boundary,this._prefix=[];for(let t=0;t<this._options.order;t++)this._prefix.push(this._boundary);this._priorValues={},this._priorValues[this._boundary]=this._options.prior,this._data={}}clear(){this._data={},this._priorValues={}}generate(){let t=[this._sample(this._prefix)];for(;t[t.length-1]!=this._boundary;)t.push(this._sample(t));return this._join(t.slice(0,-1))}observe(t){let e=this._split(t);for(let t=0;t<e.length;t++)this._priorValues[e[t]]=this._options.prior;e=this._prefix.concat(e).concat(this._suffix);for(let t=this._options.order;t<e.length;t++){let n=e.slice(t-this._options.order,t),r=e[t];for(let t=0;t<n.length;t++){let e=n.slice(t);this._observeEvent(e,r)}}}getStats(){let t=[],e=Object.keys(this._priorValues).length;e--,t.push("distinct samples: "+e);let n=Object.keys(this._data).length,r=0;for(let t in this._data)r+=Object.keys(this._data[t]).length;return t.push("dictionary size (contexts): "+n),t.push("dictionary size (events): "+r),t.join(", ")}_split(t){return t.split(this._options.words?/\s+/:"")}_join(t){return t.join(this._options.words?" ":"")}_observeEvent(t,e){let n=this._join(t);n in this._data||(this._data[n]={});let r=this._data[n];e in r||(r[e]=0),r[e]++}_sample(t){t=this._backoff(t);let e=this._join(t),n=this._data[e],r={};if(this._options.prior){for(let t in this._priorValues)r[t]=this._priorValues[t];for(let t in n)r[t]+=n[t]}else r=n;return i.a.getWeightedValue(r)}_backoff(t){for(t.length>this._options.order?t=t.slice(-this._options.order):t.length<this._options.order&&(t=this._prefix.slice(0,this._options.order-t.length).concat(t));!(this._join(t)in this._data)&&t.length>0;)t=t.slice(1);return t}}class j{constructor(){this._time=0,this._events=[],this._eventTimes=[]}getTime(){return this._time}clear(){return this._events=[],this._eventTimes=[],this}add(t,e){let n=this._events.length;for(let t=0;t<this._eventTimes.length;t++)if(this._eventTimes[t]>e){n=t;break}this._events.splice(n,0,t),this._eventTimes.splice(n,0,e)}get(){if(!this._events.length)return null;let t=this._eventTimes.splice(0,1)[0];if(t>0){this._time+=t;for(let e=0;e<this._eventTimes.length;e++)this._eventTimes[e]-=t}return this._events.splice(0,1)[0]}getEventTime(t){let e=this._events.indexOf(t);if(-1!=e)return this._eventTimes[e]}remove(t){let e=this._events.indexOf(t);return-1!=e&&(this._remove(e),!0)}_remove(t){this._events.splice(t,1),this._eventTimes.splice(t,1)}}class N{constructor(){this._queue=new j,this._repeat=[],this._current=null}getTime(){return this._queue.getTime()}add(t,e){return e&&this._repeat.push(t),this}getTimeOf(t){return this._queue.getEventTime(t)}clear(){return this._queue.clear(),this._repeat=[],this._current=null,this}remove(t){let e=this._queue.remove(t),n=this._repeat.indexOf(t);return-1!=n&&this._repeat.splice(n,1),this._current==t&&(this._current=null),e}next(){return this._current=this._queue.get(),this._current}}var D={Simple:class extends N{add(t,e){return this._queue.add(t,0),super.add(t,e)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,0),super.next()}},Speed:class extends N{add(t,e,n){return this._queue.add(t,void 0!==n?n:1/t.getSpeed()),super.add(t,e)}next(){return this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,1/this._current.getSpeed()),super.next()}},Action:class extends N{constructor(){super(),this._defaultDuration=1,this._duration=this._defaultDuration}add(t,e,n){return this._queue.add(t,n||this._defaultDuration),super.add(t,e)}clear(){return this._duration=this._defaultDuration,super.clear()}remove(t){return t==this._current&&(this._duration=this._defaultDuration),super.remove(t)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&(this._queue.add(this._current,this._duration||this._defaultDuration),this._duration=this._defaultDuration),super.next()}setDuration(t){return this._current&&(this._duration=t),this}}};class K{constructor(t,e={}){this._lightPasses=t,this._options=Object.assign({topology:8},e)}_getCircle(t,e,n){let r,i,o,a=[];switch(this._options.topology){case 4:i=1,o=[0,1],r=[I[8][7],I[8][1],I[8][3],I[8][5]];break;case 6:r=I[6],i=1,o=[-1,1];break;case 8:r=I[4],i=2,o=[-1,1];break;default:throw new Error("Incorrect topology for FOV computation")}let s=t+o[0]*n,u=e+o[1]*n;for(let t=0;t<r.length;t++)for(let e=0;e<n*i;e++)a.push([s,u]),s+=r[t][0],u+=r[t][1];return a}}const V=[[-1,0,0,1],[0,-1,1,0],[0,-1,-1,0],[-1,0,0,-1],[1,0,0,-1],[0,1,-1,0],[0,1,1,0],[1,0,0,1]];var Y={DiscreteShadowcasting:class extends K{compute(t,e,n,r){if(r(t,e,0,1),!this._lightPasses(t,e))return;let i,o,a,s,u,c=[];for(let l=1;l<=n;l++){let n=this._getCircle(t,e,l),f=360/n.length;for(let t=0;t<n.length;t++)if(a=n[t][0],s=n[t][1],i=f*(t-.5),o=i+f,u=!this._lightPasses(a,s),this._visibleCoords(Math.floor(i),Math.ceil(o),u,c)&&r(a,s,l,1),2==c.length&&0==c[0]&&360==c[1])return}}_visibleCoords(t,e,n,r){if(t<0){let i=this._visibleCoords(0,e,n,r),o=this._visibleCoords(360+t,360,n,r);return i||o}let i=0;for(;i<r.length&&r[i]<t;)i++;if(i==r.length)return n&&r.push(t,e),!0;let o=0;if(i%2){for(;i<r.length&&r[i]<e;)i++,o++;return 0!=o&&(n&&(o%2?r.splice(i-o,o,e):r.splice(i-o,o)),!0)}for(;i<r.length&&r[i]<e;)i++,o++;return(t!=r[i-o]||1!=o)&&(n&&(o%2?r.splice(i-o,o,t):r.splice(i-o,o,t,e)),!0)}},PreciseShadowcasting:class extends K{compute(t,e,n,r){if(r(t,e,0,1),!this._lightPasses(t,e))return;let i,o,a,s,u,c,l=[];for(let f=1;f<=n;f++){let n=this._getCircle(t,e,f),h=n.length;for(let t=0;t<h;t++)if(i=n[t][0],o=n[t][1],s=[t?2*t-1:2*h-1,2*h],u=[2*t+1,2*h],a=!this._lightPasses(i,o),c=this._checkVisibility(s,u,a,l),c&&r(i,o,f,c),2==l.length&&0==l[0][0]&&l[1][0]==l[1][1])return}}_checkVisibility(t,e,n,r){if(t[0]>e[0]){return(this._checkVisibility(t,[t[1],t[1]],n,r)+this._checkVisibility([0,1],e,n,r))/2}let i=0,o=!1;for(;i<r.length;){let e=r[i],n=e[0]*t[1]-t[0]*e[1];if(n>=0){0!=n||i%2||(o=!0);break}i++}let a=r.length,s=!1;for(;a--;){let t=r[a],n=e[0]*t[1]-t[0]*e[1];if(n>=0){0==n&&a%2&&(s=!0);break}}let u,c=!0;if((i==a&&(o||s)||o&&s&&i+1==a&&a%2||i>a&&i%2)&&(c=!1),!c)return 0;let l=a-i+1;if(l%2)if(i%2){let t=r[i];u=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),n&&r.splice(i,l,e)}else{let e=r[a];u=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),n&&r.splice(i,l,t)}else{if(!(i%2))return n&&r.splice(i,l,t,e),1;{let t=r[i],e=r[a];u=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),n&&r.splice(i,l)}}return u/((e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]))}},RecursiveShadowcasting:class extends K{compute(t,e,n,r){r(t,e,0,1);for(let i=0;i<V.length;i++)this._renderOctant(t,e,V[i],n,r)}compute180(t,e,n,r,i){i(t,e,0,1);let o=(r-1+8)%8,a=(r-2+8)%8,s=(r+1+8)%8;this._renderOctant(t,e,V[a],n,i),this._renderOctant(t,e,V[o],n,i),this._renderOctant(t,e,V[r],n,i),this._renderOctant(t,e,V[s],n,i)}compute90(t,e,n,r,i){i(t,e,0,1);let o=(r-1+8)%8;this._renderOctant(t,e,V[r],n,i),this._renderOctant(t,e,V[o],n,i)}_renderOctant(t,e,n,r,i){this._castVisibility(t,e,1,1,0,r+1,n[0],n[1],n[2],n[3],i)}_castVisibility(t,e,n,r,i,o,a,s,u,c,l){if(!(r<i))for(let f=n;f<=o;f++){let n=-f-1,h=-f,d=!1,p=0;for(;n<=0;){n+=1;let _=t+n*a+h*s,g=e+n*u+h*c,v=(n-.5)/(h+.5),y=(n+.5)/(h-.5);if(!(y>r)){if(v<i)break;if(n*n+h*h<o*o&&l(_,g,f,1),d){if(!this._lightPasses(_,g)){p=y;continue}d=!1,r=p}else!this._lightPasses(_,g)&&f<o&&(d=!0,this._castVisibility(t,e,f+1,r,v,o,a,s,u,c,l),p=y)}}if(d)break}}}};class U{constructor(t=S,e=A){this._width=t,this._height=e}_fillMap(t){let e=[];for(let n=0;n<this._width;n++){e.push([]);for(let r=0;r<this._height;r++)e[n].push(t)}return e}}class H extends U{constructor(t,e){super(t,e),this._rooms=[],this._corridors=[]}getRooms(){return this._rooms}getCorridors(){return this._corridors}}class F{}class G extends F{constructor(t,e,n,r,i,o){super(),this._x1=t,this._y1=e,this._x2=n,this._y2=r,this._doors={},void 0!==i&&void 0!==o&&this.addDoor(i,o)}static createRandomAt(t,e,n,r,o){let a=o.roomWidth[0],s=o.roomWidth[1],u=i.a.getUniformInt(a,s);a=o.roomHeight[0],s=o.roomHeight[1];let c=i.a.getUniformInt(a,s);if(1==n){let n=e-Math.floor(i.a.getUniform()*c);return new this(t+1,n,t+u,n+c-1,t,e)}if(-1==n){let n=e-Math.floor(i.a.getUniform()*c);return new this(t-u,n,t-1,n+c-1,t,e)}if(1==r){let n=t-Math.floor(i.a.getUniform()*u);return new this(n,e+1,n+u-1,e+c,t,e)}if(-1==r){let n=t-Math.floor(i.a.getUniform()*u);return new this(n,e-c,n+u-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")}static createRandomCenter(t,e,n){let r=n.roomWidth[0],o=n.roomWidth[1],a=i.a.getUniformInt(r,o);r=n.roomHeight[0],o=n.roomHeight[1];let s=i.a.getUniformInt(r,o),u=t-Math.floor(i.a.getUniform()*a),c=e-Math.floor(i.a.getUniform()*s);return new this(u,c,u+a-1,c+s-1)}static createRandom(t,e,n){let r=n.roomWidth[0],o=n.roomWidth[1],a=i.a.getUniformInt(r,o);r=n.roomHeight[0],o=n.roomHeight[1];let s=i.a.getUniformInt(r,o),u=t-a-1,c=e-s-1,l=1+Math.floor(i.a.getUniform()*u),f=1+Math.floor(i.a.getUniform()*c);return new this(l,f,l+a-1,f+s-1)}addDoor(t,e){return this._doors[t+","+e]=1,this}getDoors(t){for(let e in this._doors){let n=e.split(",");t(parseInt(n[0]),parseInt(n[1]))}return this}clearDoors(){return this._doors={},this}addDoors(t){let e=this._x1-1,n=this._x2+1,r=this._y1-1,i=this._y2+1;for(let o=e;o<=n;o++)for(let a=r;a<=i;a++)o!=e&&o!=n&&a!=r&&a!=i||t(o,a)||this.addDoor(o,a);return this}debug(){console.log("room",this._x1,this._y1,this._x2,this._y2)}isValid(t,e){let n=this._x1-1,r=this._x2+1,i=this._y1-1,o=this._y2+1;for(let a=n;a<=r;a++)for(let s=i;s<=o;s++)if(a==n||a==r||s==i||s==o){if(!t(a,s))return!1}else if(!e(a,s))return!1;return!0}create(t){let e=this._x1-1,n=this._x2+1,r=this._y1-1,i=this._y2+1,o=0;for(let a=e;a<=n;a++)for(let s=r;s<=i;s++)o=a+","+s in this._doors?2:a==e||a==n||s==r||s==i?1:0,t(a,s,o)}getCenter(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}getLeft(){return this._x1}getRight(){return this._x2}getTop(){return this._y1}getBottom(){return this._y2}}class W extends F{constructor(t,e,n,r){super(),this._startX=t,this._startY=e,this._endX=n,this._endY=r,this._endsWithAWall=!0}static createRandomAt(t,e,n,r,o){let a=o.corridorLength[0],s=o.corridorLength[1],u=i.a.getUniformInt(a,s);return new this(t,e,t+n*u,e+r*u)}debug(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}isValid(t,e){let n=this._startX,r=this._startY,i=this._endX-n,o=this._endY-r,a=1+Math.max(Math.abs(i),Math.abs(o));i&&(i/=Math.abs(i)),o&&(o/=Math.abs(o));let s=o,u=-i,c=!0;for(let l=0;l<a;l++){let f=n+l*i,h=r+l*o;if(e(f,h)||(c=!1),t(f+s,h+u)||(c=!1),t(f-s,h-u)||(c=!1),!c){a=l,this._endX=f-i,this._endY=h-o;break}}if(0==a)return!1;if(1==a&&t(this._endX+i,this._endY+o))return!1;let l=!t(this._endX+i+s,this._endY+o+u),f=!t(this._endX+i-s,this._endY+o-u);return this._endsWithAWall=t(this._endX+i,this._endY+o),!l&&!f||!this._endsWithAWall}create(t){let e=this._startX,n=this._startY,r=this._endX-e,i=this._endY-n,o=1+Math.max(Math.abs(r),Math.abs(i));r&&(r/=Math.abs(r)),i&&(i/=Math.abs(i));for(let a=0;a<o;a++){t(e+a*r,n+a*i,0)}return!0}createPriorityWalls(t){if(!this._endsWithAWall)return;let e=this._startX,n=this._startY,r=this._endX-e,i=this._endY-n;r&&(r/=Math.abs(r)),i&&(i/=Math.abs(i));let o=i,a=-r;t(this._endX+r,this._endY+i),t(this._endX+o,this._endY+a),t(this._endX-o,this._endY-a)}}const z={room:G,corridor:W};function q(t,e,n){n[e[t+1]]=n[t],e[n[t]]=e[t+1],n[t]=t+1,e[t+1]=t}function X(t,e,n){n[e[t]]=n[t],e[n[t]]=e[t],n[t]=t,e[t]=t}var B={Arena:class extends U{create(t){let e=this._width-1,n=this._height-1;for(let r=0;r<=e;r++)for(let i=0;i<=n;i++){t(r,i,r&&i&&r<e&&i<n?0:1)}return this}},Uniform:class extends H{constructor(t,e,n){super(t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(this._options,n),this._map=[],this._dug=0,this._roomAttempts=20,this._corridorAttempts=20,this._connected=[],this._unconnected=[],this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this)}create(t){let e=Date.now();for(;;){if(Date.now()-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(let e=0;e<this._width;e++)for(let n=0;n<this._height;n++)t(e,n,this._map[e][n]);return this}_generateRooms(){let t,e=this._width-2,n=this._height-2;do{if(t=this._generateRoom(),this._dug/(e*n)>this._options.roomDugPercentage)break}while(t)}_generateRoom(){let t=0;for(;t<this._roomAttempts;){t++;let e=G.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null}_generateCorridors(){let t=0;for(;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(let t=0;t<this._rooms.length;t++){let e=this._rooms[t];e.clearDoors(),e.create(this._digCallback)}for(this._unconnected=i.a.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){let t=i.a.getItem(this._connected);if(!t)break;let e=this._closestRoom(this._unconnected,t);if(!e)break;let n=this._closestRoom(this._connected,e);if(!n)break;if(!this._connectRooms(e,n))break;if(!this._unconnected.length)return!0}}return!1}_closestRoom(t,e){let n=1/0,r=e.getCenter(),i=null;for(let e=0;e<t.length;e++){let o=t[e],a=o.getCenter(),s=a[0]-r[0],u=a[1]-r[1],c=s*s+u*u;c<n&&(n=c,i=o)}return i}_connectRooms(t,e){let n,r,i,o,a,s,u,c=t.getCenter(),l=e.getCenter(),f=l[0]-c[0],h=l[1]-c[1];if(Math.abs(f)<Math.abs(h)?(i=h>0?2:0,o=(i+2)%4,a=e.getLeft(),s=e.getRight(),u=0):(i=f>0?1:3,o=(i+2)%4,a=e.getTop(),s=e.getBottom(),u=1),n=this._placeInWall(t,i),!n)return!1;if(n[u]>=a&&n[u]<=s){r=n.slice();let t=0;switch(o){case 0:t=e.getTop()-1;break;case 1:t=e.getRight()+1;break;case 2:t=e.getBottom()+1;break;case 3:t=e.getLeft()-1}r[(u+1)%2]=t,this._digLine([n,r])}else if(n[u]<a-1||n[u]>s+1){let t=n[u]-l[u],i=0;switch(o){case 0:case 1:i=t<0?3:1;break;case 2:case 3:i=t<0?1:3}if(o=(o+i)%4,r=this._placeInWall(e,o),!r)return!1;let a=[0,0];a[u]=n[u];let s=(u+1)%2;a[s]=r[s],this._digLine([n,a,r])}else{let t=(u+1)%2;if(r=this._placeInWall(e,o),!r)return!1;let i=Math.round((r[t]+n[t])/2),a=[0,0],s=[0,0];a[u]=n[u],a[t]=i,s[u]=r[u],s[t]=i,this._digLine([n,a,s,r])}return t.addDoor(n[0],n[1]),e.addDoor(r[0],r[1]),u=this._unconnected.indexOf(t),-1!=u&&(this._unconnected.splice(u,1),this._connected.push(t)),u=this._unconnected.indexOf(e),-1!=u&&(this._unconnected.splice(u,1),this._connected.push(e)),!0}_placeInWall(t,e){let n=[0,0],r=[0,0],o=0;switch(e){case 0:r=[1,0],n=[t.getLeft(),t.getTop()-1],o=t.getRight()-t.getLeft()+1;break;case 1:r=[0,1],n=[t.getRight()+1,t.getTop()],o=t.getBottom()-t.getTop()+1;break;case 2:r=[1,0],n=[t.getLeft(),t.getBottom()+1],o=t.getRight()-t.getLeft()+1;break;case 3:r=[0,1],n=[t.getLeft()-1,t.getTop()],o=t.getBottom()-t.getTop()+1}let a=[],s=-2;for(let t=0;t<o;t++){let e=n[0]+t*r[0],i=n[1]+t*r[1];a.push(null),1==this._map[e][i]?s!=t-1&&(a[t]=[e,i]):(s=t,t&&(a[t-1]=null))}for(let t=a.length-1;t>=0;t--)a[t]||a.splice(t,1);return a.length?i.a.getItem(a):null}_digLine(t){for(let e=1;e<t.length;e++){let n=t[e-1],r=t[e],i=new W(n[0],n[1],r[0],r[1]);i.create(this._digCallback),this._corridors.push(i)}}_digCallback(t,e,n){this._map[t][e]=n,0==n&&this._dug++}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}},Cellular:class extends U{constructor(t,e,n={}){super(t,e),this._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},this.setOptions(n),this._dirs=I[this._options.topology],this._map=this._fillMap(0)}randomize(t){for(let e=0;e<this._width;e++)for(let n=0;n<this._height;n++)this._map[e][n]=i.a.getUniform()<t?1:0;return this}setOptions(t){Object.assign(this._options,t)}set(t,e,n){this._map[t][e]=n}create(t){let e=this._fillMap(0),n=this._options.born,r=this._options.survive;for(let t=0;t<this._height;t++){let i=1,o=0;6==this._options.topology&&(i=2,o=t%2);for(let a=o;a<this._width;a+=i){let i=this._map[a][t],o=this._getNeighbors(a,t);i&&-1!=r.indexOf(o)?e[a][t]=1:i||-1==n.indexOf(o)||(e[a][t]=1)}}this._map=e,t&&this._serviceCallback(t)}_serviceCallback(t){for(let e=0;e<this._height;e++){let n=1,r=0;6==this._options.topology&&(n=2,r=e%2);for(let i=r;i<this._width;i+=n)t(i,e,this._map[i][e])}}_getNeighbors(t,e){let n=0;for(let r=0;r<this._dirs.length;r++){let i=this._dirs[r],o=t+i[0],a=e+i[1];o<0||o>=this._width||a<0||a>=this._height||(n+=1==this._map[o][a]?1:0)}return n}connect(t,e,n){e||(e=0);let r=[],o={},a=1,s=[0,0];6==this._options.topology&&(a=2,s=[0,1]);for(let t=0;t<this._height;t++)for(let n=s[t%2];n<this._width;n+=a)if(this._freeSpace(n,t,e)){let e=[n,t];o[this._pointKey(e)]=e,r.push([n,t])}let u=r[i.a.getUniformInt(0,r.length-1)],c=this._pointKey(u),l={};for(l[c]=u,delete o[c],this._findConnected(l,o,[u],!1,e);Object.keys(o).length>0;){let t=this._getFromTo(l,o),r=t[0],i=t[1],a={};a[this._pointKey(r)]=r,this._findConnected(a,o,[r],!0,e),(6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected).call(this,i,r,l,o,e,n);for(let t in a){let n=a[t];this._map[n[0]][n[1]]=e,l[t]=n,delete o[t]}}t&&this._serviceCallback(t)}_getFromTo(t,e){let n,r=[0,0],o=[0,0],a=Object.keys(t),s=Object.keys(e);for(let u=0;u<5;u++){if(a.length<s.length){let n=a;o=t[n[i.a.getUniformInt(0,n.length-1)]],r=this._getClosest(o,e)}else{let n=s;r=e[n[i.a.getUniformInt(0,n.length-1)]],o=this._getClosest(r,t)}if(n=(r[0]-o[0])*(r[0]-o[0])+(r[1]-o[1])*(r[1]-o[1]),n<64)break}return[r,o]}_getClosest(t,e){let n=null,r=null;for(let i in e){let o=e[i],a=(o[0]-t[0])*(o[0]-t[0])+(o[1]-t[1])*(o[1]-t[1]);(null==r||a<r)&&(r=a,n=o)}return n}_findConnected(t,e,n,r,i){for(;n.length>0;){let o,a=n.splice(0,1)[0];o=6==this._options.topology?[[a[0]+2,a[1]],[a[0]+1,a[1]-1],[a[0]-1,a[1]-1],[a[0]-2,a[1]],[a[0]-1,a[1]+1],[a[0]+1,a[1]+1]]:[[a[0]+1,a[1]],[a[0]-1,a[1]],[a[0],a[1]+1],[a[0],a[1]-1]];for(let a=0;a<o.length;a++){let s=this._pointKey(o[a]);null==t[s]&&this._freeSpace(o[a][0],o[a][1],i)&&(t[s]=o[a],r||delete e[s],n.push(o[a]))}}}_tunnelToConnected(t,e,n,r,i,o){let a,s;e[0]<t[0]?(a=e,s=t):(a=t,s=e);for(let t=a[0];t<=s[0];t++){this._map[t][a[1]]=i;let e=[t,a[1]],o=this._pointKey(e);n[o]=e,delete r[o]}o&&a[0]<s[0]&&o(a,[s[0],a[1]]);let u=s[0];e[1]<t[1]?(a=e,s=t):(a=t,s=e);for(let t=a[1];t<s[1];t++){this._map[u][t]=i;let e=[u,t],o=this._pointKey(e);n[o]=e,delete r[o]}o&&a[1]<s[1]&&o([s[0],a[1]],[s[0],s[1]])}_tunnelToConnected6(t,e,n,r,i,o){let a,s;e[0]<t[0]?(a=e,s=t):(a=t,s=e);let u=a[0],c=a[1];for(;u!=s[0]||c!=s[1];){let t=2;c<s[1]?(c++,t=1):c>s[1]&&(c--,t=1),u<s[0]?u+=t:u>s[0]||s[1]%2?u-=t:u+=t,this._map[u][c]=i;let e=[u,c],o=this._pointKey(e);n[o]=e,delete r[o]}o&&o(e,t)}_freeSpace(t,e,n){return t>=0&&t<this._width&&e>=0&&e<this._height&&this._map[t][e]==n}_pointKey(t){return t[0]+"."+t[1]}},Digger:class extends H{constructor(t,e,n={}){super(t,e),this._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},n),this._features={room:4,corridor:4},this._map=[],this._featureAttempts=20,this._walls={},this._dug=0,this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this),this._priorityWallCallback=this._priorityWallCallback.bind(this)}create(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;let e=(this._width-2)*(this._height-2);this._firstRoom();let n,r=Date.now();do{if(n=0,Date.now()-r>this._options.timeLimit)break;let t=this._findWall();if(!t)break;let e=t.split(","),i=parseInt(e[0]),o=parseInt(e[1]),a=this._getDiggingDirection(i,o);if(!a)continue;let s=0;do{if(s++,this._tryFeature(i,o,a[0],a[1])){this._removeSurroundingWalls(i,o),this._removeSurroundingWalls(i-a[0],o-a[1]);break}}while(s<this._featureAttempts);for(let t in this._walls)this._walls[t]>1&&n++}while(this._dug/e<this._options.dugPercentage||n);if(this._addDoors(),t)for(let e=0;e<this._width;e++)for(let n=0;n<this._height;n++)t(e,n,this._map[e][n]);return this._walls={},this._map=[],this}_digCallback(t,e,n){0==n||2==n?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}_priorityWallCallback(t,e){this._walls[t+","+e]=2}_firstRoom(){let t=Math.floor(this._width/2),e=Math.floor(this._height/2),n=G.createRandomCenter(t,e,this._options);this._rooms.push(n),n.create(this._digCallback)}_findWall(){let t=[],e=[];for(let n in this._walls){2==this._walls[n]?e.push(n):t.push(n)}let n=e.length?e:t;if(!n.length)return null;let r=i.a.getItem(n.sort());return delete this._walls[r],r}_tryFeature(t,e,n,r){let o=i.a.getWeightedValue(this._features),a=z[o].createRandomAt(t,e,n,r,this._options);return!!a.isValid(this._isWallCallback,this._canBeDugCallback)&&(a.create(this._digCallback),a instanceof G&&this._rooms.push(a),a instanceof W&&(a.createPriorityWalls(this._priorityWallCallback),this._corridors.push(a)),!0)}_removeSurroundingWalls(t,e){let n=I[4];for(let r=0;r<n.length;r++){let i=n[r],o=t+i[0],a=e+i[1];delete this._walls[o+","+a],o=t+2*i[0],a=e+2*i[1],delete this._walls[o+","+a]}}_getDiggingDirection(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;let n=null,r=I[4];for(let i=0;i<r.length;i++){let o=r[i],a=t+o[0],s=e+o[1];if(!this._map[a][s]){if(n)return null;n=o}}return n?[-n[0],-n[1]]:null}_addDoors(){let t=this._map;function e(e,n){return 1==t[e][n]}for(let t=0;t<this._rooms.length;t++){let n=this._rooms[t];n.clearDoors(),n.addDoors(e)}}},EllerMaze:class extends U{create(t){let e,n=this._fillMap(1),r=Math.ceil((this._width-2)/2),o=[],a=[];for(let t=0;t<r;t++)o.push(t),a.push(t);for(o.push(r-1),e=1;e+3<this._height;e+=2)for(let t=0;t<r;t++){let r=2*t+1,s=e;n[r][s]=0,t!=o[t+1]&&i.a.getUniform()>9/24&&(q(t,o,a),n[r+1][s]=0),t!=o[t]&&i.a.getUniform()>9/24?X(t,o,a):n[r][s+1]=0}for(let t=0;t<r;t++){let r=2*t+1,s=e;n[r][s]=0,t!=o[t+1]&&(t==o[t]||i.a.getUniform()>9/24)&&(q(t,o,a),n[r+1][s]=0),X(t,o,a)}for(let e=0;e<this._width;e++)for(let r=0;r<this._height;r++)t(e,r,n[e][r]);return this}},DividedMaze:class extends U{constructor(){super(...arguments),this._stack=[],this._map=[]}create(t){let e=this._width,n=this._height;this._map=[];for(let t=0;t<e;t++){this._map.push([]);for(let r=0;r<n;r++){let i=0==t||0==r||t+1==e||r+1==n;this._map[t].push(i?1:0)}}this._stack=[[1,1,e-2,n-2]],this._process();for(let r=0;r<e;r++)for(let e=0;e<n;e++)t(r,e,this._map[r][e]);return this._map=[],this}_process(){for(;this._stack.length;){let t=this._stack.shift();this._partitionRoom(t)}}_partitionRoom(t){let e=[],n=[];for(let n=t[0]+1;n<t[2];n++){let r=this._map[n][t[1]-1],i=this._map[n][t[3]+1];!r||!i||n%2||e.push(n)}for(let e=t[1]+1;e<t[3];e++){let r=this._map[t[0]-1][e],i=this._map[t[2]+1][e];!r||!i||e%2||n.push(e)}if(!e.length||!n.length)return;let r=i.a.getItem(e),o=i.a.getItem(n);this._map[r][o]=1;let a=[],s=[];a.push(s);for(let e=t[0];e<r;e++)this._map[e][o]=1,s.push([e,o]);s=[],a.push(s);for(let e=r+1;e<=t[2];e++)this._map[e][o]=1,s.push([e,o]);s=[],a.push(s);for(let e=t[1];e<o;e++)this._map[r][e]=1,s.push([r,e]);s=[],a.push(s);for(let e=o+1;e<=t[3];e++)this._map[r][e]=1,s.push([r,e]);let u=i.a.getItem(a);for(let t=0;t<a.length;t++){let e=a[t];if(e==u)continue;let n=i.a.getItem(e);this._map[n[0]][n[1]]=0}this._stack.push([t[0],t[1],r-1,o-1]),this._stack.push([r+1,t[1],t[2],o-1]),this._stack.push([t[0],o+1,r-1,t[3]]),this._stack.push([r+1,o+1,t[2],t[3]])}},IceyMaze:class extends U{constructor(t,e,n=0){super(t,e),this._regularity=n,this._map=[]}create(t){let e=this._width,n=this._height,r=this._fillMap(1);e-=e%2?1:2,n-=n%2?1:2;let o=0,a=0,s=0,u=0,c=0,l=!1,f=[[0,0],[0,0],[0,0],[0,0]];do{if(o=1+2*Math.floor(i.a.getUniform()*(e-1)/2),a=1+2*Math.floor(i.a.getUniform()*(n-1)/2),c||(r[o][a]=0),!r[o][a]){this._randomize(f);do{0==Math.floor(i.a.getUniform()*(this._regularity+1))&&this._randomize(f),l=!0;for(let t=0;t<4;t++)if(s=o+2*f[t][0],u=a+2*f[t][1],this._isFree(r,s,u,e,n)){r[s][u]=0,r[o+f[t][0]][a+f[t][1]]=0,o=s,a=u,l=!1,c++;break}}while(!l)}}while(c+1<e*n/4);for(let e=0;e<this._width;e++)for(let n=0;n<this._height;n++)t(e,n,r[e][n]);return this._map=[],this}_randomize(t){for(let e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*i.a.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}}_isFree(t,e,n,r,i){return!(e<1||n<1||e>=r||n>=i)&&t[e][n]}},Rogue:class extends U{constructor(t,e,n){super(t,e),this.map=[],this.rooms=[],this.connectedCells=[],(n=Object.assign({cellWidth:3,cellHeight:3},n)).hasOwnProperty("roomWidth")||(n.roomWidth=this._calculateRoomSize(this._width,n.cellWidth)),n.hasOwnProperty("roomHeight")||(n.roomHeight=this._calculateRoomSize(this._height,n.cellHeight)),this._options=n}create(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(let e=0;e<this._width;e++)for(let n=0;n<this._height;n++)t(e,n,this.map[e][n]);return this}_calculateRoomSize(t,e){let n=Math.floor(t/e*.8),r=Math.floor(t/e*.25);return r<2&&(r=2),n<2&&(n=2),[r,n]}_initRooms(){for(let t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(let e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}}_connectRooms(){let t,e,n,r,o,a,s=i.a.getUniformInt(0,this._options.cellWidth-1),u=i.a.getUniformInt(0,this._options.cellHeight-1),c=!1;do{a=[0,2,4,6],a=i.a.shuffle(a);do{if(c=!1,t=a.pop(),e=s+I[8][t][0],n=u+I[8][t][1],!(e<0||e>=this._options.cellWidth||n<0||n>=this._options.cellHeight)){if(r=this.rooms[s][u],r.connections.length>0&&r.connections[0][0]==e&&r.connections[0][1]==n)break;o=this.rooms[e][n],0==o.connections.length&&(o.connections.push([s,u]),this.connectedCells.push([e,n]),s=e,u=n,c=!0)}}while(a.length>0&&0==c)}while(a.length>0)}_connectUnconnectedRooms(){let t,e,n,r=this._options.cellWidth,o=this._options.cellHeight;this.connectedCells=i.a.shuffle(this.connectedCells);for(let a=0;a<this._options.cellWidth;a++)for(let s=0;s<this._options.cellHeight;s++)if(t=this.rooms[a][s],0==t.connections.length){let u=[0,2,4,6];u=i.a.shuffle(u),n=!1;do{let t=u.pop(),i=a+I[8][t][0],c=s+I[8][t][1];if(!(i<0||i>=r||c<0||c>=o)){if(e=this.rooms[i][c],n=!0,0==e.connections.length)break;for(let t=0;t<e.connections.length;t++)if(e.connections[t][0]==a&&e.connections[t][1]==s){n=!1;break}if(n)break}}while(u.length);n?t.connections.push([e.cellx,e.celly]):console.log("-- Unable to connect room.")}}_createRandomRoomConnections(){}_createRooms(){let t,e,n,r,o,a=this._width,s=this._height,u=this._options.cellWidth,c=this._options.cellHeight,l=Math.floor(this._width/u),f=Math.floor(this._height/c),h=this._options.roomWidth,d=this._options.roomHeight;for(let p=0;p<u;p++)for(let u=0;u<c;u++){if(n=l*p,r=f*u,0==n&&(n=1),0==r&&(r=1),t=i.a.getUniformInt(h[0],h[1]),e=i.a.getUniformInt(d[0],d[1]),u>0)for(o=this.rooms[p][u-1];r-(o.y+o.height)<3;)r++;if(p>0)for(o=this.rooms[p-1][u];n-(o.x+o.width)<3;)n++;let c=Math.round(i.a.getUniformInt(0,l-t)/2),_=Math.round(i.a.getUniformInt(0,f-e)/2);for(;n+c+t>=a;)c?c--:t--;for(;r+_+e>=s;)_?_--:e--;n+=c,r+=_,this.rooms[p][u].x=n,this.rooms[p][u].y=r,this.rooms[p][u].width=t,this.rooms[p][u].height=e;for(let i=n;i<n+t;i++)for(let t=r;t<r+e;t++)this.map[i][t]=0}}_getWallPosition(t,e){let n,r,o;return 1==e||3==e?(n=i.a.getUniformInt(t.x+1,t.x+t.width-2),1==e?(r=t.y-2,o=r+1):(r=t.y+t.height+1,o=r-1),this.map[n][o]=0):(r=i.a.getUniformInt(t.y+1,t.y+t.height-2),2==e?(n=t.x+t.width+1,o=n-1):(n=t.x-2,o=n+1),this.map[o][r]=0),[n,r]}_drawCorridor(t,e){let n,r,o,a,s=e[0]-t[0],u=e[1]-t[1],c=t[0],l=t[1],f=[],h=Math.abs(s),d=Math.abs(u),p=i.a.getUniform(),_=p,g=1-p;for(r=s>0?2:6,o=u>0?4:0,h<d?(n=Math.ceil(d*_),f.push([o,n]),f.push([r,h]),n=Math.floor(d*g),f.push([o,n])):(n=Math.ceil(h*_),f.push([r,n]),f.push([o,d]),n=Math.floor(h*g),f.push([r,n])),this.map[c][l]=0;f.length>0;)for(a=f.pop();a[1]>0;)c+=I[8][a[0]][0],l+=I[8][a[0]][1],this.map[c][l]=0,a[1]=a[1]-1}_createCorridors(){let t,e,n,r,i,o=this._options.cellWidth,a=this._options.cellHeight;for(let s=0;s<o;s++)for(let o=0;o<a;o++){t=this.rooms[s][o];for(let o=0;o<t.connections.length;o++)e=t.connections[o],n=this.rooms[e[0]][e[1]],n.cellx>t.cellx?(r=2,i=4):n.cellx<t.cellx?(r=4,i=2):n.celly>t.celly?(r=3,i=1):(r=1,i=3),this._drawCorridor(this._getWallPosition(t,r),this._getWallPosition(n,i))}}}};const $=.5*(Math.sqrt(3)-1),Z=(3-Math.sqrt(3))/6;var J={Simplex:class extends class{}{constructor(t=256){super(),this._gradients=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];let e=[];for(let n=0;n<t;n++)e.push(n);e=i.a.shuffle(e),this._perms=[],this._indexes=[];for(let n=0;n<2*t;n++)this._perms.push(e[n%t]),this._indexes.push(this._perms[n]%this._gradients.length)}get(t,e){let n,r,i,o=this._perms,a=this._indexes,u=o.length/2,c=0,l=0,f=0,h=(t+e)*$,d=Math.floor(t+h),p=Math.floor(e+h),_=(d+p)*Z,g=t-(d-_),v=e-(p-_);g>v?(r=1,i=0):(r=0,i=1);let y=g-r+Z,m=v-i+Z,b=g-1+2*Z,E=v-1+2*Z,O=Object(s.mod)(d,u),T=Object(s.mod)(p,u),w=.5-g*g-v*v;if(w>=0){w*=w,n=a[O+o[T]];let t=this._gradients[n];c=w*w*(t[0]*g+t[1]*v)}let P=.5-y*y-m*m;if(P>=0){P*=P,n=a[O+r+o[T+i]];let t=this._gradients[n];l=P*P*(t[0]*y+t[1]*m)}let x=.5-b*b-E*E;if(x>=0){x*=x,n=a[O+1+o[T+1]];let t=this._gradients[n];f=x*x*(t[0]*b+t[1]*E)}return 70*(c+l+f)}}};class Q{constructor(t,e,n,r={}){this._toX=t,this._toY=e,this._passableCallback=n,this._options=Object.assign({topology:8},r),this._dirs=I[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])}_getNeighbors(t,e){let n=[];for(let r=0;r<this._dirs.length;r++){let i=this._dirs[r],o=t+i[0],a=e+i[1];this._passableCallback(o,a)&&n.push([o,a])}return n}}var tt={Dijkstra:class extends Q{constructor(t,e,n,r){super(t,e,n,r),this._computed={},this._todo=[],this._add(t,e,null)}compute(t,e,n){let r=t+","+e;if(r in this._computed||this._compute(t,e),!(r in this._computed))return;let i=this._computed[r];for(;i;)n(i.x,i.y),i=i.prev}_compute(t,e){for(;this._todo.length;){let n=this._todo.shift();if(n.x==t&&n.y==e)return;let r=this._getNeighbors(n.x,n.y);for(let t=0;t<r.length;t++){let e=r[t],i=e[0],o=e[1];i+","+o in this._computed||this._add(i,o,n)}}}_add(t,e,n){let r={x:t,y:e,prev:n};this._computed[t+","+e]=r,this._todo.push(r)}},AStar:class extends Q{constructor(t,e,n,r={}){super(t,e,n,r),this._todo=[],this._done={}}compute(t,e,n){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){let n=this._todo.shift(),r=n.x+","+n.y;if(r in this._done)continue;if(this._done[r]=n,n.x==t&&n.y==e)break;let i=this._getNeighbors(n.x,n.y);for(let t=0;t<i.length;t++){let e=i[t],r=e[0],o=e[1];r+","+o in this._done||this._add(r,o,n)}}let r=this._done[t+","+e];if(r)for(;r;)n(r.x,r.y),r=r.prev}_add(t,e,n){let r=this._distance(t,e),i={x:t,y:e,prev:n,g:n?n.g+1:0,h:r},o=i.g+i.h;for(let t=0;t<this._todo.length;t++){let e=this._todo[t],n=e.g+e.h;if(o<n||o==n&&r<e.h)return void this._todo.splice(t,0,i)}this._todo.push(i)}_distance(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:let n=Math.abs(t-this._fromX),r=Math.abs(e-this._fromY);return r+Math.max(0,(n-r)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}}}};class et{constructor(t){this._scheduler=t,this._lock=1}start(){return this.unlock()}lock(){return this._lock++,this}unlock(){if(!this._lock)throw new Error("Cannot unlock unlocked engine");for(this._lock--;!this._lock;){let t=this._scheduler.next();if(!t)return this.lock();let e=t.act();e&&e.then&&(this.lock(),e.then(this.unlock.bind(this)))}return this}}class nt{constructor(t,e={}){this._reflectivityCallback=t,this._options={},e=Object.assign({passes:1,emissionThreshold:100,range:10},e),this._lights={},this._reflectivityCache={},this._fovCache={},this.setOptions(e)}setOptions(t){return Object.assign(this._options,t),t&&t.range&&this.reset(),this}setFOV(t){return this._fov=t,this._fovCache={},this}setLight(t,e,n){let r=t+","+e;return n?this._lights[r]="string"==typeof n?f.fromString(n):n:delete this._lights[r],this}clearLights(){this._lights={}}reset(){return this._reflectivityCache={},this._fovCache={},this}compute(t){let e={},n={},r={};for(let t in this._lights){let e=this._lights[t];n[t]=[0,0,0],f.add_(n[t],e)}for(let t=0;t<this._options.passes;t++)this._emitLight(n,r,e),t+1!=this._options.passes&&(n=this._computeEmitters(r,e));for(let e in r){let n=e.split(",");t(parseInt(n[0]),parseInt(n[1]),r[e])}return this}_emitLight(t,e,n){for(let r in t){let i=r.split(","),o=parseInt(i[0]),a=parseInt(i[1]);this._emitLightFromCell(o,a,t[r],e),n[r]=1}return this}_computeEmitters(t,e){let n={};for(let r in t){if(r in e)continue;let i,o=t[r];if(r in this._reflectivityCache)i=this._reflectivityCache[r];else{let t=r.split(","),e=parseInt(t[0]),n=parseInt(t[1]);i=this._reflectivityCallback(e,n),this._reflectivityCache[r]=i}if(0==i)continue;let a=[0,0,0],s=0;for(let t=0;t<3;t++){let e=Math.round(o[t]*i);a[t]=e,s+=e}s>this._options.emissionThreshold&&(n[r]=a)}return n}_emitLightFromCell(t,e,n,r){let i,o=t+","+e;i=o in this._fovCache?this._fovCache[o]:this._updateFOV(t,e);for(let t in i){let e,o=i[t];t in r?e=r[t]:(e=[0,0,0],r[t]=e);for(let t=0;t<3;t++)e[t]+=Math.round(n[t]*o)}return this}_updateFOV(t,e){let n=t+","+e,r={};this._fovCache[n]=r;let i=this._options.range;return this._fov.compute(t,e,i,function(t,e,n,o){let a=o*(1-n/i);0!=a&&(r[t+","+e]=a)}.bind(this)),r}}const rt=s,it=f,ot=r},function(t,e,n){"use strict";function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));class r{getContainer(){return null}setOptions(t){this._options=t}}},function(t,e,n){"use strict";var r,i,o,a,s,u,c,l,f,h,d=this&&this.__assign||function(){return(d=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.UI_CORNER_TOP_LEFT="UI_CORNER_TOP_LEFT",t.UI_CORNER_TOP_RIGHT="UI_CORNER_TOP_RIGHT",t.UI_CORNER_BOTTOM_LEFT="UI_CORNER_BOTTOM_LEFT",t.UI_CORNER_BOTTOM_RIGHT="UI_CORNER_BOTTOM_RIGHT",t.UI_LINE_HORIZONTAL="UI_LINE_HORIZONTAL",t.UI_LINE_VERTICAL="UI_LINE_VERTICAL",t.UI_BACKGROUND="UI_BACKGROUND"}(u||(u={})),function(t){t.FLOOR="FLOOR",t.WALL="WALL"}(c||(c={})),function(t){t.PLAYER="PLAYER"}(l||(l={})),function(t){t.FOLIAGE="FOLIAGE",t.PORTAL="PORTAL"}(f||(f={})),function(t){t.KEY="KEY"}(h||(h={})),e.GLYPH_TYPES=d(d(d(d(d({},u),c),l),f),h);var p=((r={})[e.GLYPH_TYPES.FLOOR]={glyph:".",fg:"#111",bg:"#000"},r[e.GLYPH_TYPES.WALL]={glyph:"█",fg:"#444",bg:"#000"},r),_=((i={})[e.GLYPH_TYPES.PLAYER]={glyph:"@",fg:"#e6ebff",bg:null},i),g=((o={})[e.GLYPH_TYPES.FOLIAGE]={glyph:"~",fg:"#426f47",bg:"#262"},o[e.GLYPH_TYPES.PORTAL]={glyph:"~",fg:"#8c0f51",bg:"#000"},o),v=((a={})[e.GLYPH_TYPES.KEY]={glyph:"F",fg:"#9ca417",bg:"#000"},a),y=((s={})[e.GLYPH_TYPES.UI_CORNER_TOP_LEFT]={glyph:"┌",fg:"#fff",bg:"#000"},s[e.GLYPH_TYPES.UI_CORNER_TOP_RIGHT]={glyph:"┐",fg:"#fff",bg:"#000"},s[e.GLYPH_TYPES.UI_CORNER_BOTTOM_LEFT]={glyph:"└",fg:"#fff",bg:"#000"},s[e.GLYPH_TYPES.UI_CORNER_BOTTOM_RIGHT]={glyph:"┘",fg:"#fff",bg:"#000"},s[e.GLYPH_TYPES.UI_LINE_HORIZONTAL]={glyph:"─",fg:"#fff",bg:"#000"},s[e.GLYPH_TYPES.UI_LINE_VERTICAL]={glyph:"│",fg:"#fff",bg:"#000"},s[e.GLYPH_TYPES.UI_BACKGROUND]={glyph:null,fg:null,bg:"#000"},s);e.GLYPHS=d(d(d(d(d({},p),_),g),v),y)},function(t,e,n){"use strict";n.r(e),n.d(e,"actionChannel",(function(){return i.p})),n.d(e,"all",(function(){return i.B})),n.d(e,"apply",(function(){return i.a})),n.d(e,"call",(function(){return i.o})),n.d(e,"cancel",(function(){return i.n})),n.d(e,"cancelled",(function(){return i.H})),n.d(e,"cps",(function(){return i.D})),n.d(e,"delay",(function(){return i.v})),n.d(e,"effectTypes",(function(){return i.x})),n.d(e,"flush",(function(){return i.I})),n.d(e,"fork",(function(){return i.m})),n.d(e,"getContext",(function(){return i.J})),n.d(e,"join",(function(){return i.F})),n.d(e,"put",(function(){return i.z})),n.d(e,"putResolve",(function(){return i.A})),n.d(e,"race",(function(){return i.w})),n.d(e,"select",(function(){return i.G})),n.d(e,"setContext",(function(){return i.K})),n.d(e,"spawn",(function(){return i.E})),n.d(e,"take",(function(){return i.l})),n.d(e,"takeMaybe",(function(){return i.y})),n.d(e,"debounce",(function(){return b})),n.d(e,"retry",(function(){return m})),n.d(e,"takeEvery",(function(){return _})),n.d(e,"takeLatest",(function(){return g})),n.d(e,"takeLeading",(function(){return v})),n.d(e,"throttle",(function(){return y}));n(3),n(11);var r=n(2),i=n(0),o=(n(17),function(t){return{done:!0,value:t}}),a={};function s(t){return Object(r.b)(t)?"channel":Object(r.l)(t)?String(t):Object(r.d)(t)?t.name:String(t)}function u(t,e,n){var r,s,u,c=e;function l(e,n){if(c===a)return o(e);if(n&&!s)throw c=a,n;r&&r(e);var i=n?t[s](n):t[c]();return c=i.nextState,u=i.effect,r=i.stateUpdater,s=i.errorState,c===a?o(e):u}return Object(i.ab)(l,(function(t){return l(null,t)}),n)}function c(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var a,c={done:!1,value:Object(i.l)(t)},l=function(t){return{done:!1,value:i.m.apply(void 0,[e].concat(r,[t]))}},f=function(t){return a=t};return u({q1:function(){return{nextState:"q2",effect:c,stateUpdater:f}},q2:function(){return{nextState:"q1",effect:l(a)}}},"q1","takeEvery("+s(t)+", "+e.name+")")}function l(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var a,c,l={done:!1,value:Object(i.l)(t)},f=function(t){return{done:!1,value:i.m.apply(void 0,[e].concat(r,[t]))}},h=function(t){return{done:!1,value:Object(i.n)(t)}},d=function(t){return a=t},p=function(t){return c=t};return u({q1:function(){return{nextState:"q2",effect:l,stateUpdater:p}},q2:function(){return a?{nextState:"q3",effect:h(a)}:{nextState:"q1",effect:f(c),stateUpdater:d}},q3:function(){return{nextState:"q1",effect:f(c),stateUpdater:d}}},"q1","takeLatest("+s(t)+", "+e.name+")")}function f(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var a,c={done:!1,value:Object(i.l)(t)},l=function(t){return{done:!1,value:i.o.apply(void 0,[e].concat(r,[t]))}},f=function(t){return a=t};return u({q1:function(){return{nextState:"q2",effect:c,stateUpdater:f}},q2:function(){return{nextState:"q1",effect:l(a)}}},"q1","takeLeading("+s(t)+", "+e.name+")")}function h(t,e,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];var c,l,f={done:!1,value:Object(i.p)(e,Object(i.r)(1))},h=function(){return{done:!1,value:Object(i.l)(l)}},d=function(t){return{done:!1,value:i.m.apply(void 0,[n].concat(o,[t]))}},p={done:!1,value:Object(i.v)(t)},_=function(t){return c=t},g=function(t){return l=t};return u({q1:function(){return{nextState:"q2",effect:f,stateUpdater:g}},q2:function(){return{nextState:"q3",effect:h(),stateUpdater:_}},q3:function(){return{nextState:"q4",effect:d(c)}},q4:function(){return{nextState:"q2",effect:p}}},"q1","throttle("+s(e)+", "+n.name+")")}function d(t,e,n){for(var r=t,o=arguments.length,s=new Array(o>3?o-3:0),c=3;c<o;c++)s[c-3]=arguments[c];var l={done:!1,value:i.o.apply(void 0,[n].concat(s))},f={done:!1,value:Object(i.v)(e)};return u({q1:function(){return{nextState:"q2",effect:l,errorState:"q10"}},q2:function(){return{nextState:a}},q10:function(t){if((r-=1)<=0)throw t;return{nextState:"q1",effect:f}}},"q1","retry("+n.name+")")}function p(t,e,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];var c,l,f={done:!1,value:Object(i.l)(e)},h={done:!1,value:Object(i.w)({action:Object(i.l)(e),debounce:Object(i.v)(t)})},d=function(t){return{done:!1,value:i.m.apply(void 0,[n].concat(o,[t]))}},p=function(t){return{done:!1,value:t}},_=function(t){return c=t},g=function(t){return l=t};return u({q1:function(){return{nextState:"q2",effect:f,stateUpdater:_}},q2:function(){return{nextState:"q3",effect:h,stateUpdater:g}},q3:function(){return l.debounce?{nextState:"q1",effect:d(c)}:{nextState:"q2",effect:p(l.action),stateUpdater:_}}},"q1","debounce("+s(e)+", "+n.name+")")}function _(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return i.m.apply(void 0,[c,t,e].concat(r))}function g(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return i.m.apply(void 0,[l,t,e].concat(r))}function v(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];return i.m.apply(void 0,[f,t,e].concat(r))}function y(t,e,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];return i.m.apply(void 0,[h,t,e,n].concat(o))}function m(t,e,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];return i.o.apply(void 0,[d,t,e,n].concat(o))}function b(t,e,n){for(var r=arguments.length,o=new Array(r>3?r-3:0),a=3;a<r;a++)o[a-3]=arguments[a];return i.m.apply(void 0,[p,t,e,n].concat(o))}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0});var redux_1=__webpack_require__(20),redux_saga_1=__importDefault(__webpack_require__(62)),redux_logger_1=__webpack_require__(31),root_1=__importDefault(__webpack_require__(32)),root_2=__webpack_require__(39),sagaMiddleware=redux_saga_1.default(),middlewares=[sagaMiddleware],loggingEnabled=!0;if(loggingEnabled){var logger=redux_logger_1.createLogger({collapsed:!0,timestamp:!0});middlewares.push(logger)}var game=redux_1.createStore(root_1.default,redux_1.applyMiddleware.apply(void 0,middlewares));sagaMiddleware.run(root_2.rootSaga),eval("window.game = game;"),exports.action=function(t,e){game.dispatch({type:t,payload:e})},exports.default=game},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ID=function(){return"_"+Math.random().toString(36).substr(2,9)}},function(t,e,n){"use strict";var r=n(3);e.a=function(t,e){var n;void 0===e&&(e=!0);var i=new Promise((function(r){n=setTimeout(r,t,e)}));return i[r.a]=function(){clearTimeout(n)},i}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,n){"use strict";n.r(e),n.d(e,"__DO_NOT_USE__ActionTypes",(function(){return o})),n.d(e,"applyMiddleware",(function(){return g})),n.d(e,"bindActionCreators",(function(){return f})),n.d(e,"combineReducers",(function(){return c})),n.d(e,"compose",(function(){return _})),n.d(e,"createStore",(function(){return s}));var r=n(21),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},o={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function a(t){if("object"!=typeof t||null===t)return!1;for(var e=t;null!==Object.getPrototypeOf(e);)e=Object.getPrototypeOf(e);return Object.getPrototypeOf(t)===e}function s(t,e,n){var i;if("function"==typeof e&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof e&&void 0===n&&(n=e,e=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(t,e)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var u=t,c=e,l=[],f=l,h=!1;function d(){f===l&&(f=l.slice())}function p(){if(h)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function _(t){if("function"!=typeof t)throw new Error("Expected the listener to be a function.");if(h)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var e=!0;return d(),f.push(t),function(){if(e){if(h)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");e=!1,d();var n=f.indexOf(t);f.splice(n,1),l=null}}}function g(t){if(!a(t))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===t.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(h)throw new Error("Reducers may not dispatch actions.");try{h=!0,c=u(c,t)}finally{h=!1}for(var e=l=f,n=0;n<e.length;n++){(0,e[n])()}return t}function v(t){if("function"!=typeof t)throw new Error("Expected the nextReducer to be a function.");u=t,g({type:o.REPLACE})}function y(){var t,e=_;return(t={subscribe:function(t){if("object"!=typeof t||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(p())}return n(),{unsubscribe:e(n)}}})[r.a]=function(){return this},t}return g({type:o.INIT}),(i={dispatch:g,subscribe:_,getState:p,replaceReducer:v})[r.a]=y,i}function u(t,e){var n=e&&e.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+t+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++){var i=e[r];0,"function"==typeof t[i]&&(n[i]=t[i])}var a,s=Object.keys(n);try{!function(t){Object.keys(t).forEach((function(e){var n=t[e];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+e+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:o.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+e+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(t){a=t}return function(t,e){if(void 0===t&&(t={}),a)throw a;for(var r=!1,i={},o=0;o<s.length;o++){var c=s[o],l=n[c],f=t[c],h=l(f,e);if(void 0===h){var d=u(c,e);throw new Error(d)}i[c]=h,r=r||h!==f}return(r=r||s.length!==Object.keys(t).length)?i:t}}function l(t,e){return function(){return e(t.apply(this,arguments))}}function f(t,e){if("function"==typeof t)return l(t,e);if("object"!=typeof t||null===t)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===t?"null":typeof t)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in t){var i=t[r];"function"==typeof i&&(n[r]=l(i,e))}return n}function h(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function d(t,e){var n=Object.keys(t);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(t)),e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n}function p(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?d(n,!0).forEach((function(e){h(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):d(n).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function _(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 0===e.length?function(t){return t}:1===e.length?e[0]:e.reduce((function(t,e){return function(){return t(e.apply(void 0,arguments))}}))}function g(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return function(){var n=t.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=e.map((function(t){return t(i)}));return p({},n,{dispatch:r=_.apply(void 0,o)(n.dispatch)})}}}},function(t,e,n){"use strict";(function(t,r){var i,o=n(29);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var a=Object(o.a)(i);e.a=a}).call(this,n(18),n(30)(t))},function(t,e,n){"use strict";(function(t){n.d(e,"a",(function(){return a}));var r=n(12),i=n(5);function o(t){let e=i.fromString(t);return 36*Math.floor(e[0]*(6/256))+6*Math.floor(e[1]*(6/256))+1*Math.floor(e[2]*(6/256))+16}class a extends r.a{constructor(){super(),this._offset=[0,0],this._cursor=[-1,-1],this._lastColor=""}schedule(t){setTimeout(t,1e3/60)}setOptions(t){super.setOptions(t);let e=[t.width,t.height],n=this.computeSize();this._offset=n.map((t,n)=>Math.floor((t-e[n])/2))}clear(){t.stdout.write(`[0;48;5;${o(this._options.bg)}m[2J`)}draw(e,n){let[r,i,a,s,u]=e,c=this._offset[0]+r,l=this._offset[1]+i,f=this.computeSize();if(c<0||c>=f[0])return;if(l<0||l>=f[1])return;if(c===this._cursor[0]&&l===this._cursor[1]||(t.stdout.write(function(t,e){return`[${e+1};${t+1}H`}(c,l)),this._cursor[0]=c,this._cursor[1]=l),n&&(a||(a=" ")),!a)return;let h=function(t,e){return`[0;38;5;${o(t)};48;5;${o(e)}m`}(s,u);h!==this._lastColor&&(t.stdout.write(h),this._lastColor=h);let d=[].concat(a);t.stdout.write(d[0]),this._cursor[0]++,this._cursor[0]>=f[0]&&(this._cursor[0]=0,this._cursor[1]++)}computeFontSize(){throw new Error("Terminal backend has no notion of font size")}eventToPosition(t,e){return[t,e]}computeSize(){return[t.stdout.columns,t.stdout.rows]}}}).call(this,n(41))},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i,o=r(n(15)),a=n(47),s=n(58),u=n(59),c=n(9),l=n(16),f=n(60);n(61),e.WIDTH=64,e.HEIGHT=32,e.BOTTOM_PANEL_HEIGHT=6,e.playerID=l.ID();window.addEventListener("DOMContentLoaded",(function(){i=s.setupDisplay({width:e.WIDTH,height:e.HEIGHT}),a.setupKeys(),u.setupMap({playerID:e.playerID}),document.querySelector(".main .loading").remove(),c.setupEntities({playerID:e.playerID,WIDTH:e.WIDTH,HEIGHT:e.HEIGHT,BOTTOM_PANEL_HEIGHT:e.BOTTOM_PANEL_HEIGHT,game:o.default}),f.setupItems({game:o.default}),o.default.dispatch({type:"CALCULATE_FOV",payload:{}}),s.draw({game:o.default,display:i})})),o.default.subscribe((function(){return requestAnimationFrame((function(){return s.draw({game:o.default,display:i})}))}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(25);!function(t){t.ENTER="ENTER",t.EXIT="EXIT",t.WITHIN="WITHIN"}(e.TRIGGER_TYPES||(e.TRIGGER_TYPES={})),e.isWithinZone=function(t,e){return function(n){var i=!1;return r.getZoneCells(n).forEach((function(n){n[0]===t&&n[1]===e&&(i=!0)})),i}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isCell=function(t){return 2===t.length},e.isArea=function(t){return 4===t.length},e.getZoneCells=function(t){return t.cells.reduce((function(t,n){if(e.isArea(n)){for(var r=n[0],i=n[1],o=n[2],a=n[3],s=r;s<r+o;s++)for(var u=i;u<i+a;u++)t.push([s,u]);t.push.apply(t,[])}else e.isCell(n)&&t.push(n);return t}),[])}},function(t,e,n){var r;n(46),void 0===(r=function(){var t,e="undefined"!=typeof navigator&&~navigator.userAgent.indexOf("Mac OS X"),n=["shiftKey","ctrlKey","altKey","metaKey"],r={shift:"shift",ctrl:"ctrl",control:"ctrl",alt:"alt",option:"alt",win:"meta",cmd:"meta",super:"meta",meta:"meta",defmod:e?"meta":"ctrl"},i=["shift","ctrl","alt","meta"],o=[16,17,18,91],a={backspace:8,tab:9,enter:13,return:13,pause:19,caps:20,capslock:20,escape:27,esc:27,space:32,pgup:33,pageup:33,pgdown:34,pagedown:34,end:35,home:36,ins:45,insert:45,del:46,delete:46,left:37,up:38,right:39,down:40,"*":106,"+":107,plus:107,minus:109,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222};for(t=0;t<10;t++)a["num-"+t]=t+95;for(t=0;t<10;t++)a[t.toString()]=t+48;for(t=1;t<25;t++)a["f"+t]=t+111;for(t=65;t<91;t++)a[String.fromCharCode(t).toLowerCase()]=t;var s={};for(var u in a){var c=a[u];(!s[c]||s[c].length<u.length)&&(s[c]=u)}var l="",f={};function h(t){var e,n=t.split(/-(?!$)/),i=n[n.length-1],o={code:a[i]};if(!o.code)throw'Unknown key "'+i+'" in keystring "'+t+'"';for(var s=0;s<n.length-1;s++){if(i=n[s],!(e=r[i]))throw'Unknown modifier "'+i+'" in keystring "'+t+'"';o[e]=!0}return o}function d(t){for(var e="",n=0;n<i.length;n++)t[i[n]]&&(e+=i[n]+"-");return e+=s[t.code]}function p(t,e){for(var n=0;n<e.length;n++){var r=e[n];if(r&&(t=t[r]),!t)break}return t}var _=[];function g(t,e,n){for(var r=t.split("."),i=f,o=0,a=(r=r.concat(e)).length;o<a;o++){var s=r[o];if(s&&(i=i[s]||(i[s]={}),n&&n._keymage.preventDefault&&(i.preventDefault=!0),o===a-1))return i.handlers||(i.handlers=[])}}function v(t,e,n){g(t,e,n).push(n)}function y(t,e,n){var r=g(t,e),i=r.indexOf(n);~i&&r.splice(i,1)}function m(t,e,n,r){if(void 0===e&&void 0===n)return function(e,n){return b(t,e,n)};"function"==typeof e&&(r=n,n=e,e=t,t="");var i=function(t){for(var e=[],n=t.split(" "),r=0;r<n.length;r++){var i=h(n[r]);i=d(i),e.push(i)}return e.original=t,e}(e);return[t,i,n,r]}function b(t,e,n,r){var i=m(t,e,n,r);return n=i[2],r=i[3],n._keymage=r||{},n._keymage.original=e,v.apply(null,i),function(){y.apply(null,i)}}return b.unbind=function(t,e,n){var r=m(t,e,n);y.apply(null,r)},b.parse=h,b.stringify=d,b.bindings=f,b.setScope=function(t){l=t||""},b.getScope=function(){return l},b.pushScope=function(t){return l=(l?l+".":"")+t},b.popScope=function(t){var e;return t?(l=l.replace(new RegExp("(^|\\.)"+t+"(\\.|$).*"),""),t):(e=l.lastIndexOf("."),t=l.slice(e+1),l=-1==e?"":l.slice(0,e),t)},b.version="1.1.3",window.addEventListener("keydown",(function(t){if(!~o.indexOf(t.keyCode)){var e=_.slice();e.push(function(t){for(var e={code:t.keyCode},r=0;r<n.length;r++){var i=n[r];t[i]&&(e[i.slice(0,i.length-3)]=!0)}return d(e)}(t));for(var r,i,a,s=l.split("."),u=s.length;u>=0;u--)if(i=p(f,s.slice(0,u))){r=!0;for(var c=0;c<e.length;c++){if(!i[a=e[c]]){r=!1;break}i=i[a]}if(r)break}var h=s.slice(0,u).join("."),g=i.preventDefault;if(r&&!i.handlers)return _=e,void(g&&t.preventDefault());if(r)for(u=0;u<i.handlers.length;u++){var v=i.handlers[u],y=v._keymage;(!1===v.call(y.context,t,{shortcut:y.original,scope:l,definitionScope:h})||g)&&t.preventDefault()}_=[]}}),!1),b}.call(e,n,e,t))||(t.exports=r)},function(t,e,n){var r=n(51),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},function(t,e,n){var r=n(27).Symbol;t.exports=r},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",(function(){return r}))},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){(function(t){!function(e){"use strict";function n(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}function r(t,e){Object.defineProperty(this,"kind",{value:t,enumerable:!0}),e&&e.length&&Object.defineProperty(this,"path",{value:e,enumerable:!0})}function i(t,e,n){i.super_.call(this,"E",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function o(t,e){o.super_.call(this,"N",t),Object.defineProperty(this,"rhs",{value:e,enumerable:!0})}function a(t,e){a.super_.call(this,"D",t),Object.defineProperty(this,"lhs",{value:e,enumerable:!0})}function s(t,e,n){s.super_.call(this,"A",t),Object.defineProperty(this,"index",{value:e,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function u(t,e,n){var r=t.slice((n||e)+1||t.length);return t.length=e<0?t.length+e:e,t.push.apply(t,r),t}function c(t){var e=void 0===t?"undefined":T(t);return"object"!==e?e:t===Math?"math":null===t?"null":Array.isArray(t)?"array":"[object Date]"===Object.prototype.toString.call(t)?"date":"function"==typeof t.toString&&/^\/.*\//.test(t.toString())?"regexp":"object"}function l(t,e,n,r,f,h,d){d=d||[];var p=(f=f||[]).slice(0);if(void 0!==h){if(r){if("function"==typeof r&&r(p,h))return;if("object"===(void 0===r?"undefined":T(r))){if(r.prefilter&&r.prefilter(p,h))return;if(r.normalize){var _=r.normalize(p,h,t,e);_&&(t=_[0],e=_[1])}}}p.push(h)}"regexp"===c(t)&&"regexp"===c(e)&&(t=t.toString(),e=e.toString());var g=void 0===t?"undefined":T(t),v=void 0===e?"undefined":T(e),y="undefined"!==g||d&&d[d.length-1].lhs&&d[d.length-1].lhs.hasOwnProperty(h),m="undefined"!==v||d&&d[d.length-1].rhs&&d[d.length-1].rhs.hasOwnProperty(h);if(!y&&m)n(new o(p,e));else if(!m&&y)n(new a(p,t));else if(c(t)!==c(e))n(new i(p,t,e));else if("date"===c(t)&&t-e!=0)n(new i(p,t,e));else if("object"===g&&null!==t&&null!==e)if(d.filter((function(e){return e.lhs===t})).length)t!==e&&n(new i(p,t,e));else{if(d.push({lhs:t,rhs:e}),Array.isArray(t)){var b;for(t.length,b=0;b<t.length;b++)b>=e.length?n(new s(p,b,new a(void 0,t[b]))):l(t[b],e[b],n,r,p,b,d);for(;b<e.length;)n(new s(p,b,new o(void 0,e[b++])))}else{var E=Object.keys(t),O=Object.keys(e);E.forEach((function(i,o){var a=O.indexOf(i);a>=0?(l(t[i],e[i],n,r,p,i,d),O=u(O,a)):l(t[i],void 0,n,r,p,i,d)})),O.forEach((function(t){l(void 0,e[t],n,r,p,t,d)}))}d.length=d.length-1}else t!==e&&("number"===g&&isNaN(t)&&isNaN(e)||n(new i(p,t,e)))}function f(t,e,n,r){return r=r||[],l(t,e,(function(t){t&&r.push(t)}),n),r.length?r:void 0}function h(t,e,n){if(t&&e&&n&&n.kind){for(var r=t,i=-1,o=n.path?n.path.length-1:0;++i<o;)void 0===r[n.path[i]]&&(r[n.path[i]]="number"==typeof n.path[i]?[]:{}),r=r[n.path[i]];switch(n.kind){case"A":!function t(e,n,r){if(r.path&&r.path.length){var i,o=e[n],a=r.path.length-1;for(i=0;i<a;i++)o=o[r.path[i]];switch(r.kind){case"A":t(o[r.path[i]],r.index,r.item);break;case"D":delete o[r.path[i]];break;case"E":case"N":o[r.path[i]]=r.rhs}}else switch(r.kind){case"A":t(e[n],r.index,r.item);break;case"D":e=u(e,n);break;case"E":case"N":e[n]=r.rhs}return e}(n.path?r[n.path[i]]:r,n.index,n.item);break;case"D":delete r[n.path[i]];break;case"E":case"N":r[n.path[i]]=n.rhs}}}function d(t){return"color: "+x[t].color+"; font-weight: bold"}function p(t,e,n,r){var i=f(t,e);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(t){n.log("diff")}i?i.forEach((function(t){var e=t.kind,r=function(t){var e=t.kind,n=t.path,r=t.lhs,i=t.rhs,o=t.index,a=t.item;switch(e){case"E":return[n.join("."),r,"→",i];case"N":return[n.join("."),i];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+o+"]",a];default:return[]}}(t);n.log.apply(n,["%c "+x[e].text,d(e)].concat(w(r)))})):n.log("—— no diff ——");try{n.groupEnd()}catch(t){n.log("—— diff end —— ")}}function _(t,e,n,r){switch(void 0===t?"undefined":T(t)){case"object":return"function"==typeof t[r]?t[r].apply(t,w(n)):t[r];case"function":return t(e);default:return t}}function g(t,e){var n=e.logger,r=e.actionTransformer,i=e.titleFormatter,o=void 0===i?function(t){var e=t.timestamp,n=t.duration;return function(t,r,i){var o=["action"];return o.push("%c"+String(t.type)),e&&o.push("%c@ "+r),n&&o.push("%c(in "+i.toFixed(2)+" ms)"),o.join(" ")}}(e):i,a=e.collapsed,s=e.colors,u=e.level,c=e.diff,l=void 0===e.titleFormatter;t.forEach((function(i,f){var h=i.started,d=i.startedTime,g=i.action,v=i.prevState,y=i.error,m=i.took,b=i.nextState,O=t[f+1];O&&(b=O.prevState,m=O.started-h);var T=r(g),w="function"==typeof a?a((function(){return b}),g,i):a,P=E(d),x=s.title?"color: "+s.title(T)+";":"",S=["color: gray; font-weight: lighter;"];S.push(x),e.timestamp&&S.push("color: gray; font-weight: lighter;"),e.duration&&S.push("color: gray; font-weight: lighter;");var A=o(T,P,m);try{w?s.title&&l?n.groupCollapsed.apply(n,["%c "+A].concat(S)):n.groupCollapsed(A):s.title&&l?n.group.apply(n,["%c "+A].concat(S)):n.group(A)}catch(t){n.log(A)}var I=_(u,T,[v],"prevState"),L=_(u,T,[T],"action"),M=_(u,T,[y,v],"error"),C=_(u,T,[b],"nextState");if(I)if(s.prevState){var R="color: "+s.prevState(v)+"; font-weight: bold";n[I]("%c prev state",R,v)}else n[I]("prev state",v);if(L)if(s.action){var k="color: "+s.action(T)+"; font-weight: bold";n[L]("%c action    ",k,T)}else n[L]("action    ",T);if(y&&M)if(s.error){var j="color: "+s.error(y,v)+"; font-weight: bold;";n[M]("%c error     ",j,y)}else n[M]("error     ",y);if(C)if(s.nextState){var N="color: "+s.nextState(b)+"; font-weight: bold";n[C]("%c next state",N,b)}else n[C]("next state",b);c&&p(v,b,n,w);try{n.groupEnd()}catch(t){n.log("—— log end ——")}}))}function v(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},S,t),n=e.logger,r=e.stateTransformer,i=e.errorTransformer,o=e.predicate,a=e.logErrors,s=e.diffPredicate;if(void 0===n)return function(){return function(t){return function(e){return t(e)}}};if(t.getState&&t.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(t){return function(e){return t(e)}}};var u=[];return function(t){var n=t.getState;return function(t){return function(c){if("function"==typeof o&&!o(n,c))return t(c);var l={};u.push(l),l.started=O.now(),l.startedTime=new Date,l.prevState=r(n()),l.action=c;var f=void 0;if(a)try{f=t(c)}catch(t){l.error=i(t)}else f=t(c);l.took=O.now()-l.started,l.nextState=r(n());var h=e.diff&&"function"==typeof s?s(n,c):e.diff;if(g(u,Object.assign({},e,{diff:h})),u.length=0,l.error)throw l.error;return f}}}}var y,m,b=function(t,e){return function(t,e){return new Array(e+1).join(t)}("0",e-t.toString().length)+t},E=function(t){return b(t.getHours(),2)+":"+b(t.getMinutes(),2)+":"+b(t.getSeconds(),2)+"."+b(t.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},P=[];y="object"===(void 0===t?"undefined":T(t))&&t?t:"undefined"!=typeof window?window:{},(m=y.DeepDiff)&&P.push((function(){void 0!==m&&y.DeepDiff===f&&(y.DeepDiff=m,m=void 0)})),n(i,r),n(o,r),n(a,r),n(s,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:function(t,e,n){t&&e&&l(t,e,(function(r){n&&!n(t,e,r)||h(t,e,r)}))},enumerable:!0},applyChange:{value:h,enumerable:!0},revertChange:{value:function(t,e,n){if(t&&e&&n&&n.kind){var r,i,o=t;for(i=n.path.length-1,r=0;r<i;r++)void 0===o[n.path[r]]&&(o[n.path[r]]={}),o=o[n.path[r]];switch(n.kind){case"A":!function t(e,n,r){if(r.path&&r.path.length){var i,o=e[n],a=r.path.length-1;for(i=0;i<a;i++)o=o[r.path[i]];switch(r.kind){case"A":t(o[r.path[i]],r.index,r.item);break;case"D":case"E":o[r.path[i]]=r.lhs;break;case"N":delete o[r.path[i]]}}else switch(r.kind){case"A":t(e[n],r.index,r.item);break;case"D":case"E":e[n]=r.lhs;break;case"N":e=u(e,n)}return e}(o[n.path[r]],n.index,n.item);break;case"D":case"E":o[n.path[r]]=n.lhs;break;case"N":delete o[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==m},enumerable:!0},noConflict:{value:function(){return P&&(P.forEach((function(t){t()})),P=null),f},enumerable:!0}});var x={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},S={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(t){return t},actionTransformer:function(t){return t},errorTransformer:function(t){return t},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},A=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.dispatch,n=t.getState;return"function"==typeof e||"function"==typeof n?v()({dispatch:e,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=S,e.createLogger=v,e.logger=A,e.default=A,Object.defineProperty(e,"__esModule",{value:!0})}(e)}).call(this,n(18))},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(33)),a=i(n(34)),s=i(n(35)),u=i(n(36)),c=i(n(37)),l=i(n(38)),f=r(r(r(r(r(r({},o.default),a.default),s.default),u.default),c.default),l.default),h=r(r(r(r(r(r({},o.entitiesState),a.mapState),s.cameraState),u.logState),c.itemsState),l.uiState);e.default=function(t,e){return void 0===t&&(t=h),f[e.type]?f[e.type](t,e):t}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(6)),a=n(16);e.entitiesState={entities:{}};var s={UPDATE_ENTITY_POSITION:function(t,e){var n=e.payload,r=n.x,i=n.y,a=n.relative,s=n.id,u=t.entities[s];if(!u)return t;var c=a?u.x+r:r,l=a?u.y+i:i;return o.default(t,(function(t){var e=t.entities[s];e.x=c,e.y=l}))},UPDATE_ENTITIES:function(t,e){var n=e.payload.entities;return o.default(t,(function(t){t.entities=r(r({},t.entities),n.reduce((function(t,e){var n,i=e.id||a.ID();return r(r({},t),((n={})[i]=e,n))}),{}))}))}};e.default=s},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(6)),a=n(7);e.mapState={map:{},zones:{},lightingMap:{},explorationMap:{},visibilityMap:{}};var s=function(t,e){var n=e.payload.cell,r=n.x,i=n.y,s=a.cellKey(r,i);return o.default(t,(function(t){t.map[s]=n}))},u={UPDATE_CELL:s,UPDATE_CELLS:function(t,e){return e.payload.cells.reduce((function(t,e){return s(t,{type:"UPDATE_CELL",payload:{cell:e}})}),t)},UPDATE_ZONE:function(t,e){var n=e.payload,r=n.id,i=n.zone;return o.default(t,(function(t){t.zones[r]=i}))},UPDATE_ZONES:function(t,e){var n=e.payload.zones;return r(r({},t),{zones:n})},UPDATE_LIGHTING_MAP:function(t,e){var n=e.payload.lightingMap;return o.default(t,(function(t){t.lightingMap=n}))},UPDATE_EXPLORATION_MAP:function(t,e){var n=e.payload.explorationMap;return o.default(t,(function(t){for(var e=0,r=n;e<r.length;e++){var i=r[e];t.explorationMap[i]=1}}))},UPDATE_VISIBILITY_MAP:function(t,e){var n=e.payload.visibilityMap;return o.default(t,(function(t){t.visibilityMap=n}))}};e.default=u},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(6));e.cameraState={camera:{x:0,y:0}};var o={UPDATE_CAMERA_POSITION:function(t,e){var n=e.payload,r=n.x,o=n.y,a=n.relative,s=a?t.camera.x+r:r,u=a?t.camera.y+o:o;return i.default(t,(function(t){t.camera.x=s,t.camera.y=u}))}};e.default=o},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(6));e.logState={log:[]};var a={LOG_MESSAGE:function(t,e){return o.default(t,(function(t){var n=e.payload.message;if(t.log.length>0&&t.log[t.log.length-1].text===n){var i=t.log.pop();t.log.push(r(r({},i),{count:i.count+1}))}else t.log.push({text:n,count:1,fg:"#fff",bg:"#000"})}))}};e.default=a},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(6)),o=n(7);e.itemsState={items:{}};var a={CREATE_ITEM:function(t,e){var n=e.payload.item;return i.default(t,(function(t){t.items[n.id]=n}))},ADD_ITEM_TO_CELL:function(t,e){var n=e.payload,r=n.x,a=n.y,s=n.itemID,u=o.cellKey(r,a);return i.default(t,(function(t){t.map[u].contents.push(s)}))},ADD_ITEM_TO_ENTITY:function(t,e){var n=e.payload,r=n.entityID,o=n.itemID;return i.default(t,(function(t){t.entities[r].inventory.push(o)}))},REMOVE_ITEM_FROM_CELL:function(t,e){var n=e.payload,r=n.x,a=n.y,s=n.itemID,u=o.cellKey(r,a);return i.default(t,(function(t){t.map[u].contents=t.map[u].contents.filter((function(t){return t!==s}))}))},REMOVE_ITEM_FROM_ENTITY:function(t,e){var n=e.payload,r=n.itemID,o=n.entityID;return i.default(t,(function(t){t.entities[o].inventory=t.entities[o].inventory.filter((function(t){return t!==r}))}))}};e.default=a},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(6));e.uiState={activePanels:[]};var o={SHOW_PANEL:function(t,e){var n=e.payload.panel;return i.default(t,(function(t){t.activePanels=t.activePanels.filter((function(t){return t!==n})),t.activePanels.push(e.payload.panel)}))},CLOSE_PANEL:function(t,e){var n=e.payload.panel;return i.default(t,(function(t){t.activePanels=t.activePanels.filter((function(t){return t!==n}))}))},CLOSE_ALL_PANELS:function(t,e){return i.default(t,(function(t){t.activePanels=[]}))},CLOSE_TOP_PANEL:function(t,e){return i.default(t,(function(t){t.activePanels.pop()}))}};e.default=o},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(14),o=n(40),a=n(43),s=n(44),u=n(45);e.rootSaga=function(){return r(this,(function(t){switch(t.label){case 0:return[4,i.takeEvery("COMMAND_MOVE",o.movePlayer)];case 1:return t.sent(),[4,i.takeEvery("MOVE_ENTITY",o.moveEntity)];case 2:return t.sent(),[4,i.takeEvery("ENTITY_MOVED",o.entityMoved)];case 3:return t.sent(),[4,i.takeEvery("MOVEMENT_FAILED",o.movementFailed)];case 4:return t.sent(),[4,i.takeEvery("RANDOM_WALK",o.randomWalk)];case 5:return t.sent(),[4,i.takeEvery("CALCULATE_FOV",a.calculateFOV)];case 6:return t.sent(),[4,i.takeEvery("UPDATE_ENTITY_POSITION",a.calculateFOV)];case 7:return t.sent(),[4,i.takeEvery("UPDATE_CELLS",a.calculateFOV)];case 8:return t.sent(),[4,i.takeEvery("COMMAND_GET",s.pickUpTopmostItem)];case 9:return t.sent(),[4,i.takeEvery("PICK_UP_ITEM",s.pickUpItem)];case 10:return t.sent(),[4,i.takeEvery("DROP_ITEM",s.dropItem)];case 11:return t.sent(),[4,i.takeEvery("COMMAND_DROP",s.dropPlayerItem)];case 12:return t.sent(),[4,i.takeEvery("COMMAND_INVENTORY_UI",u.showInventoryPanel)];case 13:return t.sent(),[4,i.takeEvery("COMMAND_DROP_UI",u.showDropPanel)];case 14:return t.sent(),[4,i.takeEvery("COMMAND_CLOSE",u.closeAllUIPanels)];case 15:return t.sent(),[4,i.takeEvery("COMMAND_CLOSE_TOP",u.closeTopUIPanel)];case 16:return t.sent(),[2]}}))}},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(10)),a=n(14),s=n(8),u=n(24),c=n(9),l=n(7),f=n(42),h=n(24);e.moveEntity=function(t){var e,n,i,o,s,u,c,f,h,d,p,_,g,v,y,m;return r(this,(function(r){switch(r.label){case 0:return[4,a.select()];case 1:return e=r.sent(),n=t.payload,i=n.dx,o=n.dy,s=n.id,u=n.skipZones,f=(c=e).map,h=c.entities,d=h[s],p=d.x,_=d.y,g=l.cellKey(p,_),v=l.cellKey(p+i,_+o),y=f[g],m=f[v],[4,a.put({type:"ENTITY_MOVED",payload:{id:s,src:y,dest:m,skipZones:!!u}})];case 2:return r.sent(),[2]}}))},e.movePlayer=function(t){var e,n,i,o,s,u;return r(this,(function(r){switch(r.label){case 0:return e=t.payload,n=e.dx,i=e.dy,[4,a.select()];case 1:return o=r.sent(),s=o.entities,(u=Object.keys(s).find((function(t){return s[t].type===c.ENTITY_TYPES.PLAYER})))?[4,a.put({type:"MOVE_ENTITY",payload:{dx:n,dy:i,id:u}})]:[3,3];case 2:r.sent(),r.label=3;case 3:return[2]}}))};e.entityMoved=function(t){var e,n,i,o,l,d,p,_,g,v,y,m,b,E,O,T,w,P,x,S,A,I,L,M,C,R,k,j,N,D;return r(this,(function(r){switch(r.label){case 0:return[4,a.select()];case 1:e=r.sent(),i=(n=e).zones,o=n.entities,l=t.payload,d=l.id,p=l.src,_=l.dest,g=l.skipZones,v=_.x-p.x,y=_.y-p.y,m=o[d],b=h.isWithinZone(p.x,p.y),E=h.isWithinZone(_.x,_.y),O=f.isConditionTrue(o[d],p,_,v,y),T=!1,w=0,P=Object.values(g?[]:i),r.label=2;case 2:if(!(w<P.length))return[3,10];x=P[w],S=b(x),A=E(x),I=0,L=x.triggers,r.label=3;case 3:if(!(I<L.length))return[3,9];M=L[I],C=0,R=M.actions,r.label=4;case 4:return C<R.length?(k=R[C],j=k.conditions,function(t,e,n){return t===u.TRIGGER_TYPES.ENTER?!e&&n:t===u.TRIGGER_TYPES.EXIT?e&&!n:t===u.TRIGGER_TYPES.WITHIN&&(e&&n)}(M.type,S,A)?(N=!j||0===j.length,D=!N&&j.reduce((function(t,e){return t&&O(e)}),!0),N||D?(M.flags&&M.flags.includes("PREVENT_DEFAULT_MOVE")&&(T=!0),[4,a.put(k)]):[3,6]):[3,8]):[3,8];case 5:r.sent(),r.label=6;case 6:if(!N&&!D&&M.flags&&M.flags.includes("BREAK_ON_MISMATCH"))return[3,8];r.label=7;case 7:return C++,[3,4];case 8:return I++,[3,3];case 9:return w++,[3,2];case 10:return T?[3,16]:s.CELL_PROPERTIES[_.type].solid?[3,14]:m.type!==c.ENTITY_TYPES.PLAYER?[3,12]:[4,a.put({type:"UPDATE_CAMERA_POSITION",payload:{x:-v,y:-y,relative:!0}})];case 11:r.sent(),r.label=12;case 12:return[4,a.put({type:"UPDATE_ENTITY_POSITION",payload:{x:v,y:y,relative:!0,id:d}})];case 13:return r.sent(),[3,16];case 14:return[4,a.put({type:"MOVEMENT_FAILED",payload:{src:p,dest:_,id:d}})];case 15:r.sent(),r.label=16;case 16:return[2]}}))},e.movementFailed=function(t){var e,n,i;return r(this,(function(r){switch(r.label){case 0:return e=t.payload,n=e.id,e.src,e.dest,[4,a.select()];case 1:return i=r.sent(),i.entities[n].type!==c.ENTITY_TYPES.PLAYER?[3,3]:[4,a.put({type:"LOG_MESSAGE",payload:{message:"Alas! You cannot go that way."}})];case 2:r.sent(),r.label=3;case 3:return[2]}}))},e.randomWalk=function(){var t,e,n,i,u,f,h,d;return r(this,(function(r){switch(r.label){case 0:return[4,a.select()];case 1:return t=r.sent(),n=(e=t).entities,i=e.map,u=Object.keys(n).filter((function(t){return n[t].type===c.ENTITY_TYPES.PLAYER}))[0],f=0,0,0===(h=o.RNG.getItem([-1,0,0,1]))&&(f=o.RNG.getItem([-1,0,0,1])),d=i[l.cellKey(n[u].x+f,n[u].y+h)],s.CELL_PROPERTIES[d.type].solid?[3,3]:[4,a.put({type:"MOVE_ENTITY",payload:{dx:f,dy:h,id:u,skipZones:!0}})];case 2:r.sent(),r.label=3;case 3:return[2]}}))}},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var t=s(h);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function _(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||l||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r={eq:function(t,e){return t===e},neq:function(t,e){return t!==e},lt:function(t,e){return t<e},gt:function(t,e){return t>e},lte:function(t,e){return t<=e},gte:function(t,e){return t>=e}};e.isConditionTrue=function(t,e,n,i,o){return function(a){var s,u,c,l,f,h,d,p={entity:t,src:e,dest:n,dx:i,dy:o},_=a[0],g=a[1];2===g.length?(f=g[0],h=g[1],c=(s=[p[_],h])[0],l=s[1]):(d=g[0],f=g[1],h=g[2],c=(u=[p[_][d],h])[0],l=u[1]);var v=r[f];return!(!v||!v(c,l))}}},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o,a,s=i(n(10)),u=n(14),c=n(8),l=n(9),f=n(7);function h(){var t,e,n,i,h,d,p,_;return r(this,(function(r){switch(r.label){case 0:return[4,u.select()];case 1:return t=r.sent(),n=(e=t).map,i=e.entities,(h=Object.values(i).filter((function(t){return t.type===l.ENTITY_TYPES.PLAYER}))[0])?(d=function(t,e){var r=f.cellKey(t,e),i=n[r];return i&&!c.CELL_PROPERTIES[i.type].solid},p=function(t,e){var r=f.cellKey(t,e),i=n[r];return c.CELL_PROPERTIES[i.type].solid?0:.1},o||(o=new s.FOV.RecursiveShadowcasting(d,{topology:4})),a||(a=new s.Lighting(p,{range:8,passes:2})),a.clearLights(),a.setFOV(o),a.setLight(h.x,h.y,[240,240,200]),_={},a.compute((function(t,e,n){_[f.cellKey(t,e)]=n})),[4,u.put({type:"UPDATE_LIGHTING_MAP",payload:{lightingMap:_}})]):[2];case 2:return r.sent(),[2]}}))}e.calculateLighting=h,e.calculateFOV=function(t){var e,n,i,a,d,p,_,g;return r(this,(function(t){switch(t.label){case 0:return[4,u.select()];case 1:return e=t.sent(),i=(n=e).map,a=n.entities,(d=Object.values(a).filter((function(t){return t.type===l.ENTITY_TYPES.PLAYER}))[0])?(p=function(t,e){var n=f.cellKey(t,e),r=i[n];return r&&!c.CELL_PROPERTIES[r.type].solid},o||(o=new s.FOV.RecursiveShadowcasting(p,{topology:4})),_={},g=[],o.compute(d.x,d.y,12,(function(t,e,n,r){_[f.cellKey(t,e)]=[r,void 0],g.push(f.cellKey(t,e))})),[4,u.put({type:"UPDATE_VISIBILITY_MAP",payload:{visibilityMap:_}})]):[2];case 2:return t.sent(),[4,u.put({type:"UPDATE_EXPLORATION_MAP",payload:{explorationMap:g}})];case 3:return t.sent(),[4,h()];case 4:return t.sent(),[2]}}))}},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(14),o=n(7),a=n(9);function s(t){var e,n,a,s,u,c,l,f,h,d,p,_;return r(this,(function(r){switch(r.label){case 0:return e=t.payload,n=e.x,a=e.y,s=e.itemID,u=e.entityID,[4,i.select()];case 1:return c=r.sent(),f=(l=c).entities,h=l.map,d=o.cellKey(n,a),(p=h[d])?(_=f[u])?p.contents.includes(s)&&_.x===n&&_.y===a?[4,i.put({type:"REMOVE_ITEM_FROM_CELL",payload:{x:n,y:a,itemID:s}})]:[3,4]:[2]:[2];case 2:return r.sent(),[4,i.put({type:"ADD_ITEM_TO_ENTITY",payload:{itemID:s,entityID:u}})];case 3:r.sent(),r.label=4;case 4:return[2]}}))}function u(t){var e,n,a,s,u,c,l,f,h,d,p,_,g;return r(this,(function(r){switch(r.label){case 0:return e=t.payload,n=e.entityID,a=e.itemID,[4,i.select()];case 1:return s=r.sent(),c=(u=s).entities,l=u.map,f=u.items,(h=c[n])?(d=h.x,p=h.y,_=o.cellKey(d,p),l[_]?h.inventory.includes(a)?(g=f[a].name,[4,i.put({type:"ADD_ITEM_TO_CELL",payload:{x:d,y:p,itemID:a}})]):[3,5]:[2]):[2];case 2:return r.sent(),[4,i.put({type:"REMOVE_ITEM_FROM_ENTITY",payload:{itemID:a,entityID:n}})];case 3:return r.sent(),[4,i.put({type:"LOG_MESSAGE",payload:{message:"You drop "+g+"."}})];case 4:r.sent(),r.label=5;case 5:return[2]}}))}e.pickUpItem=s,e.pickUpTopmostItem=function(t){var e,n,u,c,l,f,h,d,p,_,g,v,y,m;return r(this,(function(t){switch(t.label){case 0:return[4,i.select()];case 1:return e=t.sent(),u=(n=e).entities,c=n.map,l=n.items,f=Object.keys(u).filter((function(t){return u[t].type===a.ENTITY_TYPES.PLAYER}))[0],h=u[f],d=h.x,p=h.y,_=o.cellKey(d,p),(g=c[_])?(v=u[f])?(y=g.contents&&g.contents.length>0?g.contents[g.contents.length-1]:void 0)?[3,3]:[4,i.put({type:"LOG_MESSAGE",payload:{message:"There is nothing to pick up here."}})]:[2]:[2];case 2:return t.sent(),[2];case 3:return y&&g.contents.includes(y)&&v.x===d&&v.y===p?[4,s({type:"PICK_UP_ITEM",payload:{x:d,y:p,itemID:y,entityID:f}})]:[3,6];case 4:return t.sent(),m=l[y].name,[4,i.put({type:"LOG_MESSAGE",payload:{message:"You pick up "+m+"."}})];case 5:t.sent(),t.label=6;case 6:return[2]}}))},e.dropItem=u,e.dropPlayerItem=function(t){var e,n,s,c,l,f,h,d,p,_,g;return r(this,(function(r){switch(r.label){case 0:return e=t.payload.idx,[4,i.select()];case 1:return n=r.sent(),c=(s=n).entities,l=s.map,f=Object.keys(c).filter((function(t){return c[t].type===a.ENTITY_TYPES.PLAYER}))[0],h=c[f],d=h.x,p=h.y,f?(_=o.cellKey(d,p),l[_]?0===c[f].inventory.length?[2]:(g=c[f].inventory[e])?[4,u({type:"DROP_ITEM",payload:{entityID:f,itemID:g}})]:[2]:[2]):[2];case 2:return r.sent(),[4,i.put({type:"CLOSE_UI",payload:{}})];case 3:return r.sent(),[2]}}))}},function(t,e,n){"use strict";var r=this&&this.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(14),a=i(n(26));e.showInventoryPanel=function(){return r(this,(function(t){switch(t.label){case 0:return[4,o.put({type:"SHOW_PANEL",payload:{panel:"inventory"}})];case 1:return t.sent(),[2]}}))},e.showDropPanel=function(){return r(this,(function(t){switch(t.label){case 0:return[4,o.put({type:"SHOW_PANEL",payload:{panel:"inventory:drop"}})];case 1:return t.sent(),[2]}}))},e.closeTopUIPanel=function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,o.put({type:"CLOSE_TOP_PANEL",payload:{}})];case 1:return e.sent(),[4,o.select((function(t){return t.activePanels}))];case 2:return t=e.sent(),a.default.setScope(t.length>0?t[t.length-1]:"default"),[2]}}))},e.closeAllUIPanels=function(){return r(this,(function(t){switch(t.label){case 0:return[4,o.put({type:"CLOSE_ALL_PANELS",payload:{}})];case 1:return t.sent(),a.default.setScope("default"),[2]}}))}},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(48)),o=r(n(26)),a=n(15),s=function(t){return i.default((function(){var e={N:[0,-1],E:[1,0],S:[0,1],W:[-1,0]}[t],n=e[0],r=e[1];a.action("COMMAND_MOVE",{dx:n,dy:r})}),16)},u=function(){a.action("COMMAND_GET",{})},c=function(){a.action("COMMAND_DROP_UI",{}),o.default.setScope("inventory:drop")},l=function(){a.action("COMMAND_CLOSE",{}),o.default.setScope("default")},f=function(){a.action("COMMAND_INVENTORY_UI",{}),o.default.setScope("inventory")},h=function(){a.action("COMMAND_CLOSE_TOP",{})};e.setupKeys=function(){o.default("default","h",s("W")),o.default("default","j",s("S")),o.default("default","k",s("N")),o.default("default","l",s("E")),o.default("default","left",s("W")),o.default("default","down",s("S")),o.default("default","up",s("N")),o.default("default","right",s("E")),o.default("default","a",s("W")),o.default("default","s",s("S")),o.default("default","w",s("N")),o.default("default","d",s("E")),o.default("default","g",u),o.default("inventory","d",c),["a","s","d","f","g","h","j","k","l"].forEach((function(t,e){return o.default("inventory:drop",t,function(t){return function(){a.action("COMMAND_DROP",{idx:t})}}(e))})),o.default("esc",l),o.default("default","i",f),o.default("backspace",h),o.default.setScope("default")}},function(t,e,n){var r=n(49),i=n(19);t.exports=function(t,e,n){var o=!0,a=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return i(n)&&(o="leading"in n?!!n.leading:o,a="trailing"in n?!!n.trailing:a),r(t,e,{leading:o,maxWait:e,trailing:a})}},function(t,e,n){var r=n(19),i=n(50),o=n(52),a=Math.max,s=Math.min;t.exports=function(t,e,n){var u,c,l,f,h,d,p=0,_=!1,g=!1,v=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function y(e){var n=u,r=c;return u=c=void 0,p=e,f=t.apply(r,n)}function m(t){return p=t,h=setTimeout(E,e),_?y(t):f}function b(t){var n=t-d;return void 0===d||n>=e||n<0||g&&t-p>=l}function E(){var t=i();if(b(t))return O(t);h=setTimeout(E,function(t){var n=e-(t-d);return g?s(n,l-(t-p)):n}(t))}function O(t){return h=void 0,v&&u?y(t):(u=c=void 0,f)}function T(){var t=i(),n=b(t);if(u=arguments,c=this,d=t,n){if(void 0===h)return m(d);if(g)return clearTimeout(h),h=setTimeout(E,e),y(d)}return void 0===h&&(h=setTimeout(E,e)),f}return e=o(e)||0,r(n)&&(_=!!n.leading,l=(g="maxWait"in n)?a(o(n.maxWait)||0,e):l,v="trailing"in n?!!n.trailing:v),T.cancel=function(){void 0!==h&&clearTimeout(h),p=0,u=d=c=h=void 0},T.flush=function(){return void 0===h?f:O(i())},T}},function(t,e,n){var r=n(27);t.exports=function(){return r.Date.now()}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(18))},function(t,e,n){var r=n(19),i=n(53),o=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,u=/^0o[0-7]+$/i,c=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return NaN;if(r(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=r(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(o,"");var n=s.test(t);return n||u.test(t)?c(t.slice(2),n?2:8):a.test(t)?NaN:+t}},function(t,e,n){var r=n(54),i=n(57);t.exports=function(t){return"symbol"==typeof t||i(t)&&"[object Symbol]"==r(t)}},function(t,e,n){var r=n(28),i=n(55),o=n(56),a=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":a&&a in Object(t)?i(t):o(t)}},function(t,e,n){var r=n(28),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,s=r?r.toStringTag:void 0;t.exports=function(t){var e=o.call(t,s),n=t[s];try{t[s]=void 0;var r=!0}catch(t){}var i=a.call(t);return r&&(e?t[s]=n:delete t[s]),i}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(module,exports,__webpack_require__){"use strict";var __spreadArrays=this&&this.__spreadArrays||function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r},__importStar=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(exports,"__esModule",{value:!0});var ROT=__importStar(__webpack_require__(10)),cells_1=__webpack_require__(8),index_1=__webpack_require__(23),entities_1=__webpack_require__(9),glyphs_1=__webpack_require__(13),zones_1=__webpack_require__(25),map_1=__webpack_require__(7);exports.setupDisplay=function(t){var e=new ROT.Display({width:t.width,height:t.height,fontFamily:"IBMVGA8",fontSize:16,spacing:1});return document.querySelector(".main").appendChild(e.getContainer()),e};var mapNoise=new ROT.Noise.Simplex(4);exports.drawMap=function(_a){var game=_a.game,display=_a.display,state=game.getState(),_b=state,items=_b.items,explorationMap=_b.explorationMap,visibilityMap=_b.visibilityMap,lightingMap=_b.lightingMap,map=_b.map,camera=_b.camera,omniscience=eval("window.omniscience === true"),ambientLight=[80,80,80];Object.values(map).forEach((function(t){var e=t.x,n=t.y,r=t.type,i=t.contents,o=map_1.cellKey(e,n),a=i.length>0,s=items[i[0]],u=s?glyphs_1.GLYPHS[s.glyph]:void 0,c=glyphs_1.GLYPHS[cells_1.CELL_PROPERTIES[r].glyph],l=a?u:c,f=l.glyph,h=l.fg,d=l.bg,p=ROT.Color.fromString(h),_=p[0],g=p[1],v=p[2],y=240*mapNoise.get(e/20,n/20),m=~~Math.max(1,y),b=a?[_,g,v]:[255-m/255*_,255-m/255*g,255-m/255*v],E=o in lightingMap?ROT.Color.add(ambientLight,lightingMap[o]):ambientLight,O=ROT.Color.multiply(b,E);o in visibilityMap||omniscience?display.draw(e+camera.x,n+camera.y,f,ROT.Color.toHex(O),d):o in explorationMap&&display.draw(e+camera.x,n+camera.y,c.glyph,"#222",d)}))},exports.drawZones=function(t){var e=t.game,n=t.display,r=e.getState(),i=r.zones,o=r.camera,a=r.visibilityMap,s=r.explorationMap;Object.values(i).filter((function(t){return t.glyph})).forEach((function(t){zones_1.getZoneCells(t).forEach((function(e){var r=e[0],i=e[1],u=map_1.cellKey(r,i),c=glyphs_1.GLYPHS[t.glyph],l=c.glyph,f=c.fg,h=c.bg;u in a?n.draw(r+o.x,i+o.y,l,f,h):u in s&&n.draw(r+o.x,i+o.y,l,"#010101","#000")}))}))},exports.drawEntities=function(t){var e=t.game,n=t.display,r=e.getState(),i=r.entities,o=r.camera,a=r.visibilityMap;Object.values(i).forEach((function(t){t.type;var e=t.x,r=t.y,i=map_1.cellKey(e,r);if(t.type!==entities_1.ENTITY_TYPES.PLAYER&&i in a){var s=glyphs_1.GLYPHS[t.glyph],u=s.glyph,c=s.fg,l=s.bg;n.draw(e+o.x,r+o.y,u,c,l)}})),Object.values(i).forEach((function(t){t.type;var e=t.x,r=t.y;if(t.type===entities_1.ENTITY_TYPES.PLAYER){var i=glyphs_1.GLYPHS[t.glyph],a=i.glyph,s=i.fg,u=i.bg;n.draw(e+o.x,r+o.y,a,s,u)}}))};var drawLog=function(t){for(var e=t.game,n=t.display,r=e.getState().log,i=0;i<index_1.WIDTH;i++){n.draw(i,index_1.HEIGHT-index_1.BOTTOM_PANEL_HEIGHT,"—","#222","#000a");for(var o=index_1.HEIGHT-index_1.BOTTOM_PANEL_HEIGHT+1;o<index_1.HEIGHT;o++)n.draw(i,o," ","#fff","#000")}for(o=index_1.BOTTOM_PANEL_HEIGHT-1;o>=0;o--){var a=r[r.length-o-1]||{},s=a.text,u=a.count;a.fg,a.bg;if(s){var c=u>1?" ("+u+"x)":"";n.drawText(1,index_1.HEIGHT-index_1.BOTTOM_PANEL_HEIGHT+o+1,""+s+c)}}},fillRect=function(t){for(var e=t.display,n=t.x,r=t.y,i=t.w,o=t.h,a=t.glyph,s=t.fg,u=t.bg,c=n;c<n+i;c++)for(var l=r;l<r+o;l++)e.draw(c,l,a,s,u)},drawPanel=function(t){var e=t.display,n=t.hPadding,r=t.vPadding,i=t.heading,o=void 0===i?void 0:i,a=t.contents,s=void 0===a?[]:a,u=(t.align,t.fill),c=void 0!==u&&u,l={topLeft:[n,r],topRight:[index_1.WIDTH-n-1,r],bottomLeft:[n,index_1.HEIGHT-index_1.BOTTOM_PANEL_HEIGHT-r],bottomRight:[index_1.WIDTH-n-1,index_1.HEIGHT-index_1.BOTTOM_PANEL_HEIGHT-r]},f={top:[[l.topLeft[0]+1,l.topLeft[1]],[l.topRight[0],l.topRight[1]]],right:[[l.topRight[0],l.topRight[1]+1],[l.bottomRight[0],l.bottomRight[1]]],bottom:[[l.bottomLeft[0]+1,l.bottomLeft[1]],[l.bottomRight[0],l.bottomRight[1]]],left:[[l.topLeft[0],l.topLeft[1]+1],[l.bottomLeft[0],l.bottomLeft[1]]]};e.draw.apply(e,__spreadArrays([l.topLeft[0],l.topLeft[1]],Object.values(glyphs_1.GLYPHS.UI_CORNER_TOP_LEFT))),e.draw.apply(e,__spreadArrays([l.topRight[0],l.topRight[1]],Object.values(glyphs_1.GLYPHS.UI_CORNER_TOP_RIGHT))),e.draw.apply(e,__spreadArrays([l.bottomLeft[0],l.bottomLeft[1]],Object.values(glyphs_1.GLYPHS.UI_CORNER_BOTTOM_LEFT))),e.draw.apply(e,__spreadArrays([l.bottomRight[0],l.bottomRight[1]],Object.values(glyphs_1.GLYPHS.UI_CORNER_BOTTOM_RIGHT)));for(var h=f.top[0][0],d=f.top[0][1];h<f.top[1][0];h++)e.draw.apply(e,__spreadArrays([h,d],Object.values(glyphs_1.GLYPHS.UI_LINE_HORIZONTAL)));for(h=f.bottom[0][0],d=f.bottom[0][1];h<f.bottom[1][0];h++)e.draw.apply(e,__spreadArrays([h,d],Object.values(glyphs_1.GLYPHS.UI_LINE_HORIZONTAL)));for(h=f.left[0][0],d=f.left[0][1];d<f.left[1][1];d++)e.draw.apply(e,__spreadArrays([h,d],Object.values(glyphs_1.GLYPHS.UI_LINE_VERTICAL)));for(h=f.right[0][0],d=f.right[0][1];d<f.right[1][1];d++)e.draw.apply(e,__spreadArrays([h,d],Object.values(glyphs_1.GLYPHS.UI_LINE_VERTICAL)));if(c){var p=glyphs_1.GLYPHS.UI_BACKGROUND,_=p.glyph,g=p.fg,v=p.bg;fillRect({display:e,x:n+1,y:r+1,w:index_1.WIDTH-2*(n+1),h:index_1.HEIGHT-index_1.BOTTOM_PANEL_HEIGHT-2*(r+1)+1,glyph:_,fg:g,bg:v})}if(o){var y=(index_1.WIDTH-2*(n+1)-o.length)/2;e.drawText(n+1+y,r+1,o)}if(s.length>0)for(var m=[n+2,r+3],b=m[0],E=m[1],O=0;O<s.length;O++)e.drawText(b,E+O,s[O])},drawInventoryPanel=function(t){var e=t.game,n=t.display,r=e.getState(),i=r.items,o=r.entities,a=Object.values(o).filter((function(t){return t.type===entities_1.ENTITY_TYPES.PLAYER}))[0].inventory.map((function(t){return i[t].name}));drawPanel({display:n,hPadding:20,vPadding:3,fill:!0,heading:"Inventory",contents:a,align:"left"})},drawInventoryDropPanel=function(t){var e=t.game,n=t.display,r=e.getState(),i=r.items,o=r.entities,a=Object.values(o).filter((function(t){return t.type===entities_1.ENTITY_TYPES.PLAYER}))[0],s="asdfghjkl".split(""),u=a.inventory.map((function(t,e){return s[e]+") "+i[t].name}));drawPanel({display:n,hPadding:20,vPadding:3,fill:!0,heading:"Drop item",contents:u,align:"left"})},drawUIPanels=function(t){var e=t.game,n=t.display,r=e.getState().activePanels;if(0!==r.length){var i=r[r.length-1];"inventory"===i?drawInventoryPanel({game:e,display:n}):"inventory:drop"===i&&drawInventoryDropPanel({game:e,display:n})}};exports.drawUI=function(t){var e=t.game,n=t.display;drawUIPanels({game:e,display:n}),drawLog({game:e,display:n})},exports.draw=function(t){var e=t.game,n=t.display;n.clear(),exports.drawMap({game:e,display:n}),exports.drawZones({game:e,display:n}),exports.drawEntities({game:e,display:n}),exports.drawUI({game:e,display:n})}},function(t,e,n){"use strict";var r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(10)),o=n(15),a=n(16),s=n(8),u=n(9),c=n(13);e.setupMap=function(t){t.playerID;var e=[];(function(t){return function(e,n,r,i,o){void 0===o&&(o=s.CELL_TYPES.FLOOR);for(var a=n;a<=n+i;a++)for(var u=e;u<=e+r;u++)t.push({x:u,y:a,type:o,contents:[]})}})(e)(0,0,63,31,s.CELL_TYPES.WALL);var n=new i.Map.Cellular(64,32);n.randomize(.5);for(var r=0;r<=5;r++)n.create();n.create((function(t,n,r){e.push({x:t,y:n,type:r?s.CELL_TYPES.FLOOR:s.CELL_TYPES.WALL,contents:[]})})),n.connect((function(t,n,r){e.push({x:t,y:n,type:r?s.CELL_TYPES.FLOOR:s.CELL_TYPES.WALL,contents:[]})}),1);for(var a=-1;a<=64;a++)e.push({x:a,y:-1,type:s.CELL_TYPES.WALL,contents:[]}),e.push({x:a,y:32,type:s.CELL_TYPES.WALL,contents:[]});for(var u=-1;u<32;u++)e.push({x:-1,y:u,type:s.CELL_TYPES.WALL,contents:[]}),e.push({x:64,y:u,type:s.CELL_TYPES.WALL,contents:[]});o.action("UPDATE_CELLS",{cells:e})},e.createRandomWalkZone=function(t){return{cells:[[t.x,t.y,t.width,t.height]],triggers:[{type:"WITHIN",flags:["PREVENT_DEFAULT_MOVE"],actions:[{type:"RANDOM_WALK",payload:{},conditions:[["entity",["type","eq",u.ENTITY_TYPES.PLAYER]]]},{type:"LOG_MESSAGE",payload:{message:"The tall grass confuses you."},conditions:[["entity",["type","eq",u.ENTITY_TYPES.PLAYER]]]}]}],glyph:c.GLYPH_TYPES.FOLIAGE}},e.createPortal=function(t){var e=t.playerID;return function(t){var n=t.src,r=t.dest,i=t.direction,o=t.glyph,a=void 0===o?c.GLYPH_TYPES.PORTAL:o,s=r.x-n.x,l=r.y-r.y,f=[0,0],h=f[0],d=f[1];return"east"===i?h=1:"west"===i?h=-1:"north"===i?d=-1:"south"===i&&(d=1),{cells:[[n.x,n.y]],triggers:[{type:"ENTER",actions:[{type:"LOG_MESSAGE",payload:{message:"You see something strange to the "+i+"."}}]},{type:"EXIT",flags:["PREVENT_DEFAULT_MOVE"],actions:[{type:"MOVE_ENTITY",payload:{dx:s,dy:l,id:e},conditions:[["entity",["type","eq",u.ENTITY_TYPES.PLAYER]],["dx",["eq",h]],["dy",["eq",d]]]}]},{type:"EXIT",flags:["PREVENT_DEFAULT_MOVE"],actions:[{type:"LOG_MESSAGE",payload:{message:"You step through the portal."},conditions:[["entity",["type","eq",u.ENTITY_TYPES.PLAYER]],["dx",["eq",h]],["dy",["eq",d]]]}]}],glyph:a}}},e.setupZones=function(t){var n,r=t.playerID,i=a.ID(),s=a.ID(),u=a.ID(),c=((n={})[i]=e.createRandomWalkZone({x:1,y:1,width:15,height:3}),n[s]=e.createPortal({playerID:r})({src:{x:39,y:11},dest:{x:46,y:11},direction:"west"}),n[u]=e.createPortal({playerID:r})({src:{x:46,y:11},dest:{x:39,y:11},direction:"east"}),n);o.action("UPDATE_ZONES",{zones:c})}},function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});var o=i(n(10)),a=n(13),s=n(8),u=n(16);e.setupItems=function(t){var e=t.game,n={glyph:a.GLYPH_TYPES.KEY,id:u.ID(),name:"a key"};e.dispatch({type:"CREATE_ITEM",payload:{item:n}});var i=o.RNG.getItem(Object.values(e.getState().map).filter((function(t){return t.type===s.CELL_TYPES.FLOOR})));e.dispatch({type:"UPDATE_CELL",payload:{cell:r(r({},i),{contents:i.contents.concat(n.id)})}})}},function(t,e,n){"use strict";n.r(e);n.p,n.p,n.p,n.p},function(t,e,n){"use strict";n.r(e),n.d(e,"CANCEL",(function(){return r.a})),n.d(e,"SAGA_LOCATION",(function(){return r.g})),n.d(e,"buffers",(function(){return a.i})),n.d(e,"detach",(function(){return a.j})),n.d(e,"END",(function(){return w})),n.d(e,"channel",(function(){return x})),n.d(e,"eventChannel",(function(){return S})),n.d(e,"isEnd",(function(){return P})),n.d(e,"multicastChannel",(function(){return A})),n.d(e,"runSaga",(function(){return G})),n.d(e,"stdChannel",(function(){return I}));var r=n(3),i=n(11);var o=n(2),a=n(0),s=n(20);function u(){var t={};return t.promise=new Promise((function(e,n){t.resolve=e,t.reject=n})),t}var c=u,l=(n(17),[]),f=0;function h(t){try{_(),t()}finally{g()}}function d(t){l.push(t),f||(_(),v())}function p(t){try{return _(),t()}finally{v()}}function _(){f++}function g(){f--}function v(){var t;for(g();!f&&void 0!==(t=l.shift());)h(t)}var y=function(t){return function(e){return t.some((function(t){return T(t)(e)}))}},m=function(t){return function(e){return t(e)}},b=function(t){return function(e){return e.type===String(t)}},E=function(t){return function(e){return e.type===t}},O=function(){return a.U};function T(t){var e="*"===t?O:Object(o.k)(t)?b:Object(o.a)(t)?y:Object(o.l)(t)?b:Object(o.d)(t)?m:Object(o.m)(t)?E:null;if(null===e)throw new Error("invalid pattern: "+t);return e(t)}var w={type:r.b},P=function(t){return t&&t.type===r.b};function x(t){void 0===t&&(t=Object(a.O)());var e=!1,n=[];return{take:function(r){e&&t.isEmpty()?r(w):t.isEmpty()?(n.push(r),r.cancel=function(){Object(a.bb)(n,r)}):r(t.take())},put:function(r){if(!e){if(0===n.length)return t.put(r);n.shift()(r)}},flush:function(n){e&&t.isEmpty()?n(w):n(t.flush())},close:function(){if(!e){e=!0;var t=n;n=[];for(var r=0,i=t.length;r<i;r++){(0,t[r])(w)}}}}}function S(t,e){void 0===e&&(e=Object(a.X)());var n,r=!1,i=x(e),s=function(){r||(r=!0,Object(o.d)(n)&&n(),i.close())};return n=t((function(t){P(t)?s():i.put(t)})),n=Object(a.Y)(n),r&&n(),{take:i.take,flush:i.flush,close:s}}function A(){var t,e=!1,n=[],i=n;var o=function(){i===n&&(i=n.slice())},s=function(){e=!0;var t=n=i;i=[],t.forEach((function(t){t(w)}))};return(t={})[r.e]=!0,t.put=function(t){if(!e)if(P(t))s();else for(var o=n=i,a=0,u=o.length;a<u;a++){var c=o[a];c[r.d](t)&&(c.cancel(),c(t))}},t.take=function(t,n){void 0===n&&(n=O),e?t(w):(t[r.d]=n,o(),i.push(t),t.cancel=Object(a.Y)((function(){o(),Object(a.bb)(i,t)})))},t.close=s,t}function I(){var t=A(),e=t.put;return t.put=function(t){t[r.f]?e(t):d((function(){e(t)}))},t}function L(t,e){var n=t[r.a];Object(o.d)(n)&&(e.cancel=n),t.then(e,(function(t){e(t,!0)}))}var M,C=0,R=function(){return++C};function k(t){t.isRunning()&&t.cancel()}var j=((M={})[a.u]=function(t,e,n){var i=e.channel,a=void 0===i?t.channel:i,s=e.pattern,u=e.maybe,c=function(t){t instanceof Error?n(t,!0):!P(t)||u?n(t):n(r.k)};try{a.take(c,Object(o.g)(s)?T(s):null)}catch(t){return void n(t,!0)}n.cancel=c.cancel},M[a.q]=function(t,e,n){var r=e.channel,i=e.action,a=e.resolve;d((function(){var e;try{e=(r?r.put:t.dispatch)(i)}catch(t){return void n(t,!0)}a&&Object(o.j)(e)?L(e,n):n(e)}))},M[a.b]=function(t,e,n,r){var i=r.digestEffect,s=C,u=Object.keys(e);if(0!==u.length){var c=Object(a.V)(e,n);u.forEach((function(t){i(e[t],s,c[t],t)}))}else n(Object(o.a)(e)?[]:{})},M[a.s]=function(t,e,n,r){var i=r.digestEffect,s=C,u=Object.keys(e),c=Object(o.a)(e)?Object(a.W)(u.length):{},l={},f=!1;u.forEach((function(t){var e=function(e,r){f||(r||Object(a.cb)(e)?(n.cancel(),n(e,r)):(n.cancel(),f=!0,c[t]=e,n(c)))};e.cancel=a.db,l[t]=e})),n.cancel=function(){f||(f=!0,u.forEach((function(t){return l[t].cancel()})))},u.forEach((function(t){f||i(e[t],s,l[t],t)}))},M[a.d]=function(t,e,n,r){var i=e.context,s=e.fn,u=e.args,c=r.task;try{var l=s.apply(i,u);if(Object(o.j)(l))return void L(l,n);if(Object(o.e)(l))return void F(t,l,c.context,C,Object(a.T)(s),!1,n);n(l)}catch(t){n(t,!0)}},M[a.C]=function(t,e,n){var r=e.context,i=e.fn,a=e.args;try{var s=function(t,e){Object(o.n)(t)?n(e):n(t,!0)};i.apply(r,a.concat(s)),s.cancel&&(n.cancel=s.cancel)}catch(t){n(t,!0)}},M[a.g]=function(t,e,n,r){var i=e.context,s=e.fn,u=e.args,c=e.detached,l=r.task,f=function(t){var e=t.context,n=t.fn,r=t.args;try{var i=n.apply(e,r);if(Object(o.e)(i))return i;var s=!1;return Object(a.ab)((function(t){return s?{value:t,done:!0}:(s=!0,{value:i,done:!Object(o.j)(i)})}))}catch(t){return Object(a.ab)((function(){throw t}))}}({context:i,fn:s,args:u}),h=function(t,e){return t.isSagaIterator?{name:t.meta.name}:Object(a.T)(e)}(f,s);p((function(){var e=F(t,f,l.context,C,h,c,void 0);c?n(e):e.isRunning()?(l.queue.addTask(e),n(e)):e.isAborted()?l.queue.abort(e.error()):n(e)}))},M[a.k]=function(t,e,n,r){var i=r.task,s=function(t,e){if(t.isRunning()){var n={task:i,cb:e};e.cancel=function(){t.isRunning()&&Object(a.bb)(t.joiners,n)},t.joiners.push(n)}else t.isAborted()?e(t.error(),!0):e(t.result())};if(Object(o.a)(e)){if(0===e.length)return void n([]);var u=Object(a.V)(e,n);e.forEach((function(t,e){s(t,u[e])}))}else s(e,n)},M[a.L]=function(t,e,n,i){var a=i.task;e===r.h?k(a):Object(o.a)(e)?e.forEach(k):k(e),n()},M[a.t]=function(t,e,n){var r=e.selector,i=e.args;try{n(r.apply(void 0,[t.getState()].concat(i)))}catch(t){n(t,!0)}},M[a.N]=function(t,e,n){var r=e.pattern,i=x(e.buffer),o=T(r),a=function e(n){P(n)||t.channel.take(e,o),i.put(n)},s=i.close;i.close=function(){a.cancel(),s()},t.channel.take(a,o),n(i)},M[a.P]=function(t,e,n,r){n(r.task.isCancelled())},M[a.Q]=function(t,e,n){e.flush(n)},M[a.h]=function(t,e,n,r){n(r.task.context[e])},M[a.R]=function(t,e,n,r){var i=r.task;Object(a.Z)(i.context,e),n()},M);function N(t,e){return t+"?"+e}function D(t){var e=t.name,n=t.location;return n?e+"  "+N(n.fileName,n.lineNumber):e}var K=null,V=[],Y=function(){K=null,V.length=0},U=function(){var t,e,n,r,i=V[0],o=V.slice(1),s=i.crashedEffect?(t=i.crashedEffect,(e=Object(a.fb)(t))?e.code+"  "+N(e.fileName,e.lineNumber):""):null;return["The above error occurred in task "+D(i.meta)+(s?" \n when executing effect "+s:"")].concat(o.map((function(t){return"    created by "+D(t.meta)})),[(n=V,r=Object(a.eb)((function(t){return t.cancelledTasks}),n),r.length?["Tasks cancelled due to error:"].concat(r).join("\n"):"")]).join("\n")};function H(t,e,n,i,o,s,u){var l;void 0===u&&(u=a.db);var f,h,d=0,p=null,_=[],g=Object.create(n),v=function(t,e,n){var r,i=[],o=!1;function s(t){e(),c(),n(t,!0)}function u(e){i.push(e),e.cont=function(u,c){o||(Object(a.bb)(i,e),e.cont=a.db,c?s(u):(e===t&&(r=u),i.length||(o=!0,n(r))))}}function c(){o||(o=!0,i.forEach((function(t){t.cont=a.db,t.cancel()})),i=[])}return u(t),{addTask:u,cancelAll:c,abort:s,getTasks:function(){return i}}}(e,(function(){_.push.apply(_,v.getTasks().map((function(t){return t.meta.name})))}),y);function y(e,n){if(n){if(d=2,(a={meta:o,cancelledTasks:_}).crashedEffect=K,V.push(a),m.isRoot){var i=U();Y(),t.onError(e,{sagaStack:i})}h=e,p&&p.reject(e)}else e===r.j?d=1:1!==d&&(d=3),f=e,p&&p.resolve(e);var a;m.cont(e,n),m.joiners.forEach((function(t){t.cb(e,n)})),m.joiners=null}var m=((l={})[r.i]=!0,l.id=i,l.meta=o,l.isRoot=s,l.context=g,l.joiners=[],l.queue=v,l.cancel=function(){0===d&&(d=1,v.cancelAll(),y(r.j,!1))},l.cont=u,l.end=y,l.setContext=function(t){Object(a.Z)(g,t)},l.toPromise=function(){return p||(p=c(),2===d?p.reject(h):0!==d&&p.resolve(f)),p.promise},l.isRunning=function(){return 0===d},l.isCancelled=function(){return 1===d||0===d&&1===e.status},l.isAborted=function(){return 2===d},l.result=function(){return f},l.error=function(){return h},l);return m}function F(t,e,n,i,s,u,c){var l=t.finalizeRunEffect((function(e,n,i){if(Object(o.j)(e))L(e,i);else if(Object(o.e)(e))F(t,e,h.context,n,s,!1,i);else if(e&&e[r.c]){(0,j[e.type])(t,e.payload,i,d)}else i(e)}));p.cancel=a.db;var f={meta:s,cancel:function(){0===f.status&&(f.status=1,p(r.j))},status:0},h=H(t,f,n,i,s,u,c),d={task:h,digestEffect:_};return c&&(c.cancel=h.cancel),p(),h;function p(t,n){try{var s;n?(s=e.throw(t),Y()):Object(a.gb)(t)?(f.status=1,p.cancel(),s=Object(o.d)(e.return)?e.return(r.j):{done:!0,value:r.j}):s=Object(a.hb)(t)?Object(o.d)(e.return)?e.return():{done:!0}:e.next(t),s.done?(1!==f.status&&(f.status=3),f.cont(s.value)):_(s.value,i,p)}catch(t){if(1===f.status)throw t;f.status=2,f.cont(t,!0)}}function _(e,n,r,i){void 0===i&&(i="");var o,s=R();function u(n,i){o||(o=!0,r.cancel=a.db,t.sagaMonitor&&(i?t.sagaMonitor.effectRejected(s,n):t.sagaMonitor.effectResolved(s,n)),i&&function(t){K=t}(e),r(n,i))}t.sagaMonitor&&t.sagaMonitor.effectTriggered({effectId:s,parentEffectId:n,label:i,effect:e}),u.cancel=a.db,r.cancel=function(){o||(o=!0,u.cancel(),u.cancel=a.db,t.sagaMonitor&&t.sagaMonitor.effectCancelled(s))},l(e,s,u)}}function G(t,e){var n=t.channel,r=void 0===n?I():n,i=t.dispatch,o=t.getState,u=t.context,c=void 0===u?{}:u,l=t.sagaMonitor,f=t.effectMiddlewares,h=t.onError,d=void 0===h?a.c:h;for(var _=arguments.length,g=new Array(_>2?_-2:0),v=2;v<_;v++)g[v-2]=arguments[v];var y=e.apply(void 0,g);var m,b=R();if(l&&(l.rootSagaStarted=l.rootSagaStarted||a.db,l.effectTriggered=l.effectTriggered||a.db,l.effectResolved=l.effectResolved||a.db,l.effectRejected=l.effectRejected||a.db,l.effectCancelled=l.effectCancelled||a.db,l.actionDispatched=l.actionDispatched||a.db,l.rootSagaStarted({effectId:b,saga:e,args:g})),f){var E=s.compose.apply(void 0,f);m=function(t){return function(e,n,r){return E((function(e){return t(e,n,r)}))(e)}}}else m=a.f;var O={channel:r,dispatch:Object(a.e)(i),getState:o,sagaMonitor:l,onError:d,finalizeRunEffect:m};return p((function(){var t=F(O,y,c,b,Object(a.T)(e),!0,void 0);return l&&l.effectResolved(b,t),t}))}var W=function(t){var e,n=void 0===t?{}:t,r=n.context,o=void 0===r?{}:r,s=n.channel,u=void 0===s?I():s,c=n.sagaMonitor,l=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(n,["context","channel","sagaMonitor"]);function f(t){var n=t.getState,r=t.dispatch;return e=G.bind(null,Object(i.a)({},l,{context:o,channel:u,dispatch:r,getState:n,sagaMonitor:c})),function(t){return function(e){c&&c.actionDispatched&&c.actionDispatched(e);var n=t(e);return u.put(e),n}}}return f.run=function(){return e.apply(void 0,arguments)},f.setContext=function(t){Object(a.Z)(o,t)},f};e.default=W}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,