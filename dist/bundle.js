!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/dist/",i(i.s=4)}([function(t,e,i){"use strict";const n=2.3283064365386963e-10;class r{constructor(){this._seed=0,this._s0=0,this._s1=0,this._s2=0,this._c=0}getSeed(){return this._seed}setSeed(t){return t=t<1?1/t:t,this._seed=t,this._s0=(t>>>0)*n,t=69069*t+1>>>0,this._s1=t*n,t=69069*t+1>>>0,this._s2=t*n,this._c=1,this}getUniform(){let t=2091639*this._s0+this._c*n;return this._s0=this._s1,this._s1=this._s2,this._c=0|t,this._s2=t-this._c,this._s2}getUniformInt(t,e){let i=Math.max(t,e),n=Math.min(t,e);return Math.floor(this.getUniform()*(i-n+1))+n}getNormal(t=0,e=1){let i,n,r;do{i=2*this.getUniform()-1,n=2*this.getUniform()-1,r=i*i+n*n}while(r>1||0==r);return t+i*Math.sqrt(-2*Math.log(r)/r)*e}getPercentage(){return 1+Math.floor(100*this.getUniform())}getItem(t){return t.length?t[Math.floor(this.getUniform()*t.length)]:null}shuffle(t){let e=[],i=t.slice();for(;i.length;){let t=i.indexOf(this.getItem(i));e.push(i.splice(t,1)[0])}return e}getWeightedValue(t){let e=0;for(let i in t)e+=t[i];let i,n=this.getUniform()*e,r=0;for(i in t)if(r+=t[i],n<r)return i;return i}getState(){return[this._s0,this._s1,this._s2,this._c]}setState(t){return this._s0=t[0],this._s1=t[1],this._s2=t[2],this._c=t[3],this}clone(){return(new r).setState(this.getState())}}e.a=(new r).setSeed(Date.now())},function(t,e,i){"use strict";function n(t,e){return(t%e+e)%e}function r(t,e=0,i=1){return t<e?e:t>i?i:t}function s(t){return t.charAt(0).toUpperCase()+t.substring(1)}function o(t,...e){let i=o.map;return t.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi,(function(n,r,o,a){if("%"==t.charAt(a-1))return n.substring(1);if(!e.length)return n;let h=e[0],l=(r||o).split(","),c=l.shift()||"",u=i[c.toLowerCase()];if(!u)return n;h=e.shift();let _=h[u].apply(h,l),p=c.charAt(0);return p!=p.toLowerCase()&&(_=s(_)),_}))}i.r(e),i.d(e,"mod",(function(){return n})),i.d(e,"clamp",(function(){return r})),i.d(e,"capitalize",(function(){return s})),i.d(e,"format",(function(){return o})),o.map={s:"toString"}},function(t,e,i){"use strict";i.r(e),i.d(e,"fromString",(function(){return s})),i.d(e,"add",(function(){return o})),i.d(e,"add_",(function(){return a})),i.d(e,"multiply",(function(){return h})),i.d(e,"multiply_",(function(){return l})),i.d(e,"interpolate",(function(){return c})),i.d(e,"lerp",(function(){return u})),i.d(e,"interpolateHSL",(function(){return _})),i.d(e,"lerpHSL",(function(){return p})),i.d(e,"randomize",(function(){return f})),i.d(e,"rgb2hsl",(function(){return d})),i.d(e,"hsl2rgb",(function(){return g})),i.d(e,"toRGB",(function(){return y})),i.d(e,"toHex",(function(){return v}));var n=i(1),r=i(0);function s(t){let e,i;if(t in b)e=b[t];else{if("#"==t.charAt(0)){let i=(t.match(/[0-9a-f]/gi)||[]).map(t=>parseInt(t,16));if(3==i.length)e=i.map(t=>17*t);else{for(let t=0;t<3;t++)i[t+1]+=16*i[t],i.splice(t,1);e=i}}else e=(i=t.match(/rgb\(([0-9, ]+)\)/i))?i[1].split(/\s*,\s*/).map(t=>parseInt(t)):[0,0,0];b[t]=e}return e.slice()}function o(t,...e){let i=t.slice();for(let t=0;t<3;t++)for(let n=0;n<e.length;n++)i[t]+=e[n][t];return i}function a(t,...e){for(let i=0;i<3;i++)for(let n=0;n<e.length;n++)t[i]+=e[n][i];return t}function h(t,...e){let i=t.slice();for(let t=0;t<3;t++){for(let n=0;n<e.length;n++)i[t]*=e[n][t]/255;i[t]=Math.round(i[t])}return i}function l(t,...e){for(let i=0;i<3;i++){for(let n=0;n<e.length;n++)t[i]*=e[n][i]/255;t[i]=Math.round(t[i])}return t}function c(t,e,i=.5){let n=t.slice();for(let r=0;r<3;r++)n[r]=Math.round(n[r]+i*(e[r]-t[r]));return n}const u=c;function _(t,e,i=.5){let n=d(t),r=d(e);for(let t=0;t<3;t++)n[t]+=i*(r[t]-n[t]);return g(n)}const p=_;function f(t,e){e instanceof Array||(e=Math.round(r.a.getNormal(0,e)));let i=t.slice();for(let t=0;t<3;t++)i[t]+=e instanceof Array?Math.round(r.a.getNormal(0,e[t])):e;return i}function d(t){let e,i=t[0]/255,n=t[1]/255,r=t[2]/255,s=Math.max(i,n,r),o=Math.min(i,n,r),a=0,h=(s+o)/2;if(s==o)e=0;else{let t=s-o;switch(e=h>.5?t/(2-s-o):t/(s+o),s){case i:a=(n-r)/t+(n<r?6:0);break;case n:a=(r-i)/t+2;break;case r:a=(i-n)/t+4}a/=6}return[a,e,h]}function m(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}function g(t){let e=t[2];if(0==t[1])return e=Math.round(255*e),[e,e,e];{let i=t[1],n=e<.5?e*(1+i):e+i-e*i,r=2*e-n,s=m(r,n,t[0]+1/3),o=m(r,n,t[0]),a=m(r,n,t[0]-1/3);return[Math.round(255*s),Math.round(255*o),Math.round(255*a)]}}function y(t){return`rgb(${t.map(t=>Object(n.clamp)(t,0,255)).join(",")})`}function v(t){return"#"+t.map(t=>Object(n.clamp)(t,0,255).toString(16).padStart(2,"0")).join("")}const b={black:[0,0,0],navy:[0,0,128],darkblue:[0,0,139],mediumblue:[0,0,205],blue:[0,0,255],darkgreen:[0,100,0],green:[0,128,0],teal:[0,128,128],darkcyan:[0,139,139],deepskyblue:[0,191,255],darkturquoise:[0,206,209],mediumspringgreen:[0,250,154],lime:[0,255,0],springgreen:[0,255,127],aqua:[0,255,255],cyan:[0,255,255],midnightblue:[25,25,112],dodgerblue:[30,144,255],forestgreen:[34,139,34],seagreen:[46,139,87],darkslategray:[47,79,79],darkslategrey:[47,79,79],limegreen:[50,205,50],mediumseagreen:[60,179,113],turquoise:[64,224,208],royalblue:[65,105,225],steelblue:[70,130,180],darkslateblue:[72,61,139],mediumturquoise:[72,209,204],indigo:[75,0,130],darkolivegreen:[85,107,47],cadetblue:[95,158,160],cornflowerblue:[100,149,237],mediumaquamarine:[102,205,170],dimgray:[105,105,105],dimgrey:[105,105,105],slateblue:[106,90,205],olivedrab:[107,142,35],slategray:[112,128,144],slategrey:[112,128,144],lightslategray:[119,136,153],lightslategrey:[119,136,153],mediumslateblue:[123,104,238],lawngreen:[124,252,0],chartreuse:[127,255,0],aquamarine:[127,255,212],maroon:[128,0,0],purple:[128,0,128],olive:[128,128,0],gray:[128,128,128],grey:[128,128,128],skyblue:[135,206,235],lightskyblue:[135,206,250],blueviolet:[138,43,226],darkred:[139,0,0],darkmagenta:[139,0,139],saddlebrown:[139,69,19],darkseagreen:[143,188,143],lightgreen:[144,238,144],mediumpurple:[147,112,216],darkviolet:[148,0,211],palegreen:[152,251,152],darkorchid:[153,50,204],yellowgreen:[154,205,50],sienna:[160,82,45],brown:[165,42,42],darkgray:[169,169,169],darkgrey:[169,169,169],lightblue:[173,216,230],greenyellow:[173,255,47],paleturquoise:[175,238,238],lightsteelblue:[176,196,222],powderblue:[176,224,230],firebrick:[178,34,34],darkgoldenrod:[184,134,11],mediumorchid:[186,85,211],rosybrown:[188,143,143],darkkhaki:[189,183,107],silver:[192,192,192],mediumvioletred:[199,21,133],indianred:[205,92,92],peru:[205,133,63],chocolate:[210,105,30],tan:[210,180,140],lightgray:[211,211,211],lightgrey:[211,211,211],palevioletred:[216,112,147],thistle:[216,191,216],orchid:[218,112,214],goldenrod:[218,165,32],crimson:[220,20,60],gainsboro:[220,220,220],plum:[221,160,221],burlywood:[222,184,135],lightcyan:[224,255,255],lavender:[230,230,250],darksalmon:[233,150,122],violet:[238,130,238],palegoldenrod:[238,232,170],lightcoral:[240,128,128],khaki:[240,230,140],aliceblue:[240,248,255],honeydew:[240,255,240],azure:[240,255,255],sandybrown:[244,164,96],wheat:[245,222,179],beige:[245,245,220],whitesmoke:[245,245,245],mintcream:[245,255,250],ghostwhite:[248,248,255],salmon:[250,128,114],antiquewhite:[250,235,215],linen:[250,240,230],lightgoldenrodyellow:[250,250,210],oldlace:[253,245,230],red:[255,0,0],fuchsia:[255,0,255],magenta:[255,0,255],deeppink:[255,20,147],orangered:[255,69,0],tomato:[255,99,71],hotpink:[255,105,180],coral:[255,127,80],darkorange:[255,140,0],lightsalmon:[255,160,122],orange:[255,165,0],lightpink:[255,182,193],pink:[255,192,203],gold:[255,215,0],peachpuff:[255,218,185],navajowhite:[255,222,173],moccasin:[255,228,181],bisque:[255,228,196],mistyrose:[255,228,225],blanchedalmond:[255,235,205],papayawhip:[255,239,213],lavenderblush:[255,240,245],seashell:[255,245,238],cornsilk:[255,248,220],lemonchiffon:[255,250,205],floralwhite:[255,250,240],snow:[255,250,250],yellow:[255,255,0],lightyellow:[255,255,224],ivory:[255,255,240],white:[255,255,255]}},function(t,e,i){"use strict";i.d(e,"a",(function(){return n}));class n{getContainer(){return null}setOptions(t){this._options=t}}},function(module,exports,__webpack_require__){"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},__importStar=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(exports,"__esModule",{value:!0});const keys_1=__importDefault(__webpack_require__(15)),state_1=__importStar(__webpack_require__(9)),setters_1=__webpack_require__(8),display_1=__webpack_require__(12),map_1=__webpack_require__(13),ecsy_1=__webpack_require__(5),systems_1=__webpack_require__(31),entities_1=__webpack_require__(35);__webpack_require__(37),__webpack_require__(38),__webpack_require__(39),__webpack_require__(40);const WIDTH=64;exports.WIDTH=WIDTH;const HEIGHT=32;exports.HEIGHT=HEIGHT;const display=display_1.setupDisplay({width:WIDTH,height:HEIGHT});exports.display=display;const ECS=new ecsy_1.World;exports.ECS=ECS;const game=new state_1.default({player:{x:0,y:0},runState:state_1.RunState.PRERUN,map:map_1.createMap(WIDTH,HEIGHT)},display,ECS);exports.game=game,eval("window.game = game;");const main=()=>{keys_1.default();const t={x:WIDTH/2,y:HEIGHT/2};entities_1.createPlayer(ECS,t.x,t.y);ECS.registerSystem(systems_1.RenderingSystem),game.setState(setters_1.setPlayerPosition(t.x,t.y)).setState(setters_1.setRunState(state_1.RunState.RUNNING)),game.gameLoop()};document.addEventListener("DOMContentLoaded",()=>{setTimeout(()=>{document.querySelector(".main .loading").remove(),requestAnimationFrame(main)},500)})},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Component",(function(){return Component})),__webpack_require__.d(__webpack_exports__,"Not",(function(){return Not})),__webpack_require__.d(__webpack_exports__,"System",(function(){return System})),__webpack_require__.d(__webpack_exports__,"SystemStateComponent",(function(){return SystemStateComponent})),__webpack_require__.d(__webpack_exports__,"TagComponent",(function(){return TagComponent})),__webpack_require__.d(__webpack_exports__,"Types",(function(){return Types})),__webpack_require__.d(__webpack_exports__,"Version",(function(){return Version})),__webpack_require__.d(__webpack_exports__,"World",(function(){return World})),__webpack_require__.d(__webpack_exports__,"createComponentClass",(function(){return createComponentClass})),__webpack_require__.d(__webpack_exports__,"createType",(function(){return createType})),__webpack_require__.d(__webpack_exports__,"enableRemoteDevtools",(function(){return enableRemoteDevtools}));class SystemManager{constructor(t){this._systems=[],this._executeSystems=[],this.world=t,this.lastExecutedSystem=null}registerSystem(t,e){if(void 0!==this._systems.find(e=>e.constructor.name===t.name))return console.warn(`System '${t.name}' already registered.`),this;var i=new t(this.world,e);return i.init&&i.init(),i.order=this._systems.length,this._systems.push(i),i.execute&&(this._executeSystems.push(i),this.sortSystems()),this}sortSystems(){this._executeSystems.sort((t,e)=>t.priority-e.priority||t.order-e.order)}getSystem(t){return this._systems.find(e=>e instanceof t)}getSystems(){return this._systems}removeSystem(t){var e=this._systems.indexOf(t);~e&&this._systems.splice(e,1)}executeSystem(t,e,i){if(t.initialized&&t.canExecute()){let n=performance.now();t.execute(e,i),t.executeTime=performance.now()-n,this.lastExecutedSystem=t,t.clearEvents()}}stop(){this._executeSystems.forEach(t=>t.stop())}execute(t,e,i){this._executeSystems.forEach(n=>(i||n.enabled)&&this.executeSystem(n,t,e))}stats(){for(var t={numSystems:this._systems.length,systems:{}},e=0;e<this._systems.length;e++){var i=this._systems[e],n=t.systems[i.constructor.name]={queries:{}};for(var r in i.ctx)n.queries[r]=i.ctx[r].stats()}return t}}class EventDispatcher{constructor(){this._listeners={},this.stats={fired:0,handled:0}}addEventListener(t,e){let i=this._listeners;void 0===i[t]&&(i[t]=[]),-1===i[t].indexOf(e)&&i[t].push(e)}hasEventListener(t,e){return void 0!==this._listeners[t]&&-1!==this._listeners[t].indexOf(e)}removeEventListener(t,e){var i=this._listeners[t];if(void 0!==i){var n=i.indexOf(e);-1!==n&&i.splice(n,1)}}dispatchEvent(t,e,i){this.stats.fired++;var n=this._listeners[t];if(void 0!==n)for(var r=n.slice(0),s=0;s<r.length;s++)r[s].call(this,e,i)}resetCounters(){this.stats.fired=this.stats.handled=0}}function getName(t){return t.name}function componentPropertyName(t){return getName(t)}function queryKey(t){for(var e=[],i=0;i<t.length;i++){var n=t[i];if("object"==typeof n){var r="not"===n.operator?"!":n.operator;e.push(r+getName(n.Component))}else e.push(getName(n))}return e.sort().join("-")}class Query{constructor(t,e){if(this.Components=[],this.NotComponents=[],t.forEach(t=>{"object"==typeof t?this.NotComponents.push(t.Component):this.Components.push(t)}),0===this.Components.length)throw new Error("Can't create a query without components");this.entities=[],this.eventDispatcher=new EventDispatcher,this.reactive=!1,this.key=queryKey(t);for(var i=0;i<e._entities.length;i++){var n=e._entities[i];this.match(n)&&(n.queries.push(this),this.entities.push(n))}}addEntity(t){t.queries.push(this),this.entities.push(t),this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED,t)}removeEntity(t){let e=this.entities.indexOf(t);~e&&(this.entities.splice(e,1),e=t.queries.indexOf(this),t.queries.splice(e,1),this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_REMOVED,t))}match(t){return t.hasAllComponents(this.Components)&&!t.hasAnyComponents(this.NotComponents)}toJSON(){return{key:this.key,reactive:this.reactive,components:{included:this.Components.map(t=>t.name),not:this.NotComponents.map(t=>t.name)},numEntities:this.entities.length}}stats(){return{numComponents:this.Components.length,numEntities:this.entities.length}}}Query.prototype.ENTITY_ADDED="Query#ENTITY_ADDED",Query.prototype.ENTITY_REMOVED="Query#ENTITY_REMOVED",Query.prototype.COMPONENT_CHANGED="Query#COMPONENT_CHANGED";var nextId=0;class Entity{constructor(t){this._world=t||null,this.id=nextId++,this._ComponentTypes=[],this._components={},this._componentsToRemove={},this.queries=[],this._ComponentTypesToRemove=[],this.alive=!1}getComponent(t,e){var i=this._components[t.name];return i||!0!==e||(i=this._componentsToRemove[t.name]),i}getRemovedComponent(t){return this._componentsToRemove[t.name]}getComponents(){return this._components}getComponentsToRemove(){return this._componentsToRemove}getComponentTypes(){return this._ComponentTypes}getMutableComponent(t){for(var e=this._components[t.name],i=0;i<this.queries.length;i++){var n=this.queries[i];n.reactive&&-1!==n.Components.indexOf(t)&&n.eventDispatcher.dispatchEvent(Query.prototype.COMPONENT_CHANGED,this,e)}return e}addComponent(t,e){return this._world.entityAddComponent(this,t,e),this}removeComponent(t,e){return this._world.entityRemoveComponent(this,t,e),this}hasComponent(t,e){return!!~this._ComponentTypes.indexOf(t)||!0===e&&this.hasRemovedComponent(t)}hasRemovedComponent(t){return!!~this._ComponentTypesToRemove.indexOf(t)}hasAllComponents(t){for(var e=0;e<t.length;e++)if(!this.hasComponent(t[e]))return!1;return!0}hasAnyComponents(t){for(var e=0;e<t.length;e++)if(this.hasComponent(t[e]))return!0;return!1}removeAllComponents(t){return this._world.entityRemoveAllComponents(this,t)}reset(){this.id=nextId++,this._world=null,this._ComponentTypes.length=0,this.queries.length=0,this._components={}}remove(t){return this._world.removeEntity(this,t)}}class ObjectPool{constructor(t,e){this.freeList=[],this.count=0,this.T=t,this.isObjectPool=!0;var i=null;arguments.length>1&&(i=Array.prototype.slice.call(arguments)).shift(),this.createElement=i?()=>new t(...i):()=>new t,void 0!==e&&this.expand(e)}aquire(){return this.freeList.length<=0&&this.expand(Math.round(.2*this.count)+1),this.freeList.pop()}release(t){t.reset(),this.freeList.push(t)}expand(t){for(var e=0;e<t;e++)this.freeList.push(this.createElement());this.count+=t}totalSize(){return this.count}totalFree(){return this.freeList.length}totalUsed(){return this.count-this.freeList.length}}class QueryManager{constructor(t){this._world=t,this._queries={}}onEntityRemoved(t){for(var e in this._queries){var i=this._queries[e];-1!==t.queries.indexOf(i)&&i.removeEntity(t)}}onEntityComponentAdded(t,e){for(var i in this._queries){var n=this._queries[i];~n.NotComponents.indexOf(e)&&~n.entities.indexOf(t)?n.removeEntity(t):~n.Components.indexOf(e)&&n.match(t)&&!~n.entities.indexOf(t)&&n.addEntity(t)}}onEntityComponentRemoved(t,e){for(var i in this._queries){var n=this._queries[i];~n.NotComponents.indexOf(e)&&!~n.entities.indexOf(t)&&n.match(t)?n.addEntity(t):~n.Components.indexOf(e)&&~n.entities.indexOf(t)&&!n.match(t)&&n.removeEntity(t)}}getQuery(t){var e=queryKey(t),i=this._queries[e];return i||(this._queries[e]=i=new Query(t,this._world)),i}stats(){var t={};for(var e in this._queries)t[e]=this._queries[e].stats();return t}}class SystemStateComponent{}SystemStateComponent.isSystemStateComponent=!0;class EntityManager{constructor(t){this.world=t,this.componentsManager=t.componentsManager,this._entities=[],this._entitiesByNames={},this._queryManager=new QueryManager(this),this.eventDispatcher=new EventDispatcher,this._entityPool=new ObjectPool(Entity),this.entitiesWithComponentsToRemove=[],this.entitiesToRemove=[],this.deferredRemovalEnabled=!0,this.numStateComponents=0}getEntityByName(t){return this._entitiesByNames[t]}createEntity(t){var e=this._entityPool.aquire();return e.alive=!0,e.name=t||"",t&&(this._entitiesByNames[t]?console.warn(`Entity name '${t}' already exist`):this._entitiesByNames[t]=e),e._world=this,this._entities.push(e),this.eventDispatcher.dispatchEvent(ENTITY_CREATED,e),e}entityAddComponent(t,e,i){if(!~t._ComponentTypes.indexOf(e)){t._ComponentTypes.push(e),e.__proto__===SystemStateComponent&&this.numStateComponents++;var n=this.world.componentsManager.getComponentsPool(e).aquire();if(t._components[e.name]=n,i)if(n.copy)n.copy(i);else for(var r in i)n[r]=i[r];this._queryManager.onEntityComponentAdded(t,e),this.world.componentsManager.componentAddedToEntity(e),this.eventDispatcher.dispatchEvent(COMPONENT_ADDED,t,e)}}entityRemoveComponent(t,e,i){var n=t._ComponentTypes.indexOf(e);if(~n){if(this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE,t,e),i)this._entityRemoveComponentSync(t,e,n);else{0===t._ComponentTypesToRemove.length&&this.entitiesWithComponentsToRemove.push(t),t._ComponentTypes.splice(n,1),t._ComponentTypesToRemove.push(e);var r=getName(e);t._componentsToRemove[r]=t._components[r],delete t._components[r]}this._queryManager.onEntityComponentRemoved(t,e),e.__proto__===SystemStateComponent&&(this.numStateComponents--,0!==this.numStateComponents||t.alive||t.remove())}}_entityRemoveComponentSync(t,e,i){t._ComponentTypes.splice(i,1);var n=componentPropertyName(e),r=getName(e),s=t._components[r];delete t._components[r],this.componentsManager._componentPool[n].release(s),this.world.componentsManager.componentRemovedFromEntity(e)}entityRemoveAllComponents(t,e){let i=t._ComponentTypes;for(let n=i.length-1;n>=0;n--)i[n].__proto__!==SystemStateComponent&&this.entityRemoveComponent(t,i[n],e)}removeEntity(t,e){var i=this._entities.indexOf(t);if(!~i)throw new Error("Tried to remove entity not in list");t.alive=!1,0===this.numStateComponents&&(this.eventDispatcher.dispatchEvent(ENTITY_REMOVED,t),this._queryManager.onEntityRemoved(t),!0===e?this._releaseEntity(t,i):this.entitiesToRemove.push(t)),this.entityRemoveAllComponents(t,e)}_releaseEntity(t,e){this._entities.splice(e,1),t._world=null,this._entityPool.release(t)}removeAllEntities(){for(var t=this._entities.length-1;t>=0;t--)this.removeEntity(this._entities[t])}processDeferredRemoval(){if(this.deferredRemovalEnabled){for(let t=0;t<this.entitiesToRemove.length;t++){let e=this.entitiesToRemove[t],i=this._entities.indexOf(e);this._releaseEntity(e,i)}this.entitiesToRemove.length=0;for(let n=0;n<this.entitiesWithComponentsToRemove.length;n++){let r=this.entitiesWithComponentsToRemove[n];for(;r._ComponentTypesToRemove.length>0;){let n=r._ComponentTypesToRemove.pop();var t=componentPropertyName(n),e=getName(n),i=r._componentsToRemove[e];delete r._componentsToRemove[e],this.componentsManager._componentPool[t].release(i),this.world.componentsManager.componentRemovedFromEntity(n)}}this.entitiesWithComponentsToRemove.length=0}}queryComponents(t){return this._queryManager.getQuery(t)}count(){return this._entities.length}stats(){var t={numEntities:this._entities.length,numQueries:Object.keys(this._queryManager._queries).length,queries:this._queryManager.stats(),numComponentPool:Object.keys(this.componentsManager._componentPool).length,componentPool:{},eventDispatcher:this.eventDispatcher.stats};for(var e in this.componentsManager._componentPool){var i=this.componentsManager._componentPool[e];t.componentPool[e]={used:i.totalUsed(),size:i.count}}return t}}const ENTITY_CREATED="EntityManager#ENTITY_CREATE",ENTITY_REMOVED="EntityManager#ENTITY_REMOVED",COMPONENT_ADDED="EntityManager#COMPONENT_ADDED",COMPONENT_REMOVE="EntityManager#COMPONENT_REMOVE";class DummyObjectPool{constructor(t){this.isDummyObjectPool=!0,this.count=0,this.used=0,this.T=t}aquire(){return this.used++,this.count++,new this.T}release(){this.used--}totalSize(){return this.count}totalFree(){return 1/0}totalUsed(){return this.used}}class ComponentManager{constructor(){this.Components={},this._componentPool={},this.numComponents={}}registerComponent(t){this.Components[t.name]?console.warn(`Component type: '${t.name}' already registered.`):(this.Components[t.name]=t,this.numComponents[t.name]=0)}componentAddedToEntity(t){this.Components[t.name]||this.registerComponent(t),this.numComponents[t.name]++}componentRemovedFromEntity(t){this.numComponents[t.name]--}getComponentsPool(t){var e=componentPropertyName(t);return this._componentPool[e]||(t.prototype.reset?this._componentPool[e]=new ObjectPool(t):(console.warn(`Component '${t.name}' won't benefit from pooling because 'reset' method was not implemented.`),this._componentPool[e]=new DummyObjectPool(t))),this._componentPool[e]}}var name="ecsy",version="0.2.2",description="Entity Component System in JS",main="build/ecsy.js",module="build/ecsy.module.js",types="src/index.d.ts",scripts={build:"rollup -c && npm run docs",docs:"rm docs/api/_sidebar.md; typedoc --readme none --mode file --excludeExternals --plugin typedoc-plugin-markdown  --theme docs/theme --hideSources --hideBreadcrumbs --out docs/api/ --includeDeclarations --includes 'src/**/*.d.ts' src; touch docs/api/_sidebar.md","dev:docs":"nodemon -e ts -x 'npm run docs' -w src",dev:"concurrently --names 'ROLLUP,DOCS,HTTP' -c 'bgBlue.bold,bgYellow.bold,bgGreen.bold' 'rollup -c -w -m inline' 'npm run dev:docs' 'npm run dev:server'","dev:server":"http-server -c-1 -p 8080 --cors",lint:"eslint src test examples",start:"npm run dev",test:"ava",travis:"npm run lint && npm run test && npm run build","watch:test":"ava --watch"},repository={type:"git",url:"git+https://github.com/fernandojsg/ecsy.git"},keywords=["ecs","entity component system"],author="Fernando Serrano <fernandojsg@gmail.com> (http://fernandojsg.com)",license="MIT",bugs={url:"https://github.com/fernandojsg/ecsy/issues"},ava={files:["test/**/*.test.js"],sources:["src/**/*.js"],require:["babel-register","esm"]},jspm={files:["package.json","LICENSE","README.md","build/ecsy.js","build/ecsy.min.js","build/ecsy.module.js"],directories:{}},homepage="https://github.com/fernandojsg/ecsy#readme",devDependencies={ava:"^1.4.1","babel-cli":"^6.26.0","babel-core":"^6.26.3","babel-eslint":"^10.0.3","babel-loader":"^8.0.6",concurrently:"^4.1.2","docsify-cli":"^4.4.0",eslint:"^5.16.0","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.2","http-server":"^0.11.1",nodemon:"^1.19.4",prettier:"^1.19.1",rollup:"^1.29.0","rollup-plugin-json":"^4.0.0","rollup-plugin-terser":"^5.2.0",typedoc:"^0.15.8","typedoc-plugin-markdown":"^2.2.16",typescript:"^3.7.5"},pjson={name:name,version:version,description:description,main:main,"jsnext:main":"build/ecsy.module.js",module:module,types:types,scripts:scripts,repository:repository,keywords:keywords,author:author,license:license,bugs:bugs,ava:ava,jspm:jspm,homepage:homepage,devDependencies:devDependencies};const Version=pjson.version;class World{constructor(){if(this.componentsManager=new ComponentManager(this),this.entityManager=new EntityManager(this),this.systemManager=new SystemManager(this),this.enabled=!0,this.eventQueues={},"undefined"!=typeof CustomEvent){var t=new CustomEvent("ecsy-world-created",{detail:{world:this,version:Version}});window.dispatchEvent(t)}this.lastTime=performance.now()}registerComponent(t){return this.componentsManager.registerComponent(t),this}registerSystem(t,e){return this.systemManager.registerSystem(t,e),this}getSystem(t){return this.systemManager.getSystem(t)}getSystems(){return this.systemManager.getSystems()}execute(t,e){if(!t){let e=performance.now();t=e-this.lastTime,this.lastTime=e}this.enabled&&(this.systemManager.execute(t,e),this.entityManager.processDeferredRemoval())}stop(){this.enabled=!1}play(){this.enabled=!0}createEntity(t){return this.entityManager.createEntity(t)}stats(){var t={entities:this.entityManager.stats(),system:this.systemManager.stats()};console.log(JSON.stringify(t,null,2))}}class System{canExecute(){if(0===this._mandatoryQueries.length)return!0;for(let t=0;t<this._mandatoryQueries.length;t++){if(0===this._mandatoryQueries[t].entities.length)return!1}return!0}constructor(t,e){if(this.world=t,this.enabled=!0,this._queries={},this.queries={},this.priority=0,this.executeTime=0,e&&e.priority&&(this.priority=e.priority),this._mandatoryQueries=[],this.initialized=!0,this.constructor.queries)for(var i in this.constructor.queries){var n=this.constructor.queries[i],r=n.components;if(!r||0===r.length)throw new Error("'components' attribute can't be empty in a query");var s=this.world.entityManager.queryComponents(r);this._queries[i]=s,!0===n.mandatory&&this._mandatoryQueries.push(s),this.queries[i]={results:s.entities};const t={added:Query.prototype.ENTITY_ADDED,removed:Query.prototype.ENTITY_REMOVED,changed:Query.prototype.COMPONENT_CHANGED};n.listen&&["added","removed","changed"].forEach(e=>{if(n.listen[e]){let r=n.listen[e];if("changed"===e){if(s.reactive=!0,!0===r){let t=this.queries[i][e]=[];s.eventDispatcher.addEventListener(Query.prototype.COMPONENT_CHANGED,e=>{-1===t.indexOf(e)&&t.push(e)})}else if(Array.isArray(r)){let t=this.queries[i][e]=[];s.eventDispatcher.addEventListener(Query.prototype.COMPONENT_CHANGED,(e,i)=>{-1!==r.indexOf(i.constructor)&&-1===t.indexOf(e)&&t.push(e)})}}else{let n=this.queries[i][e]=[];s.eventDispatcher.addEventListener(t[e],t=>{-1===n.indexOf(t)&&n.push(t)})}}})}}stop(){this.executeTime=0,this.enabled=!1}play(){this.enabled=!0}clearEvents(){for(let e in this.queries){var t=this.queries[e];if(t.added&&(t.added.length=0),t.removed&&(t.removed.length=0),t.changed)if(Array.isArray(t.changed))t.changed.length=0;else for(let e in t.changed)t.changed[e].length=0}}toJSON(){var t={name:this.constructor.name,enabled:this.enabled,executeTime:this.executeTime,priority:this.priority,queries:{}};if(this.constructor.queries){var e=this.constructor.queries;for(let i in e){let n=this.queries[i],r=e[i],s=t.queries[i]={key:this._queries[i].key};if(s.mandatory=!0===r.mandatory,s.reactive=r.listen&&(!0===r.listen.added||!0===r.listen.removed||!0===r.listen.changed||Array.isArray(r.listen.changed)),s.reactive){s.listen={},["added","removed","changed"].forEach(t=>{n[t]&&(s.listen[t]={entities:n[t].length})})}}}return t}}function Not(t){return{operator:"not",Component:t}}class Component{}Component.isComponent=!0;class TagComponent{reset(){}}function createType(t){var e=["create","reset","clear"].filter(e=>!t[e]);if(e.length>0)throw new Error("createType expect type definition to implements the following functions: "+e.join(", "));return t.isType=!0,t}TagComponent.isTagComponent=!0;var Types={};Types.Number=createType({baseType:Number,isSimpleType:!0,create:t=>void 0!==t?t:0,reset:(t,e,i)=>{t[e]=void 0!==i?i:0},clear:(t,e)=>{t[e]=0}}),Types.Boolean=createType({baseType:Boolean,isSimpleType:!0,create:t=>void 0!==t&&t,reset:(t,e,i)=>{t[e]=void 0!==i&&i},clear:(t,e)=>{t[e]=!1}}),Types.String=createType({baseType:String,isSimpleType:!0,create:t=>void 0!==t?t:"",reset:(t,e,i)=>{t[e]=void 0!==i?i:""},clear:(t,e)=>{t[e]=""}}),Types.Array=createType({baseType:Array,create:t=>void 0!==t?t.slice():[],reset:(t,e,i)=>{void 0!==i?t[e]=i.slice():t[e].length=0},clear:(t,e)=>{t[e].length=0},copy:(t,e,i)=>{t[i]=e[i].slice()}});var standardTypes={number:Types.Number,boolean:Types.Boolean,string:Types.String};function inferType(t){return Array.isArray(t)?Types.Array:standardTypes[typeof t]?standardTypes[typeof t]:null}function createComponentClass(t,e){for(let e in t){t[e].type||(t[e].type=inferType(t[e].default))}var i=function(){for(let i in t){var e=t[i];let n=e.type;n&&n.isType?this[i]=n.create(e.default):this[i]=e.default}};void 0!==e&&Object.defineProperty(i,"name",{value:e}),i.prototype.schema=t;var n=!0;for(let e in t){var r=t[e];r.type||(r.type=inferType(r.default)),r.type||(console.warn(`Unknown type definition for attribute '${e}'`),n=!1)}if(n){i.prototype.copy=function(e){for(let i in t)if(e[i]){let n=t[i].type;n.isSimpleType?this[i]=e[i]:n.copy?n.copy(this,e,i):console.warn(`Unknown copy function for attribute '${i}' data type`)}},i.prototype.reset=function(){for(let e in t){let i=t[e],n=i.type;n.reset&&n.reset(this,e,i.default)}},i.prototype.clear=function(){for(let e in t){let i=t[e].type;i.clear&&i.clear(this,e)}};for(let e in t){let n=t[e],r=n.type;i.prototype[e]=n.default,r.reset&&r.reset(i.prototype,e,n.default)}}else for(var s in console.warn("This component can't use pooling because some data types are not registered. Please provide a type created with 'createType'"),t){let e=t[s];i.prototype[s]=e.default}return i}function generateId(t){for(var e="",i="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",n=i.length,r=0;r<t;r++)e+=i.charAt(Math.floor(Math.random()*n));return e}function injectScript(t,e){var i=document.createElement("script");i.src=t,i.onload=e,(document.head||document.documentElement).appendChild(i)}function hookConsoleAndErrors(t){["error","warning","log"].forEach(e=>{if("function"==typeof console[e]){var i=console[e].bind(console);console[e]=(...n)=>(t.send({method:"console",type:e,args:JSON.stringify(n)}),i.apply(null,n))}}),window.addEventListener("error",e=>{t.send({method:"error",error:JSON.stringify({message:e.error.message,stack:e.error.stack})})})}function includeRemoteIdHTML(t){let e=document.createElement("div");return e.style.cssText="\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  ",e.innerHTML=`Open ECSY devtools to connect to this page using the code:&nbsp;<b style="color: #fff">${t}</b>&nbsp;<button onClick="generateNewCode()">Generate new code</button>`,document.body.appendChild(e),e}function enableRemoteDevtools(remoteId){window.generateNewCode=()=>{window.localStorage.clear(),remoteId=generateId(6),window.localStorage.setItem("ecsyRemoteId",remoteId),window.location.reload(!1)},remoteId=remoteId||window.localStorage.getItem("ecsyRemoteId"),remoteId||(remoteId=generateId(6),window.localStorage.setItem("ecsyRemoteId",remoteId));let infoDiv=includeRemoteIdHTML(remoteId);window.__ECSY_REMOTE_DEVTOOLS_INJECTED=!0,window.__ECSY_REMOTE_DEVTOOLS={};let Version="",worldsBeforeLoading=[],onWorldCreated=t=>{var e=t.detail.world;Version=t.detail.version,worldsBeforeLoading.push(e)};window.addEventListener("ecsy-world-created",onWorldCreated);let onLoaded=()=>{var peer=new Peer(remoteId);peer.on("open",()=>{peer.on("connection",connection=>{window.__ECSY_REMOTE_DEVTOOLS.connection=connection,connection.on("open",(function(){infoDiv.innerHTML="Connected",connection.on("data",(function(data){if("init"===data.type){var script=document.createElement("script");script.setAttribute("type","text/javascript"),script.onload=()=>{script.parentNode.removeChild(script),window.removeEventListener("ecsy-world-created",onWorldCreated),worldsBeforeLoading.forEach(t=>{var e=new CustomEvent("ecsy-world-created",{detail:{world:t,version:Version}});window.dispatchEvent(e)})},script.innerHTML=data.script,(document.head||document.documentElement).appendChild(script),script.onload(),hookConsoleAndErrors(connection)}else if("executeScript"===data.type){let value=eval(data.script);data.returnEval&&connection.send({method:"evalReturn",value:value})}}))}))})})};injectScript("https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js",onLoaded)}const urlParams=new URLSearchParams(window.location.search);urlParams.has("enable-remote-devtools")&&enableRemoteDevtools()},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e,i){"use strict";(function(t){i.d(e,"a",(function(){return o}));var n=i(3),r=i(2);function s(t){let e=r.fromString(t);return 36*Math.floor(e[0]*(6/256))+6*Math.floor(e[1]*(6/256))+1*Math.floor(e[2]*(6/256))+16}class o extends n.a{constructor(){super(),this._offset=[0,0],this._cursor=[-1,-1],this._lastColor=""}schedule(t){setTimeout(t,1e3/60)}setOptions(t){super.setOptions(t);let e=[t.width,t.height],i=this.computeSize();this._offset=i.map((t,i)=>Math.floor((t-e[i])/2))}clear(){t.stdout.write(`[0;48;5;${s(this._options.bg)}m[2J`)}draw(e,i){let[n,r,o,a,h]=e,l=this._offset[0]+n,c=this._offset[1]+r,u=this.computeSize();if(l<0||l>=u[0])return;if(c<0||c>=u[1])return;if(l===this._cursor[0]&&c===this._cursor[1]||(t.stdout.write(function(t,e){return`[${e+1};${t+1}H`}(l,c)),this._cursor[0]=l,this._cursor[1]=c),i&&(o||(o=" ")),!o)return;let _=function(t,e){return`[0;38;5;${s(t)};48;5;${s(e)}m`}(a,h);_!==this._lastColor&&(t.stdout.write(_),this._lastColor=_);let p=[].concat(o);t.stdout.write(p[0]),this._cursor[0]++,this._cursor[0]>=u[0]&&(this._cursor[0]=0,this._cursor[1]++)}computeFontSize(){throw new Error("Terminal backend has no notion of font size")}eventToPosition(t,e){return[t,e]}computeSize(){return[t.stdout.columns,t.stdout.rows]}}}).call(this,i(30))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(9);e.updatePlayerPosition=n.createSetter("UPDATE_PLAYER_POSITION",(t,e)=>i=>{i.player=Object.assign(Object.assign({},i.player),{x:i.player.x+t,y:i.player.y+e})}),e.setPlayerPosition=n.createSetter("SET_PLAYER_POSITION",(t,e)=>i=>{i.player=Object.assign(Object.assign({},i.player),{x:t,y:e})}),e.setRunState=n.createSetter("SET_RUN_STATE",t=>e=>{e.runState=t})},function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=n(i(18)),s=n(i(19)),o=i(12);var a;!function(t){t.PRERUN="PRERUN",t.RUNNING="RUNNING",t.PAUSED="PAUSED"}(a=e.RunState||(e.RunState={}));e.default=class{constructor(t,e,i){this.tick=s.default(()=>{const t=performance.now(),e=t-this.lastTime;this.lastTime=t,this.display.clear(),o.drawMap(this.getState(t=>t.map)),o.drawGUI(),this.ecs.execute(e,t)},1e3/60),this.gameLoop=()=>{const{running:t}=this.getState(t=>({running:t.runState===a.RUNNING}));t&&this.tick(),requestAnimationFrame(this.gameLoop)},this.state=t,this.display=e,this.ecs=i,this.lastTime=performance.now()}getState(t){return t?t(this.state):this.state}setState(t){let e=t;"function"==typeof t&&(e=[t]);const i=e.reduce((t,e)=>r.default(t,e),this.state);return this.state=i,this}},e.createSetter=(t,e)=>(...t)=>i=>e(...t)(i)},function(t,e,i){var n=i(22),r="object"==typeof self&&self&&self.Object===Object&&self,s=n||r||Function("return this")();t.exports=s},function(t,e,i){var n=i(10).Symbol;t.exports=n},function(t,e,i){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const r=n(i(41)),s=i(13),o=i(4);e.setupDisplay=t=>{const e=new r.Display({width:t.width,height:t.height,forceSquareRatio:!1,fontFamily:"IBMVGA8",fontSize:16});return document.querySelector(".main").appendChild(e.getContainer()),e},e.drawGUI=()=>{},e.drawMap=t=>{for(let e=0;e<t.length;e++){const i=e%o.WIDTH,n=~~(e/o.WIDTH),r=t[e]===s.CellType.FLOOR?".":"#";o.display.draw(i,n,r,"#aaa","#000")}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(4);var r;!function(t){t[t.FLOOR=0]="FLOOR",t[t.WALL=1]="WALL"}(r=e.CellType||(e.CellType={}));const s=(t,e)=>e*n.WIDTH+t;e.createMap=(t,e)=>{const i=new Array(t*e).fill(r.WALL);for(let t=1;t<n.HEIGHT-1;t++)for(let e=1;e<n.WIDTH-1;e++)i[s(e,t)]=r.FLOOR;return i}},function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=n(i(33));e.Renderable=r.default;const s=n(i(34));e.Position=s.default},function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=n(i(16)),s=i(4),o=i(8),a=t=>()=>{const[e,i]={N:[0,-1],E:[1,0],S:[0,1],W:[-1,0]}[t];s.game.setState(o.updatePlayerPosition(e,i))};e.default=()=>{r.default("k",a("N")),r.default("l",a("E")),r.default("j",a("S")),r.default("h",a("W"))}},function(t,e,i){var n;i(17),void 0===(n=function(){var t,e="undefined"!=typeof navigator&&~navigator.userAgent.indexOf("Mac OS X"),i=["shiftKey","ctrlKey","altKey","metaKey"],n={shift:"shift",ctrl:"ctrl",control:"ctrl",alt:"alt",option:"alt",win:"meta",cmd:"meta",super:"meta",meta:"meta",defmod:e?"meta":"ctrl"},r=["shift","ctrl","alt","meta"],s=[16,17,18,91],o={backspace:8,tab:9,enter:13,return:13,pause:19,caps:20,capslock:20,escape:27,esc:27,space:32,pgup:33,pageup:33,pgdown:34,pagedown:34,end:35,home:36,ins:45,insert:45,del:46,delete:46,left:37,up:38,right:39,down:40,"*":106,"+":107,plus:107,minus:109,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222};for(t=0;t<10;t++)o["num-"+t]=t+95;for(t=0;t<10;t++)o[t.toString()]=t+48;for(t=1;t<25;t++)o["f"+t]=t+111;for(t=65;t<91;t++)o[String.fromCharCode(t).toLowerCase()]=t;var a={};for(var h in o){var l=o[h];(!a[l]||a[l].length<h.length)&&(a[l]=h)}var c="",u={};function _(t){var e,i=t.split(/-(?!$)/),r=i[i.length-1],s={code:o[r]};if(!s.code)throw'Unknown key "'+r+'" in keystring "'+t+'"';for(var a=0;a<i.length-1;a++){if(r=i[a],!(e=n[r]))throw'Unknown modifier "'+r+'" in keystring "'+t+'"';s[e]=!0}return s}function p(t){for(var e="",i=0;i<r.length;i++)t[r[i]]&&(e+=r[i]+"-");return e+=a[t.code]}function f(t,e){for(var i=0;i<e.length;i++){var n=e[i];if(n&&(t=t[n]),!t)break}return t}var d=[];function m(t,e,i){for(var n=t.split("."),r=u,s=0,o=(n=n.concat(e)).length;s<o;s++){var a=n[s];if(a&&(r=r[a]||(r[a]={}),i&&i._keymage.preventDefault&&(r.preventDefault=!0),s===o-1))return r.handlers||(r.handlers=[])}}function g(t,e,i){m(t,e,i).push(i)}function y(t,e,i){var n=m(t,e),r=n.indexOf(i);~r&&n.splice(r,1)}function v(t,e,i,n){if(void 0===e&&void 0===i)return function(e,i){return b(t,e,i)};"function"==typeof e&&(n=i,i=e,e=t,t="");var r=function(t){for(var e=[],i=t.split(" "),n=0;n<i.length;n++){var r=_(i[n]);r=p(r),e.push(r)}return e.original=t,e}(e);return[t,r,i,n]}function b(t,e,i,n){var r=v(t,e,i,n);return i=r[2],n=r[3],i._keymage=n||{},i._keymage.original=e,g.apply(null,r),function(){y.apply(null,r)}}return b.unbind=function(t,e,i){var n=v(t,e,i);y.apply(null,n)},b.parse=_,b.stringify=p,b.bindings=u,b.setScope=function(t){c=t||""},b.getScope=function(){return c},b.pushScope=function(t){return c=(c?c+".":"")+t},b.popScope=function(t){var e;return t?(c=c.replace(new RegExp("(^|\\.)"+t+"(\\.|$).*"),""),t):(e=c.lastIndexOf("."),t=c.slice(e+1),c=-1==e?"":c.slice(0,e),t)},b.version="1.1.3",window.addEventListener("keydown",(function(t){if(!~s.indexOf(t.keyCode)){var e=d.slice();e.push(function(t){for(var e={code:t.keyCode},n=0;n<i.length;n++){var r=i[n];t[r]&&(e[r.slice(0,r.length-3)]=!0)}return p(e)}(t));for(var n,r,o,a=c.split("."),h=a.length;h>=0;h--)if(r=f(u,a.slice(0,h))){n=!0;for(var l=0;l<e.length;l++){if(!r[o=e[l]]){n=!1;break}r=r[o]}if(n)break}var _=a.slice(0,h).join("."),m=r.preventDefault;if(n&&!r.handlers)return d=e,void(m&&t.preventDefault());if(n)for(h=0;h<r.handlers.length;h++){var g=r.handlers[h],y=g._keymage;(!1===g.call(y.context,t,{shortcut:y.original,scope:c,definitionScope:_})||m)&&t.preventDefault()}d=[]}}),!1),b}.call(e,i,e,t))||(t.exports=n)},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e,i){"use strict";function n(t){for(var e=arguments.length,i=Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+t+(i.length?" "+i.join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r(t){return!!t&&!!t[G]}function s(t){return!!t&&(function(t){if(!t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return!e||e===Object.prototype}(t)||Array.isArray(t)||!!t[B]||!!t.constructor[B]||_(t)||p(t))}function o(t){if(t&&t[G])return t[G].t}function a(t,e,i){void 0===i&&(i=!1),0===h(t)?(i?Object.keys:Q)(t).forEach((function(i){return e(i,t[i],t)})):t.forEach((function(i,n){return e(n,i,t)}))}function h(t){var e=t[G];return e?e.i>3?e.i-4:e.i:Array.isArray(t)?1:_(t)?2:p(t)?3:0}function l(t,e){return 2===h(t)?t.has(e):Object.prototype.hasOwnProperty.call(t,e)}function c(t,e){return 2===h(t)?t.get(e):t[e]}function u(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}function _(t){return z&&t instanceof Map}function p(t){return H&&t instanceof Set}function f(t){return t.o||t.t}function d(t,e){if(void 0===e&&(e=!1),Array.isArray(t))return t.slice();var i=Object.create(Object.getPrototypeOf(t));return a(t,(function(r){if(r!==G){var s=Object.getOwnPropertyDescriptor(t,r),o=s.value;s.get&&(e||n(1),o=s.get.call(t)),s.enumerable?i[r]=o:Object.defineProperty(i,r,{value:o,writable:!0,configurable:!0})}})),i}function m(t,e){r(t)||Object.isFrozen(t)||!s(t)||(h(t)>1&&(t.set=t.add=t.clear=t.delete=g),Object.freeze(t),e&&a(t,(function(t,e){return m(e,!0)}),!0))}function g(){n(2)}function y(t){var e=J[t];return e||n(19,t),e}function v(t,e){J[t]=e}function b(){return W}function w(t,e){e&&(y("Patches"),t.u=[],t.s=[],t.v=e)}function E(t){C(t),t.p.forEach(x),t.p=null}function C(t){t===W&&(W=t.l)}function T(t){return W={p:[],l:W,h:t,m:!0,_:0}}function x(t){var e=t[G];0===e.i||1===e.i?e.j():e.O=!0}function S(t,e){e._=e.p.length;var i=e.p[0],r=void 0!==t&&t!==i;return e.h.g||y("ES5").S(e,t,r),r?(i[G].P&&(E(e),n(4)),s(t)&&(t=O(e,t),e.l||P(e,t)),e.u&&y("Patches").M(i[G],t,e.u,e.s)):t=O(e,i,[]),E(e),e.u&&e.v(e.u,e.s),t!==X?t:void 0}function O(t,e,i){if(Object.isFrozen(e))return e;var n=e[G];if(!n)return a(e,(function(r,s){return M(t,n,e,r,s,i)}),!0),e;if(n.A!==t)return e;if(!n.P)return P(t,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var r=4===n.i||5===n.i?n.o=d(n.k,!0):n.o;a(r,(function(e,s){return M(t,n,r,e,s,i)})),P(t,r,!1),i&&t.u&&y("Patches").R(n,i,t.u,t.s)}return n.o}function M(t,e,i,n,o,a){if(r(o)){var _=O(t,o,a&&e&&3!==e.i&&!l(e.D,n)?a.concat(n):void 0);if(f=n,d=_,2===(m=h(p=i))?p.set(f,d):3===m?(p.delete(f),p.add(d)):p[f]=d,!r(_))return;t.m=!1}var p,f,d,m;if((!e||!u(o,c(e.t,n)))&&s(o)){if(!t.h.N&&t._<1)return;O(t,o),e&&e.A.l||P(t,o)}}function P(t,e,i){void 0===i&&(i=!1),t.h.N&&t.m&&m(e,i)}function k(t,e){var i=t[G],n=Reflect.getOwnPropertyDescriptor(i?f(i):t,e);return n&&n.value}function R(t){if(!t.P){if(t.P=!0,0===t.i||1===t.i){var e=t.o=d(t.t);a(t.p,(function(t,i){e[t]=i})),t.p=void 0}t.l&&R(t.l)}}function A(t){t.o||(t.o=d(t.t))}function D(t,e,i){var n=_(e)?y("MapSet").T(e,i):p(e)?y("MapSet").F(e,i):t.g?function(t,e){var i=Array.isArray(t),n={i:i?1:0,A:e?e.A:b(),P:!1,I:!1,D:{},l:e,t:t,k:null,p:{},o:null,j:null,C:!1},r=n,s=Z;i&&(r=[n],s=tt);var o=Proxy.revocable(r,s),a=o.revoke,h=o.proxy;return n.k=h,n.j=a,h}(e,i):y("ES5").J(e,i);return(i?i.A:b()).p.push(n),n}function V(t,e){t.g?R(e):y("ES5").K(e)}function N(){function t(t,e){var i=t[G];if(i&&!i.$){i.$=!0;var n=t[e];return i.$=!1,n}return t[e]}function e(t){t.P||(t.P=!0,t.l&&e(t.l))}function i(t){t.o||(t.o=o(t.t))}function o(t){var e=t&&t[G];if(e){e.$=!0;var i=d(e.k,!0);return e.$=!1,i}return d(t)}function h(t){for(var i=t.length-1;i>=0;i--){var n=t[i][G];if(!n.P)switch(n.i){case 5:_(n)&&e(n);break;case 4:c(n)&&e(n)}}}function c(t){for(var e=t.t,i=t.k,n=Object.keys(i),r=n.length-1;r>=0;r--){var s=n[r],o=e[s];if(void 0===o&&!l(e,s))return!0;var a=i[s],h=a&&a[G];if(h?h.t!==o:!u(a,o))return!0}return n.length!==Object.keys(e).length}function _(t){var e=t.k;if(e.length!==t.t.length)return!0;var i=Object.getOwnPropertyDescriptor(e,e.length-1);return!(!i||i.get)}function p(t){t.O&&n(3,JSON.stringify(f(t)))}var m={};v("ES5",{J:function(n,r){var h=Array.isArray(n),l=o(n);a(l,(function(r){!function(n,r,o){var a=m[r];a?a.enumerable=o:m[r]=a={enumerable:o,get:function(){return function(e,n){p(e);var r=t(f(e),n);return e.$?r:r===t(e.t,n)&&s(r)?(i(e),e.o[n]=D(e.A.h,r,e)):r}(this[G],r)},set:function(n){!function(n,r,s){if(p(n),n.D[r]=!0,!n.P){if(u(s,t(f(n),r)))return;e(n),i(n)}n.o[r]=s}(this[G],r,n)}},Object.defineProperty(n,r,a)}(l,r,h||function(t,e){var i=Object.getOwnPropertyDescriptor(t,e);return!(!i||!i.enumerable)}(n,r))}));var c={i:h?5:4,A:r?r.A:b(),P:!1,$:!1,I:!1,D:{},l:r,t:n,k:l,o:null,O:!1,C:!1};return Object.defineProperty(l,G,{value:c,writable:!0}),l},K:e,S:function(t,i,n){t.p.forEach((function(t){t[G].$=!0})),n?r(i)&&i[G].A===t&&h(t.p):(t.u&&function t(i){if(i&&"object"==typeof i){var n=i[G];if(n){var r=n.t,s=n.k,o=n.D,h=n.i;if(4===h)a(s,(function(i){i!==G&&(void 0!==r[i]||l(r,i)?o[i]||t(s[i]):(o[i]=!0,e(n)))})),a(r,(function(t){void 0!==s[t]||l(s,t)||(o[t]=!1,e(n))}));else if(5===h){if(_(n)&&(e(n),o.length=!0),s.length<r.length)for(var c=s.length;c<r.length;c++)o[c]=!1;else for(var u=r.length;u<s.length;u++)o[u]=!0;for(var p=Math.min(s.length,r.length),f=0;f<p;f++)void 0===o[f]&&t(s[f])}}}}(t.p[0]),h(t.p))}})}function K(){function t(e){if(!e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(t);if(_(e))return new Map(Array.from(e.entries()).map((function(e){return[e[0],t(e[1])]})));if(p(e))return new Set(Array.from(e).map(t));var i=Object.create(Object.getPrototypeOf(e));for(var n in e)i[n]=t(e[n]);return i}function e(e){return r(e)?t(e):e}var i="add";v("Patches",{U:function(e,r){return r.forEach((function(r){for(var s=r.path,o=r.op,a=e,l=0;l<s.length-1;l++)"object"!=typeof(a=c(a,s[l]))&&n(15,s.join("/"));var u=h(a),_=t(r.value),p=s[s.length-1];switch(o){case"replace":switch(u){case 2:return a.set(p,_);case 3:n(16);default:return a[p]=_}case i:switch(u){case 1:return a.splice(p,0,_);case 2:return a.set(p,_);case 3:return a.add(_);default:return a[p]=_}case"remove":switch(u){case 1:return a.splice(p,1);case 2:return a.delete(p);case 3:return a.delete(r.value);default:return delete a[p]}default:n(17,o)}})),e},R:function(t,n,r,s){switch(t.i){case 0:case 4:case 2:return function(t,n,r,s){var o=t.t,h=t.o;a(t.D,(function(t,a){var u=c(o,t),_=c(h,t),p=a?l(o,t)?"replace":i:"remove";if(u!==_||"replace"!==p){var f=n.concat(t);r.push("remove"===p?{op:p,path:f}:{op:p,path:f,value:_}),s.push(p===i?{op:"remove",path:f}:"remove"===p?{op:i,path:f,value:e(u)}:{op:"replace",path:f,value:e(u)})}}))}(t,n,r,s);case 5:case 1:return function(t,n,r,s){var o=t.t,a=t.D,h=t.o;if(h.length<o.length){var l=[h,o];o=l[0],h=l[1];var c=[s,r];r=c[0],s=c[1]}for(var u=h.length-o.length,_=0;o[_]===h[_]&&_<o.length;)++_;for(var p=o.length;p>_&&o[p-1]===h[p+u-1];)--p;for(var f=_;f<p;++f)if(a[f]&&h[f]!==o[f]){var d=n.concat([f]);r.push({op:"replace",path:d,value:e(h[f])}),s.push({op:"replace",path:d,value:e(o[f])})}for(var m=r.length,g=p+u-1;g>=p;--g){var y=n.concat([g]);r[m+g-p]={op:i,path:y,value:e(h[g])},s.push({op:"remove",path:y})}}(t,n,r,s);case 3:return function(t,e,n,r){var s=t.t,o=t.o,a=0;s.forEach((function(t){if(!o.has(t)){var s=e.concat([a]);n.push({op:"remove",path:s,value:t}),r.unshift({op:i,path:s,value:t})}a++})),a=0,o.forEach((function(t){if(!s.has(t)){var o=e.concat([a]);n.push({op:i,path:o,value:t}),r.unshift({op:"remove",path:o,value:t})}a++}))}(t,n,r,s)}},M:function(t,e,i,n){i.push({op:"replace",path:[],value:e}),n.push({op:"replace",path:[],value:t.t})}})}function I(){function t(t,e){function i(){this.constructor=t}o(t,e),t.prototype=(i.prototype=e.prototype,new i)}function e(t){t.o||(t.D=new Map,t.o=new Map(t.t))}function i(t){t.o||(t.o=new Set,t.t.forEach((function(e){if(s(e)){var i=D(t.A.h,e,t);t.p.set(e,i),t.o.add(i)}else t.o.add(e)})))}function r(t){t.O&&n(3,JSON.stringify(f(t)))}var o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},a=function(){function i(t,e){return this[G]={i:2,l:e,A:e?e.A:b(),P:!1,I:!1,o:void 0,D:void 0,t:t,k:this,C:!1,O:!1},this}t(i,Map);var n=i.prototype;return Object.defineProperty(n,"size",{get:function(){return f(this[G]).size}}),n.has=function(t){return f(this[G]).has(t)},n.set=function(t,i){var n=this[G];return r(n),f(n).get(t)!==i&&(e(n),V(n.A.h,n),n.D.set(t,!0),n.o.set(t,i),n.D.set(t,!0)),this},n.delete=function(t){if(!this.has(t))return!1;var i=this[G];return r(i),e(i),V(i.A.h,i),i.D.set(t,!1),i.o.delete(t),!0},n.clear=function(){var t=this[G];return r(t),e(t),V(t.A.h,t),t.D=new Map,t.o.clear()},n.forEach=function(t,e){var i=this;f(this[G]).forEach((function(n,r){t.call(e,i.get(r),r,i)}))},n.get=function(t){var i=this[G];r(i);var n=f(i).get(t);if(i.I||!s(n))return n;if(n!==i.t.get(t))return n;var o=D(i.A.h,n,i);return e(i),i.o.set(t,o),o},n.keys=function(){return f(this[G]).keys()},n.values=function(){var t,e=this,i=this.keys();return(t={})[$]=function(){return e.values()},t.next=function(){var t=i.next();return t.done?t:{done:!1,value:e.get(t.value)}},t},n.entries=function(){var t,e=this,i=this.keys();return(t={})[$]=function(){return e.entries()},t.next=function(){var t=i.next();if(t.done)return t;var n=e.get(t.value);return{done:!1,value:[t.value,n]}},t},n[$]=function(){return this.entries()},i}(),h=function(){function e(t,e){return this[G]={i:3,l:e,A:e?e.A:b(),P:!1,I:!1,o:void 0,t:t,k:this,p:new Map,O:!1,C:!1},this}t(e,Set);var n=e.prototype;return Object.defineProperty(n,"size",{get:function(){return f(this[G]).size}}),n.has=function(t){var e=this[G];return r(e),e.o?!!e.o.has(t)||!(!e.p.has(t)||!e.o.has(e.p.get(t))):e.t.has(t)},n.add=function(t){var e=this[G];return r(e),e.o?e.o.add(t):e.t.has(t)||(i(e),V(e.A.h,e),e.o.add(t)),this},n.delete=function(t){if(!this.has(t))return!1;var e=this[G];return r(e),i(e),V(e.A.h,e),e.o.delete(t)||!!e.p.has(t)&&e.o.delete(e.p.get(t))},n.clear=function(){var t=this[G];return r(t),i(t),V(t.A.h,t),t.o.clear()},n.values=function(){var t=this[G];return r(t),i(t),t.o.values()},n.entries=function(){var t=this[G];return r(t),i(t),t.o.entries()},n.keys=function(){return this.values()},n[$]=function(){return this.values()},n.forEach=function(t,e){for(var i=this.values(),n=i.next();!n.done;)t.call(e,n.value,n.value,this),n=i.next()},e}();v("MapSet",{T:function(t,e){return new a(t,e)},F:function(t,e){return new h(t,e)}})}function j(){N(),I(),K()}function L(t){return t}function U(t){return t}i.r(e),i.d(e,"Immer",(function(){return et})),i.d(e,"applyPatches",(function(){return at})),i.d(e,"castDraft",(function(){return L})),i.d(e,"castImmutable",(function(){return U})),i.d(e,"createDraft",(function(){return ht})),i.d(e,"enableAllPlugins",(function(){return j})),i.d(e,"enableES5",(function(){return N})),i.d(e,"enableMapSet",(function(){return I})),i.d(e,"enablePatches",(function(){return K})),i.d(e,"finishDraft",(function(){return lt})),i.d(e,"immerable",(function(){return B})),i.d(e,"isDraft",(function(){return r})),i.d(e,"isDraftable",(function(){return s})),i.d(e,"nothing",(function(){return X})),i.d(e,"original",(function(){return o})),i.d(e,"produce",(function(){return nt})),i.d(e,"produceWithPatches",(function(){return rt})),i.d(e,"setAutoFreeze",(function(){return st})),i.d(e,"setUseProxies",(function(){return ot}));var q,W,F="undefined"!=typeof Symbol,z="undefined"!=typeof Map,H="undefined"!=typeof Set,Y="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,X=F?Symbol("immer-nothing"):((q={})["immer-nothing"]=!0,q),B=F?Symbol("immer-draftable"):"__$immer_draftable",G=F?Symbol("immer-state"):"__$immer_state",$=F?Symbol.iterator:"@@iterator",Q="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Object.getOwnPropertyNames,J={},Z={get:function(t,e){if(e===G)return t;var i=t.p;if(!t.P&&l(i,e))return i[e];var n=f(t)[e];if(t.I||!s(n))return n;if(t.P){if(n!==k(t.t,e))return n;i=t.o}return i[e]=D(t.A.h,n,t)},has:function(t,e){return e in f(t)},ownKeys:function(t){return Reflect.ownKeys(f(t))},set:function(t,e,i){if(!t.P){var n=k(t.t,e);if(i?u(n,i)||i===t.p[e]:u(n,i)&&e in t.t)return!0;A(t),R(t)}return t.D[e]=!0,t.o[e]=i,!0},deleteProperty:function(t,e){return void 0!==k(t.t,e)||e in t.t?(t.D[e]=!1,A(t),R(t)):t.D[e]&&delete t.D[e],t.o&&delete t.o[e],!0},getOwnPropertyDescriptor:function(t,e){var i=f(t),n=Reflect.getOwnPropertyDescriptor(i,e);return n&&(n.writable=!0,n.configurable=1!==t.i||"length"!==e),n},defineProperty:function(){n(11)},getPrototypeOf:function(t){return Object.getPrototypeOf(t.t)},setPrototypeOf:function(){n(12)}},tt={};a(Z,(function(t,e){tt[t]=function(){return arguments[0]=arguments[0][0],e.apply(this,arguments)}})),tt.deleteProperty=function(t,e){return Z.deleteProperty.call(this,t[0],e)},tt.set=function(t,e,i){return Z.set.call(this,t[0],e,i,t[0])};var et=function(){function t(t){this.g=Y,this.N=!1,"boolean"==typeof(null==t?void 0:t.useProxies)&&this.setUseProxies(t.useProxies),"boolean"==typeof(null==t?void 0:t.autoFreeze)&&this.setAutoFreeze(t.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var e=t.prototype;return e.produce=function(t,e,i){if("function"==typeof t&&"function"!=typeof e){var r=e;e=t;var o=this;return function(t){var i=this;void 0===t&&(t=r);for(var n=arguments.length,s=Array(n>1?n-1:0),a=1;a<n;a++)s[a-1]=arguments[a];return o.produce(t,(function(t){var n;return(n=e).call.apply(n,[i,t].concat(s))}))}}var a;if("function"!=typeof e&&n(6),void 0!==i&&"function"!=typeof i&&n(7),s(t)){var h=T(this),l=D(this,t,void 0),c=!0;try{a=e(l),c=!1}finally{c?E(h):C(h)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(t){return w(h,i),S(t,h)}),(function(t){throw E(h),t})):(w(h,i),S(a,h))}if((a=e(t))!==X)return void 0===a&&(a=t),this.N&&m(a,!0),a},e.produceWithPatches=function(t,e){var i,n,r=this;return"function"==typeof t?function(e){for(var i=arguments.length,n=Array(i>1?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];return r.produceWithPatches(e,(function(e){return t.apply(void 0,[e].concat(n))}))}:[this.produce(t,e,(function(t,e){i=t,n=e})),i,n]},e.createDraft=function(t){s(t)||n(8);var e=T(this),i=D(this,t,void 0);return i[G].C=!0,C(e),i},e.finishDraft=function(t,e){var i=(t&&t[G]).A;return w(i,e),S(void 0,i)},e.setAutoFreeze=function(t){this.N=t},e.setUseProxies=function(t){Y||n(20),this.g=t},e.applyPatches=function(t,e){var i;for(i=e.length-1;i>=0;i--){var n=e[i];if(0===n.path.length&&"replace"===n.op){t=n.value;break}}var s=y("Patches").U;return r(t)?s(t,e):this.produce(t,(function(t){return s(t,e.slice(i+1))}))},t}(),it=new et,nt=it.produce,rt=it.produceWithPatches.bind(it),st=it.setAutoFreeze.bind(it),ot=it.setUseProxies.bind(it),at=it.applyPatches.bind(it),ht=it.createDraft.bind(it),lt=it.finishDraft.bind(it);e.default=nt},function(t,e,i){var n=i(20),r=i(6);t.exports=function(t,e,i){var s=!0,o=!0;if("function"!=typeof t)throw new TypeError("Expected a function");return r(i)&&(s="leading"in i?!!i.leading:s,o="trailing"in i?!!i.trailing:o),n(t,e,{leading:s,maxWait:e,trailing:o})}},function(t,e,i){var n=i(6),r=i(21),s=i(24),o=Math.max,a=Math.min;t.exports=function(t,e,i){var h,l,c,u,_,p,f=0,d=!1,m=!1,g=!0;if("function"!=typeof t)throw new TypeError("Expected a function");function y(e){var i=h,n=l;return h=l=void 0,f=e,u=t.apply(n,i)}function v(t){return f=t,_=setTimeout(w,e),d?y(t):u}function b(t){var i=t-p;return void 0===p||i>=e||i<0||m&&t-f>=c}function w(){var t=r();if(b(t))return E(t);_=setTimeout(w,function(t){var i=e-(t-p);return m?a(i,c-(t-f)):i}(t))}function E(t){return _=void 0,g&&h?y(t):(h=l=void 0,u)}function C(){var t=r(),i=b(t);if(h=arguments,l=this,p=t,i){if(void 0===_)return v(p);if(m)return clearTimeout(_),_=setTimeout(w,e),y(p)}return void 0===_&&(_=setTimeout(w,e)),u}return e=s(e)||0,n(i)&&(d=!!i.leading,c=(m="maxWait"in i)?o(s(i.maxWait)||0,e):c,g="trailing"in i?!!i.trailing:g),C.cancel=function(){void 0!==_&&clearTimeout(_),f=0,h=p=l=_=void 0},C.flush=function(){return void 0===_?u:E(r())},C}},function(t,e,i){var n=i(10);t.exports=function(){return n.Date.now()}},function(t,e,i){(function(e){var i="object"==typeof e&&e&&e.Object===Object&&e;t.exports=i}).call(this,i(23))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){var n=i(6),r=i(25),s=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,h=/^0o[0-7]+$/i,l=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(r(t))return NaN;if(n(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=n(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(s,"");var i=a.test(t);return i||h.test(t)?l(t.slice(2),i?2:8):o.test(t)?NaN:+t}},function(t,e,i){var n=i(26),r=i(29);t.exports=function(t){return"symbol"==typeof t||r(t)&&"[object Symbol]"==n(t)}},function(t,e,i){var n=i(11),r=i(27),s=i(28),o=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":o&&o in Object(t)?r(t):s(t)}},function(t,e,i){var n=i(11),r=Object.prototype,s=r.hasOwnProperty,o=r.toString,a=n?n.toStringTag:void 0;t.exports=function(t){var e=s.call(t,a),i=t[a];try{t[a]=void 0;var n=!0}catch(t){}var r=o.call(t);return n&&(e?t[a]=i:delete t[a]),r}},function(t,e){var i=Object.prototype.toString;t.exports=function(t){return i.call(t)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e){var i,n,r=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(i===setTimeout)return setTimeout(t,0);if((i===s||!i)&&setTimeout)return i=setTimeout,setTimeout(t,0);try{return i(t,0)}catch(e){try{return i.call(null,t,0)}catch(e){return i.call(this,t,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:s}catch(t){i=s}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var h,l=[],c=!1,u=-1;function _(){c&&h&&(c=!1,h.length?l=h.concat(l):u=-1,l.length&&p())}function p(){if(!c){var t=a(_);c=!0;for(var e=l.length;e;){for(h=l,l=[];++u<e;)h&&h[u].run();u=-1,e=l.length}h=null,c=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function f(t,e){this.fun=t,this.array=e}function d(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];l.push(new f(t,e)),1!==l.length||c||a(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=d,r.addListener=d,r.once=d,r.off=d,r.removeListener=d,r.removeAllListeners=d,r.emit=d,r.prependListener=d,r.prependOnceListener=d,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=n(i(32));e.RenderingSystem=r.default},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(5),r=i(14),s=i(4);class o extends n.System{execute(t,e){this.queries.renderables.results.forEach(t=>{const e=t.getComponent(r.Position),i=t.getComponent(r.Renderable);s.display.draw(e.x,e.y,i.glyph,i.fg,i.bg)})}}o.queries={renderables:{components:[r.Position,r.Renderable]}},e.default=o},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(5);class r extends n.Component{constructor(){super(),this.glyph=null,this.fg=null,this.bg=null}}e.default=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(5);class r extends n.Component{constructor(){super(),this.x=0,this.y=0}}e.default=r},function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=n(i(36));e.createPlayer=r.default},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(14);e.default=(t,e,i)=>t.createEntity().addComponent(n.Position,{x:e,y:i}).addComponent(n.Renderable,{glyph:"@",fg:"#ff0"})},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/ibm_vga8.eot"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/ibm_vga8.ttf"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/ibm_vga8.woff"},function(t,e,i){"use strict";i.r(e),e.default=i.p+"fonts/ibm_vga8.woff2"},function(t,e,i){"use strict";i.r(e),i.d(e,"RNG",(function(){return r.a})),i.d(e,"Display",(function(){return D})),i.d(e,"StringGenerator",(function(){return V})),i.d(e,"EventQueue",(function(){return N})),i.d(e,"Scheduler",(function(){return I})),i.d(e,"FOV",(function(){return U})),i.d(e,"Map",(function(){return G})),i.d(e,"Noise",(function(){return J})),i.d(e,"Path",(function(){return tt})),i.d(e,"Engine",(function(){return et})),i.d(e,"Lighting",(function(){return it})),i.d(e,"DEFAULT_WIDTH",(function(){return O})),i.d(e,"DEFAULT_HEIGHT",(function(){return M})),i.d(e,"DIRS",(function(){return P})),i.d(e,"KEYS",(function(){return k})),i.d(e,"Util",(function(){return nt})),i.d(e,"Color",(function(){return rt})),i.d(e,"Text",(function(){return st}));var n={};i.r(n),i.d(n,"TYPE_TEXT",(function(){return b})),i.d(n,"TYPE_NEWLINE",(function(){return w})),i.d(n,"TYPE_FG",(function(){return E})),i.d(n,"TYPE_BG",(function(){return C})),i.d(n,"measure",(function(){return T})),i.d(n,"tokenize",(function(){return x}));var r=i(0),s=i(3);class o extends s.a{constructor(){super(),this._ctx=document.createElement("canvas").getContext("2d")}schedule(t){requestAnimationFrame(t)}getContainer(){return this._ctx.canvas}setOptions(t){super.setOptions(t);const e=`${t.fontStyle?t.fontStyle+" ":""} ${t.fontSize}px ${t.fontFamily}`;this._ctx.font=e,this._updateSize(),this._ctx.font=e,this._ctx.textAlign="center",this._ctx.textBaseline="middle"}clear(){this._ctx.fillStyle=this._options.bg,this._ctx.fillRect(0,0,this._ctx.canvas.width,this._ctx.canvas.height)}eventToPosition(t,e){let i=this._ctx.canvas,n=i.getBoundingClientRect();return t-=n.left,e-=n.top,t*=i.width/n.width,e*=i.height/n.height,t<0||e<0||t>=i.width||e>=i.height?[-1,-1]:this._normalizedEventToPosition(t,e)}}var a=i(1);class h extends o{constructor(){super(),this._spacingX=0,this._spacingY=0,this._hexSize=0}draw(t,e){let[i,n,r,s,o]=t,a=[(i+1)*this._spacingX,n*this._spacingY+this._hexSize];if(this._options.transpose&&a.reverse(),e&&(this._ctx.fillStyle=o,this._fill(a[0],a[1])),!r)return;this._ctx.fillStyle=s;let h=[].concat(r);for(let t=0;t<h.length;t++)this._ctx.fillText(h[t],a[0],Math.ceil(a[1]))}computeSize(t,e){return this._options.transpose&&(t+=e,t-=e=t-e),[Math.floor(t/this._spacingX)-1,Math.floor((e-2*this._hexSize)/this._spacingY+1)]}computeFontSize(t,e){this._options.transpose&&(t+=e,t-=e=t-e);let i=2*t/((this._options.width+1)*Math.sqrt(3))-1,n=e/(2+1.5*(this._options.height-1)),r=Math.min(i,n),s=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let o=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=s;let a=o/100;r=Math.floor(r)+1;let h=2*r/(this._options.spacing*(1+a/Math.sqrt(3)));return Math.ceil(h)-1}_normalizedEventToPosition(t,e){let i;this._options.transpose?(t+=e,t-=e=t-e,i=this._ctx.canvas.width):i=this._ctx.canvas.height;let n=i/this._options.height;return e=Math.floor(e/n),Object(a.mod)(e,2)?(t-=this._spacingX,t=1+2*Math.floor(t/(2*this._spacingX))):t=2*Math.floor(t/(2*this._spacingX)),[t,e]}_fill(t,e){let i=this._hexSize,n=this._options.border;const r=this._ctx;r.beginPath(),this._options.transpose?(r.moveTo(t-i+n,e),r.lineTo(t-i/2+n,e+this._spacingX-n),r.lineTo(t+i/2-n,e+this._spacingX-n),r.lineTo(t+i-n,e),r.lineTo(t+i/2-n,e-this._spacingX+n),r.lineTo(t-i/2+n,e-this._spacingX+n),r.lineTo(t-i+n,e)):(r.moveTo(t,e-i+n),r.lineTo(t+this._spacingX-n,e-i/2+n),r.lineTo(t+this._spacingX-n,e+i/2-n),r.lineTo(t,e+i-n),r.lineTo(t-this._spacingX+n,e+i/2-n),r.lineTo(t-this._spacingX+n,e-i/2+n),r.lineTo(t,e-i+n)),r.fill()}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);let i,n;this._hexSize=Math.floor(t.spacing*(t.fontSize+e/Math.sqrt(3))/2),this._spacingX=this._hexSize*Math.sqrt(3)/2,this._spacingY=1.5*this._hexSize,t.transpose?(i="height",n="width"):(i="width",n="height"),this._ctx.canvas[i]=Math.ceil((t.width+1)*this._spacingX),this._ctx.canvas[n]=Math.ceil((t.height-1)*this._spacingY+2*this._hexSize)}}class l extends o{constructor(){super(),this._spacingX=0,this._spacingY=0,this._canvasCache={}}setOptions(t){super.setOptions(t),this._canvasCache={}}draw(t,e){l.cache?this._drawWithCache(t):this._drawNoCache(t,e)}_drawWithCache(t){let e,[i,n,r,s,o]=t,a=""+r+s+o;if(a in this._canvasCache)e=this._canvasCache[a];else{let t=this._options.border;e=document.createElement("canvas");let i=e.getContext("2d");if(e.width=this._spacingX,e.height=this._spacingY,i.fillStyle=o,i.fillRect(t,t,e.width-t,e.height-t),r){i.fillStyle=s,i.font=this._ctx.font,i.textAlign="center",i.textBaseline="middle";let t=[].concat(r);for(let e=0;e<t.length;e++)i.fillText(t[e],this._spacingX/2,Math.ceil(this._spacingY/2))}this._canvasCache[a]=e}this._ctx.drawImage(e,i*this._spacingX,n*this._spacingY)}_drawNoCache(t,e){let[i,n,r,s,o]=t;if(e){let t=this._options.border;this._ctx.fillStyle=o,this._ctx.fillRect(i*this._spacingX+t,n*this._spacingY+t,this._spacingX-t,this._spacingY-t)}if(!r)return;this._ctx.fillStyle=s;let a=[].concat(r);for(let t=0;t<a.length;t++)this._ctx.fillText(a[t],(i+.5)*this._spacingX,Math.ceil((n+.5)*this._spacingY))}computeSize(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}computeFontSize(t,e){let i=Math.floor(t/this._options.width),n=Math.floor(e/this._options.height),r=this._ctx.font;this._ctx.font="100px "+this._options.fontFamily;let s=Math.ceil(this._ctx.measureText("W").width);this._ctx.font=r;let o=s/100*n/i;return o>1&&(n=Math.floor(n/o)),Math.floor(n/this._options.spacing)}_normalizedEventToPosition(t,e){return[Math.floor(t/this._spacingX),Math.floor(e/this._spacingY)]}_updateSize(){const t=this._options,e=Math.ceil(this._ctx.measureText("W").width);this._spacingX=Math.ceil(t.spacing*e),this._spacingY=Math.ceil(t.spacing*t.fontSize),t.forceSquareRatio&&(this._spacingX=this._spacingY=Math.max(this._spacingX,this._spacingY)),this._ctx.canvas.width=t.width*this._spacingX,this._ctx.canvas.height=t.height*this._spacingY}}l.cache=!1;class c extends o{constructor(){super(),this._colorCanvas=document.createElement("canvas")}draw(t,e){let[i,n,r,s,o]=t,a=this._options.tileWidth,h=this._options.tileHeight;if(e&&(this._options.tileColorize?this._ctx.clearRect(i*a,n*h,a,h):(this._ctx.fillStyle=o,this._ctx.fillRect(i*a,n*h,a,h))),!r)return;let l=[].concat(r),c=[].concat(s),u=[].concat(o);for(let t=0;t<l.length;t++){let e=this._options.tileMap[l[t]];if(!e)throw new Error(`Char "${l[t]}" not found in tileMap`);if(this._options.tileColorize){let r=this._colorCanvas,s=r.getContext("2d");s.globalCompositeOperation="source-over",s.clearRect(0,0,a,h);let o=c[t],l=u[t];s.drawImage(this._options.tileSet,e[0],e[1],a,h,0,0,a,h),"transparent"!=o&&(s.fillStyle=o,s.globalCompositeOperation="source-atop",s.fillRect(0,0,a,h)),"transparent"!=l&&(s.fillStyle=l,s.globalCompositeOperation="destination-over",s.fillRect(0,0,a,h)),this._ctx.drawImage(r,i*a,n*h,a,h)}else this._ctx.drawImage(this._options.tileSet,e[0],e[1],a,h,i*a,n*h,a,h)}}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._options;this._ctx.canvas.width=t.width*t.tileWidth,this._ctx.canvas.height=t.height*t.tileHeight,this._colorCanvas.width=t.tileWidth,this._colorCanvas.height=t.tileHeight}}var u=i(2);class _ extends s.a{static isSupported(){return!!document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0})}constructor(){super(),this._uniforms={};try{this._gl=this._initWebGL()}catch(t){alert(t.message)}}schedule(t){requestAnimationFrame(t)}getContainer(){return this._gl.canvas}setOptions(t){super.setOptions(t),this._updateSize();let e=this._options.tileSet;e&&"complete"in e&&!e.complete?e.addEventListener("load",()=>this._updateTexture(e)):this._updateTexture(e)}draw(t,e){const i=this._gl,n=this._options;let[r,s,o,a,h]=t,l=i.canvas.height-(s+1)*n.tileHeight;if(i.scissor(r*n.tileWidth,l,n.tileWidth,n.tileHeight),e&&(n.tileColorize?i.clearColor(0,0,0,0):i.clearColor(...g(h)),i.clear(i.COLOR_BUFFER_BIT)),!o)return;let c=[].concat(o),u=[].concat(h),_=[].concat(a);i.uniform2fv(this._uniforms.targetPosRel,[r,s]);for(let t=0;t<c.length;t++){let e=this._options.tileMap[c[t]];if(!e)throw new Error(`Char "${c[t]}" not found in tileMap`);i.uniform1f(this._uniforms.colorize,n.tileColorize?1:0),i.uniform2fv(this._uniforms.tilesetPosAbs,e),n.tileColorize&&(i.uniform4fv(this._uniforms.tint,g(_[t])),i.uniform4fv(this._uniforms.bg,g(u[t]))),i.drawArrays(i.TRIANGLE_STRIP,0,4)}}clear(){const t=this._gl;t.clearColor(...g(this._options.bg)),t.scissor(0,0,t.canvas.width,t.canvas.height),t.clear(t.COLOR_BUFFER_BIT)}computeSize(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}computeFontSize(){throw new Error("Tile backend does not understand font size")}eventToPosition(t,e){let i=this._gl.canvas,n=i.getBoundingClientRect();return t-=n.left,e-=n.top,t*=i.width/n.width,e*=i.height/n.height,t<0||e<0||t>=i.width||e>=i.height?[-1,-1]:this._normalizedEventToPosition(t,e)}_initWebGL(){let t=document.createElement("canvas").getContext("webgl2",{preserveDrawingBuffer:!0});window.gl=t;let e=function(t,e,i){const n=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(n)||"");const r=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(r,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r)||"");const s=t.createProgram();if(t.attachShader(s,n),t.attachShader(s,r),t.linkProgram(s),!t.getProgramParameter(s,t.LINK_STATUS))throw new Error(t.getProgramInfoLog(s)||"");return s}(t,f,d);return t.useProgram(e),function(t){const e=new Float32Array([0,0,1,0,0,1,1,1]),i=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.enableVertexAttribArray(0),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0)}(t),p.forEach(i=>this._uniforms[i]=t.getUniformLocation(e,i)),this._program=e,t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA),t.enable(t.SCISSOR_TEST),t}_normalizedEventToPosition(t,e){return[Math.floor(t/this._options.tileWidth),Math.floor(e/this._options.tileHeight)]}_updateSize(){const t=this._gl,e=this._options,i=[e.width*e.tileWidth,e.height*e.tileHeight];t.canvas.width=i[0],t.canvas.height=i[1],t.viewport(0,0,i[0],i[1]),t.uniform2fv(this._uniforms.tileSize,[e.tileWidth,e.tileHeight]),t.uniform2fv(this._uniforms.targetSize,i)}_updateTexture(t){!function(t,e){let i=t.createTexture();t.bindTexture(t.TEXTURE_2D,i),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,0),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e)}(this._gl,t)}}const p=["targetPosRel","tilesetPosAbs","tileSize","targetSize","colorize","bg","tint"],f="\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}".trim(),d="\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}".trim();let m={};function g(t){if(!(t in m)){let e;if("transparent"==t)e=[0,0,0,0];else if(t.indexOf("rgba")>-1){e=(t.match(/[\d.]+/g)||[]).map(Number);for(let t=0;t<3;t++)e[t]=e[t]/255}else e=u.fromString(t).map(t=>t/255),e.push(1);m[t]=e}return m[t]}var y=i(7);const v=/%([bc]){([^}]*)}/g,b=0,w=1,E=2,C=3;function T(t,e){let i={width:0,height:1},n=x(t,e),r=0;for(let t=0;t<n.length;t++){let e=n[t];switch(e.type){case b:r+=e.value.length;break;case w:i.height++,i.width=Math.max(i.width,r),r=0}}return i.width=Math.max(i.width,r),i}function x(t,e){let i=[],n=0;t.replace(v,(function(e,r,s,o){let a=t.substring(n,o);return a.length&&i.push({type:b,value:a}),i.push({type:"c"==r?E:C,value:s.trim()}),n=o+e.length,""}));let r=t.substring(n);return r.length&&i.push({type:b,value:r}),function(t,e){e||(e=1/0);let i=0,n=0,r=-1;for(;i<t.length;){let s=t[i];if(s.type==w&&(n=0,r=-1),s.type!=b){i++;continue}for(;0==n&&" "==s.value.charAt(0);)s.value=s.value.substring(1);let o=s.value.indexOf("\n");if(-1!=o){s.value=S(t,i,o,!0);let e=s.value.split("");for(;e.length&&" "==e[e.length-1];)e.pop();s.value=e.join("")}if(s.value.length){if(n+s.value.length>e){let o=-1;for(;;){let t=s.value.indexOf(" ",o+1);if(-1==t)break;if(n+t>e)break;o=t}if(-1!=o)s.value=S(t,i,o,!0);else if(-1!=r){let e=t[r],n=e.value.lastIndexOf(" ");e.value=S(t,r,n,!0),i=r}else s.value=S(t,i,e-n,!1)}else n+=s.value.length,-1!=s.value.indexOf(" ")&&(r=i);i++}else t.splice(i,1)}t.push({type:w});let s=null;for(let e=0;e<t.length;e++){let i=t[e];switch(i.type){case b:s=i;break;case w:if(s){let t=s.value.split("");for(;t.length&&" "==t[t.length-1];)t.pop();s.value=t.join("")}s=null}}return t.pop(),t}(i,e)}function S(t,e,i,n){let r={type:w},s={type:b,value:t[e].value.substring(i+(n?1:0))};return t.splice(e+1,0,r,s),t[e].value.substring(0,i)}let O=80,M=25;const P={4:[[0,-1],[1,0],[0,1],[-1,0]],8:[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]],6:[[-1,-1],[1,-1],[2,0],[1,1],[-1,1],[-2,0]]},k={VK_CANCEL:3,VK_HELP:6,VK_BACK_SPACE:8,VK_TAB:9,VK_CLEAR:12,VK_RETURN:13,VK_ENTER:14,VK_SHIFT:16,VK_CONTROL:17,VK_ALT:18,VK_PAUSE:19,VK_CAPS_LOCK:20,VK_ESCAPE:27,VK_SPACE:32,VK_PAGE_UP:33,VK_PAGE_DOWN:34,VK_END:35,VK_HOME:36,VK_LEFT:37,VK_UP:38,VK_RIGHT:39,VK_DOWN:40,VK_PRINTSCREEN:44,VK_INSERT:45,VK_DELETE:46,VK_0:48,VK_1:49,VK_2:50,VK_3:51,VK_4:52,VK_5:53,VK_6:54,VK_7:55,VK_8:56,VK_9:57,VK_COLON:58,VK_SEMICOLON:59,VK_LESS_THAN:60,VK_EQUALS:61,VK_GREATER_THAN:62,VK_QUESTION_MARK:63,VK_AT:64,VK_A:65,VK_B:66,VK_C:67,VK_D:68,VK_E:69,VK_F:70,VK_G:71,VK_H:72,VK_I:73,VK_J:74,VK_K:75,VK_L:76,VK_M:77,VK_N:78,VK_O:79,VK_P:80,VK_Q:81,VK_R:82,VK_S:83,VK_T:84,VK_U:85,VK_V:86,VK_W:87,VK_X:88,VK_Y:89,VK_Z:90,VK_CONTEXT_MENU:93,VK_NUMPAD0:96,VK_NUMPAD1:97,VK_NUMPAD2:98,VK_NUMPAD3:99,VK_NUMPAD4:100,VK_NUMPAD5:101,VK_NUMPAD6:102,VK_NUMPAD7:103,VK_NUMPAD8:104,VK_NUMPAD9:105,VK_MULTIPLY:106,VK_ADD:107,VK_SEPARATOR:108,VK_SUBTRACT:109,VK_DECIMAL:110,VK_DIVIDE:111,VK_F1:112,VK_F2:113,VK_F3:114,VK_F4:115,VK_F5:116,VK_F6:117,VK_F7:118,VK_F8:119,VK_F9:120,VK_F10:121,VK_F11:122,VK_F12:123,VK_F13:124,VK_F14:125,VK_F15:126,VK_F16:127,VK_F17:128,VK_F18:129,VK_F19:130,VK_F20:131,VK_F21:132,VK_F22:133,VK_F23:134,VK_F24:135,VK_NUM_LOCK:144,VK_SCROLL_LOCK:145,VK_CIRCUMFLEX:160,VK_EXCLAMATION:161,VK_DOUBLE_QUOTE:162,VK_HASH:163,VK_DOLLAR:164,VK_PERCENT:165,VK_AMPERSAND:166,VK_UNDERSCORE:167,VK_OPEN_PAREN:168,VK_CLOSE_PAREN:169,VK_ASTERISK:170,VK_PLUS:171,VK_PIPE:172,VK_HYPHEN_MINUS:173,VK_OPEN_CURLY_BRACKET:174,VK_CLOSE_CURLY_BRACKET:175,VK_TILDE:176,VK_COMMA:188,VK_PERIOD:190,VK_SLASH:191,VK_BACK_QUOTE:192,VK_OPEN_BRACKET:219,VK_BACK_SLASH:220,VK_CLOSE_BRACKET:221,VK_QUOTE:222,VK_META:224,VK_ALTGR:225,VK_WIN:91,VK_KANA:21,VK_HANGUL:21,VK_EISU:22,VK_JUNJA:23,VK_FINAL:24,VK_HANJA:25,VK_KANJI:25,VK_CONVERT:28,VK_NONCONVERT:29,VK_ACCEPT:30,VK_MODECHANGE:31,VK_SELECT:41,VK_PRINT:42,VK_EXECUTE:43,VK_SLEEP:95},R={hex:h,rect:l,tile:c,"tile-gl":_,term:y.a},A={width:O,height:M,transpose:!1,layout:"rect",fontSize:15,spacing:1,border:0,forceSquareRatio:!1,fontFamily:"monospace",fontStyle:"",fg:"#ccc",bg:"#000",tileWidth:32,tileHeight:32,tileMap:{},tileSet:null,tileColorize:!1};class D{constructor(t={}){this._data={},this._dirty=!1,this._options={},t=Object.assign({},A,t),this.setOptions(t),this.DEBUG=this.DEBUG.bind(this),this._tick=this._tick.bind(this),this._backend.schedule(this._tick)}DEBUG(t,e,i){let n=[this._options.bg,this._options.fg];this.draw(t,e,null,null,n[i%n.length])}clear(){this._data={},this._dirty=!0}setOptions(t){if(Object.assign(this._options,t),t.width||t.height||t.fontSize||t.fontFamily||t.spacing||t.layout){if(t.layout){let e=R[t.layout];this._backend=new e}this._backend.setOptions(this._options),this._dirty=!0}return this}getOptions(){return this._options}getContainer(){return this._backend.getContainer()}computeSize(t,e){return this._backend.computeSize(t,e)}computeFontSize(t,e){return this._backend.computeFontSize(t,e)}computeTileSize(t,e){return[Math.floor(t/this._options.width),Math.floor(e/this._options.height)]}eventToPosition(t){let e,i;return"touches"in t?(e=t.touches[0].clientX,i=t.touches[0].clientY):(e=t.clientX,i=t.clientY),this._backend.eventToPosition(e,i)}draw(t,e,i,n,r){n||(n=this._options.fg),r||(r=this._options.bg);let s=`${t},${e}`;this._data[s]=[t,e,i,n,r],!0!==this._dirty&&(this._dirty||(this._dirty={}),this._dirty[s]=!0)}drawText(t,e,i,n){let r=null,s=null,o=t,a=e,h=1;n||(n=this._options.width-t);let l=x(i,n);for(;l.length;){let e=l.shift();switch(e.type){case b:let i=!1,n=!1,l=!1,c=!1;for(let t=0;t<e.value.length;t++){let h=e.value.charCodeAt(t),u=e.value.charAt(t);l=h>65280&&h<65377||h>65500&&h<65512||h>65518,i=32==u.charCodeAt(0)||12288==u.charCodeAt(0),!c||l||i||o++,l&&!n&&o++,this.draw(o++,a,u,r,s),n=i,c=l}break;case E:r=e.value||null;break;case C:s=e.value||null;break;case w:o=t,a++,h++}}return h}_tick(){if(this._backend.schedule(this._tick),this._dirty){if(!0===this._dirty){this._backend.clear();for(let t in this._data)this._draw(t,!1)}else for(let t in this._dirty)this._draw(t,!0);this._dirty=!1}}_draw(t,e){let i=this._data[t];i[4]!=this._options.bg&&(e=!0),this._backend.draw(i,e)}}D.Rect=l,D.Hex=h,D.Tile=c,D.TileGL=_,D.Term=y.a;class V{constructor(t){this._options={words:!1,order:3,prior:.001},Object.assign(this._options,t),this._boundary=String.fromCharCode(0),this._suffix=this._boundary,this._prefix=[];for(let t=0;t<this._options.order;t++)this._prefix.push(this._boundary);this._priorValues={},this._priorValues[this._boundary]=this._options.prior,this._data={}}clear(){this._data={},this._priorValues={}}generate(){let t=[this._sample(this._prefix)];for(;t[t.length-1]!=this._boundary;)t.push(this._sample(t));return this._join(t.slice(0,-1))}observe(t){let e=this._split(t);for(let t=0;t<e.length;t++)this._priorValues[e[t]]=this._options.prior;e=this._prefix.concat(e).concat(this._suffix);for(let t=this._options.order;t<e.length;t++){let i=e.slice(t-this._options.order,t),n=e[t];for(let t=0;t<i.length;t++){let e=i.slice(t);this._observeEvent(e,n)}}}getStats(){let t=[],e=Object.keys(this._priorValues).length;e--,t.push("distinct samples: "+e);let i=Object.keys(this._data).length,n=0;for(let t in this._data)n+=Object.keys(this._data[t]).length;return t.push("dictionary size (contexts): "+i),t.push("dictionary size (events): "+n),t.join(", ")}_split(t){return t.split(this._options.words?/\s+/:"")}_join(t){return t.join(this._options.words?" ":"")}_observeEvent(t,e){let i=this._join(t);i in this._data||(this._data[i]={});let n=this._data[i];e in n||(n[e]=0),n[e]++}_sample(t){t=this._backoff(t);let e=this._join(t),i=this._data[e],n={};if(this._options.prior){for(let t in this._priorValues)n[t]=this._priorValues[t];for(let t in i)n[t]+=i[t]}else n=i;return r.a.getWeightedValue(n)}_backoff(t){for(t.length>this._options.order?t=t.slice(-this._options.order):t.length<this._options.order&&(t=this._prefix.slice(0,this._options.order-t.length).concat(t));!(this._join(t)in this._data)&&t.length>0;)t=t.slice(1);return t}}class N{constructor(){this._time=0,this._events=[],this._eventTimes=[]}getTime(){return this._time}clear(){return this._events=[],this._eventTimes=[],this}add(t,e){let i=this._events.length;for(let t=0;t<this._eventTimes.length;t++)if(this._eventTimes[t]>e){i=t;break}this._events.splice(i,0,t),this._eventTimes.splice(i,0,e)}get(){if(!this._events.length)return null;let t=this._eventTimes.splice(0,1)[0];if(t>0){this._time+=t;for(let e=0;e<this._eventTimes.length;e++)this._eventTimes[e]-=t}return this._events.splice(0,1)[0]}getEventTime(t){let e=this._events.indexOf(t);if(-1!=e)return this._eventTimes[e]}remove(t){let e=this._events.indexOf(t);return-1!=e&&(this._remove(e),!0)}_remove(t){this._events.splice(t,1),this._eventTimes.splice(t,1)}}class K{constructor(){this._queue=new N,this._repeat=[],this._current=null}getTime(){return this._queue.getTime()}add(t,e){return e&&this._repeat.push(t),this}getTimeOf(t){return this._queue.getEventTime(t)}clear(){return this._queue.clear(),this._repeat=[],this._current=null,this}remove(t){let e=this._queue.remove(t),i=this._repeat.indexOf(t);return-1!=i&&this._repeat.splice(i,1),this._current==t&&(this._current=null),e}next(){return this._current=this._queue.get(),this._current}}var I={Simple:class extends K{add(t,e){return this._queue.add(t,0),super.add(t,e)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,0),super.next()}},Speed:class extends K{add(t,e,i){return this._queue.add(t,void 0!==i?i:1/t.getSpeed()),super.add(t,e)}next(){return this._current&&-1!=this._repeat.indexOf(this._current)&&this._queue.add(this._current,1/this._current.getSpeed()),super.next()}},Action:class extends K{constructor(){super(),this._defaultDuration=1,this._duration=this._defaultDuration}add(t,e,i){return this._queue.add(t,i||this._defaultDuration),super.add(t,e)}clear(){return this._duration=this._defaultDuration,super.clear()}remove(t){return t==this._current&&(this._duration=this._defaultDuration),super.remove(t)}next(){return null!==this._current&&-1!=this._repeat.indexOf(this._current)&&(this._queue.add(this._current,this._duration||this._defaultDuration),this._duration=this._defaultDuration),super.next()}setDuration(t){return this._current&&(this._duration=t),this}}};class j{constructor(t,e={}){this._lightPasses=t,this._options=Object.assign({topology:8},e)}_getCircle(t,e,i){let n,r,s,o=[];switch(this._options.topology){case 4:r=1,s=[0,1],n=[P[8][7],P[8][1],P[8][3],P[8][5]];break;case 6:n=P[6],r=1,s=[-1,1];break;case 8:n=P[4],r=2,s=[-1,1];break;default:throw new Error("Incorrect topology for FOV computation")}let a=t+s[0]*i,h=e+s[1]*i;for(let t=0;t<n.length;t++)for(let e=0;e<i*r;e++)o.push([a,h]),a+=n[t][0],h+=n[t][1];return o}}const L=[[-1,0,0,1],[0,-1,1,0],[0,-1,-1,0],[-1,0,0,-1],[1,0,0,-1],[0,1,-1,0],[0,1,1,0],[1,0,0,1]];var U={DiscreteShadowcasting:class extends j{compute(t,e,i,n){if(n(t,e,0,1),!this._lightPasses(t,e))return;let r,s,o,a,h,l=[];for(let c=1;c<=i;c++){let i=this._getCircle(t,e,c),u=360/i.length;for(let t=0;t<i.length;t++)if(o=i[t][0],a=i[t][1],r=u*(t-.5),s=r+u,h=!this._lightPasses(o,a),this._visibleCoords(Math.floor(r),Math.ceil(s),h,l)&&n(o,a,c,1),2==l.length&&0==l[0]&&360==l[1])return}}_visibleCoords(t,e,i,n){if(t<0){let r=this._visibleCoords(0,e,i,n),s=this._visibleCoords(360+t,360,i,n);return r||s}let r=0;for(;r<n.length&&n[r]<t;)r++;if(r==n.length)return i&&n.push(t,e),!0;let s=0;if(r%2){for(;r<n.length&&n[r]<e;)r++,s++;return 0!=s&&(i&&(s%2?n.splice(r-s,s,e):n.splice(r-s,s)),!0)}for(;r<n.length&&n[r]<e;)r++,s++;return(t!=n[r-s]||1!=s)&&(i&&(s%2?n.splice(r-s,s,t):n.splice(r-s,s,t,e)),!0)}},PreciseShadowcasting:class extends j{compute(t,e,i,n){if(n(t,e,0,1),!this._lightPasses(t,e))return;let r,s,o,a,h,l,c=[];for(let u=1;u<=i;u++){let i=this._getCircle(t,e,u),_=i.length;for(let t=0;t<_;t++)if(r=i[t][0],s=i[t][1],a=[t?2*t-1:2*_-1,2*_],h=[2*t+1,2*_],o=!this._lightPasses(r,s),l=this._checkVisibility(a,h,o,c),l&&n(r,s,u,l),2==c.length&&0==c[0][0]&&c[1][0]==c[1][1])return}}_checkVisibility(t,e,i,n){if(t[0]>e[0]){return(this._checkVisibility(t,[t[1],t[1]],i,n)+this._checkVisibility([0,1],e,i,n))/2}let r=0,s=!1;for(;r<n.length;){let e=n[r],i=e[0]*t[1]-t[0]*e[1];if(i>=0){0!=i||r%2||(s=!0);break}r++}let o=n.length,a=!1;for(;o--;){let t=n[o],i=e[0]*t[1]-t[0]*e[1];if(i>=0){0==i&&o%2&&(a=!0);break}}let h,l=!0;if((r==o&&(s||a)||s&&a&&r+1==o&&o%2||r>o&&r%2)&&(l=!1),!l)return 0;let c=o-r+1;if(c%2)if(r%2){let t=n[r];h=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),i&&n.splice(r,c,e)}else{let e=n[o];h=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),i&&n.splice(r,c,t)}else{if(!(r%2))return i&&n.splice(r,c,t,e),1;{let t=n[r],e=n[o];h=(e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]),i&&n.splice(r,c)}}return h/((e[0]*t[1]-t[0]*e[1])/(t[1]*e[1]))}},RecursiveShadowcasting:class extends j{compute(t,e,i,n){n(t,e,0,1);for(let r=0;r<L.length;r++)this._renderOctant(t,e,L[r],i,n)}compute180(t,e,i,n,r){r(t,e,0,1);let s=(n-1+8)%8,o=(n-2+8)%8,a=(n+1+8)%8;this._renderOctant(t,e,L[o],i,r),this._renderOctant(t,e,L[s],i,r),this._renderOctant(t,e,L[n],i,r),this._renderOctant(t,e,L[a],i,r)}compute90(t,e,i,n,r){r(t,e,0,1);let s=(n-1+8)%8;this._renderOctant(t,e,L[n],i,r),this._renderOctant(t,e,L[s],i,r)}_renderOctant(t,e,i,n,r){this._castVisibility(t,e,1,1,0,n+1,i[0],i[1],i[2],i[3],r)}_castVisibility(t,e,i,n,r,s,o,a,h,l,c){if(!(n<r))for(let u=i;u<=s;u++){let i=-u-1,_=-u,p=!1,f=0;for(;i<=0;){i+=1;let d=t+i*o+_*a,m=e+i*h+_*l,g=(i-.5)/(_+.5),y=(i+.5)/(_-.5);if(!(y>n)){if(g<r)break;if(i*i+_*_<s*s&&c(d,m,u,1),p){if(!this._lightPasses(d,m)){f=y;continue}p=!1,n=f}else!this._lightPasses(d,m)&&u<s&&(p=!0,this._castVisibility(t,e,u+1,n,g,s,o,a,h,l,c),f=y)}}if(p)break}}}};class q{constructor(t=O,e=M){this._width=t,this._height=e}_fillMap(t){let e=[];for(let i=0;i<this._width;i++){e.push([]);for(let n=0;n<this._height;n++)e[i].push(t)}return e}}class W extends q{constructor(t,e){super(t,e),this._rooms=[],this._corridors=[]}getRooms(){return this._rooms}getCorridors(){return this._corridors}}class F{}class z extends F{constructor(t,e,i,n,r,s){super(),this._x1=t,this._y1=e,this._x2=i,this._y2=n,this._doors={},void 0!==r&&void 0!==s&&this.addDoor(r,s)}static createRandomAt(t,e,i,n,s){let o=s.roomWidth[0],a=s.roomWidth[1],h=r.a.getUniformInt(o,a);o=s.roomHeight[0],a=s.roomHeight[1];let l=r.a.getUniformInt(o,a);if(1==i){let i=e-Math.floor(r.a.getUniform()*l);return new this(t+1,i,t+h,i+l-1,t,e)}if(-1==i){let i=e-Math.floor(r.a.getUniform()*l);return new this(t-h,i,t-1,i+l-1,t,e)}if(1==n){let i=t-Math.floor(r.a.getUniform()*h);return new this(i,e+1,i+h-1,e+l,t,e)}if(-1==n){let i=t-Math.floor(r.a.getUniform()*h);return new this(i,e-l,i+h-1,e-1,t,e)}throw new Error("dx or dy must be 1 or -1")}static createRandomCenter(t,e,i){let n=i.roomWidth[0],s=i.roomWidth[1],o=r.a.getUniformInt(n,s);n=i.roomHeight[0],s=i.roomHeight[1];let a=r.a.getUniformInt(n,s),h=t-Math.floor(r.a.getUniform()*o),l=e-Math.floor(r.a.getUniform()*a);return new this(h,l,h+o-1,l+a-1)}static createRandom(t,e,i){let n=i.roomWidth[0],s=i.roomWidth[1],o=r.a.getUniformInt(n,s);n=i.roomHeight[0],s=i.roomHeight[1];let a=r.a.getUniformInt(n,s),h=t-o-1,l=e-a-1,c=1+Math.floor(r.a.getUniform()*h),u=1+Math.floor(r.a.getUniform()*l);return new this(c,u,c+o-1,u+a-1)}addDoor(t,e){return this._doors[t+","+e]=1,this}getDoors(t){for(let e in this._doors){let i=e.split(",");t(parseInt(i[0]),parseInt(i[1]))}return this}clearDoors(){return this._doors={},this}addDoors(t){let e=this._x1-1,i=this._x2+1,n=this._y1-1,r=this._y2+1;for(let s=e;s<=i;s++)for(let o=n;o<=r;o++)s!=e&&s!=i&&o!=n&&o!=r||t(s,o)||this.addDoor(s,o);return this}debug(){console.log("room",this._x1,this._y1,this._x2,this._y2)}isValid(t,e){let i=this._x1-1,n=this._x2+1,r=this._y1-1,s=this._y2+1;for(let o=i;o<=n;o++)for(let a=r;a<=s;a++)if(o==i||o==n||a==r||a==s){if(!t(o,a))return!1}else if(!e(o,a))return!1;return!0}create(t){let e=this._x1-1,i=this._x2+1,n=this._y1-1,r=this._y2+1,s=0;for(let o=e;o<=i;o++)for(let a=n;a<=r;a++)s=o+","+a in this._doors?2:o==e||o==i||a==n||a==r?1:0,t(o,a,s)}getCenter(){return[Math.round((this._x1+this._x2)/2),Math.round((this._y1+this._y2)/2)]}getLeft(){return this._x1}getRight(){return this._x2}getTop(){return this._y1}getBottom(){return this._y2}}class H extends F{constructor(t,e,i,n){super(),this._startX=t,this._startY=e,this._endX=i,this._endY=n,this._endsWithAWall=!0}static createRandomAt(t,e,i,n,s){let o=s.corridorLength[0],a=s.corridorLength[1],h=r.a.getUniformInt(o,a);return new this(t,e,t+i*h,e+n*h)}debug(){console.log("corridor",this._startX,this._startY,this._endX,this._endY)}isValid(t,e){let i=this._startX,n=this._startY,r=this._endX-i,s=this._endY-n,o=1+Math.max(Math.abs(r),Math.abs(s));r&&(r/=Math.abs(r)),s&&(s/=Math.abs(s));let a=s,h=-r,l=!0;for(let c=0;c<o;c++){let u=i+c*r,_=n+c*s;if(e(u,_)||(l=!1),t(u+a,_+h)||(l=!1),t(u-a,_-h)||(l=!1),!l){o=c,this._endX=u-r,this._endY=_-s;break}}if(0==o)return!1;if(1==o&&t(this._endX+r,this._endY+s))return!1;let c=!t(this._endX+r+a,this._endY+s+h),u=!t(this._endX+r-a,this._endY+s-h);return this._endsWithAWall=t(this._endX+r,this._endY+s),!c&&!u||!this._endsWithAWall}create(t){let e=this._startX,i=this._startY,n=this._endX-e,r=this._endY-i,s=1+Math.max(Math.abs(n),Math.abs(r));n&&(n/=Math.abs(n)),r&&(r/=Math.abs(r));for(let o=0;o<s;o++){t(e+o*n,i+o*r,0)}return!0}createPriorityWalls(t){if(!this._endsWithAWall)return;let e=this._startX,i=this._startY,n=this._endX-e,r=this._endY-i;n&&(n/=Math.abs(n)),r&&(r/=Math.abs(r));let s=r,o=-n;t(this._endX+n,this._endY+r),t(this._endX+s,this._endY+o),t(this._endX-s,this._endY-o)}}const Y={room:z,corridor:H};function X(t,e,i){i[e[t+1]]=i[t],e[i[t]]=e[t+1],i[t]=t+1,e[t+1]=t}function B(t,e,i){i[e[t]]=i[t],e[i[t]]=e[t],i[t]=t,e[t]=t}var G={Arena:class extends q{create(t){let e=this._width-1,i=this._height-1;for(let n=0;n<=e;n++)for(let r=0;r<=i;r++){t(n,r,n&&r&&n<e&&r<i?0:1)}return this}},Uniform:class extends W{constructor(t,e,i){super(t,e),this._options={roomWidth:[3,9],roomHeight:[3,5],roomDugPercentage:.1,timeLimit:1e3},Object.assign(this._options,i),this._map=[],this._dug=0,this._roomAttempts=20,this._corridorAttempts=20,this._connected=[],this._unconnected=[],this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this)}create(t){let e=Date.now();for(;;){if(Date.now()-e>this._options.timeLimit)return null;if(this._map=this._fillMap(1),this._dug=0,this._rooms=[],this._unconnected=[],this._generateRooms(),!(this._rooms.length<2)&&this._generateCorridors())break}if(t)for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,this._map[e][i]);return this}_generateRooms(){let t,e=this._width-2,i=this._height-2;do{if(t=this._generateRoom(),this._dug/(e*i)>this._options.roomDugPercentage)break}while(t)}_generateRoom(){let t=0;for(;t<this._roomAttempts;){t++;let e=z.createRandom(this._width,this._height,this._options);if(e.isValid(this._isWallCallback,this._canBeDugCallback))return e.create(this._digCallback),this._rooms.push(e),e}return null}_generateCorridors(){let t=0;for(;t<this._corridorAttempts;){t++,this._corridors=[],this._map=this._fillMap(1);for(let t=0;t<this._rooms.length;t++){let e=this._rooms[t];e.clearDoors(),e.create(this._digCallback)}for(this._unconnected=r.a.shuffle(this._rooms.slice()),this._connected=[],this._unconnected.length&&this._connected.push(this._unconnected.pop());;){let t=r.a.getItem(this._connected);if(!t)break;let e=this._closestRoom(this._unconnected,t);if(!e)break;let i=this._closestRoom(this._connected,e);if(!i)break;if(!this._connectRooms(e,i))break;if(!this._unconnected.length)return!0}}return!1}_closestRoom(t,e){let i=1/0,n=e.getCenter(),r=null;for(let e=0;e<t.length;e++){let s=t[e],o=s.getCenter(),a=o[0]-n[0],h=o[1]-n[1],l=a*a+h*h;l<i&&(i=l,r=s)}return r}_connectRooms(t,e){let i,n,r,s,o,a,h,l=t.getCenter(),c=e.getCenter(),u=c[0]-l[0],_=c[1]-l[1];if(Math.abs(u)<Math.abs(_)?(r=_>0?2:0,s=(r+2)%4,o=e.getLeft(),a=e.getRight(),h=0):(r=u>0?1:3,s=(r+2)%4,o=e.getTop(),a=e.getBottom(),h=1),i=this._placeInWall(t,r),!i)return!1;if(i[h]>=o&&i[h]<=a){n=i.slice();let t=0;switch(s){case 0:t=e.getTop()-1;break;case 1:t=e.getRight()+1;break;case 2:t=e.getBottom()+1;break;case 3:t=e.getLeft()-1}n[(h+1)%2]=t,this._digLine([i,n])}else if(i[h]<o-1||i[h]>a+1){let t=i[h]-c[h],r=0;switch(s){case 0:case 1:r=t<0?3:1;break;case 2:case 3:r=t<0?1:3}if(s=(s+r)%4,n=this._placeInWall(e,s),!n)return!1;let o=[0,0];o[h]=i[h];let a=(h+1)%2;o[a]=n[a],this._digLine([i,o,n])}else{let t=(h+1)%2;if(n=this._placeInWall(e,s),!n)return!1;let r=Math.round((n[t]+i[t])/2),o=[0,0],a=[0,0];o[h]=i[h],o[t]=r,a[h]=n[h],a[t]=r,this._digLine([i,o,a,n])}return t.addDoor(i[0],i[1]),e.addDoor(n[0],n[1]),h=this._unconnected.indexOf(t),-1!=h&&(this._unconnected.splice(h,1),this._connected.push(t)),h=this._unconnected.indexOf(e),-1!=h&&(this._unconnected.splice(h,1),this._connected.push(e)),!0}_placeInWall(t,e){let i=[0,0],n=[0,0],s=0;switch(e){case 0:n=[1,0],i=[t.getLeft(),t.getTop()-1],s=t.getRight()-t.getLeft()+1;break;case 1:n=[0,1],i=[t.getRight()+1,t.getTop()],s=t.getBottom()-t.getTop()+1;break;case 2:n=[1,0],i=[t.getLeft(),t.getBottom()+1],s=t.getRight()-t.getLeft()+1;break;case 3:n=[0,1],i=[t.getLeft()-1,t.getTop()],s=t.getBottom()-t.getTop()+1}let o=[],a=-2;for(let t=0;t<s;t++){let e=i[0]+t*n[0],r=i[1]+t*n[1];o.push(null),1==this._map[e][r]?a!=t-1&&(o[t]=[e,r]):(a=t,t&&(o[t-1]=null))}for(let t=o.length-1;t>=0;t--)o[t]||o.splice(t,1);return o.length?r.a.getItem(o):null}_digLine(t){for(let e=1;e<t.length;e++){let i=t[e-1],n=t[e],r=new H(i[0],i[1],n[0],n[1]);r.create(this._digCallback),this._corridors.push(r)}}_digCallback(t,e,i){this._map[t][e]=i,0==i&&this._dug++}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}},Cellular:class extends q{constructor(t,e,i={}){super(t,e),this._options={born:[5,6,7,8],survive:[4,5,6,7,8],topology:8},this.setOptions(i),this._dirs=P[this._options.topology],this._map=this._fillMap(0)}randomize(t){for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)this._map[e][i]=r.a.getUniform()<t?1:0;return this}setOptions(t){Object.assign(this._options,t)}set(t,e,i){this._map[t][e]=i}create(t){let e=this._fillMap(0),i=this._options.born,n=this._options.survive;for(let t=0;t<this._height;t++){let r=1,s=0;6==this._options.topology&&(r=2,s=t%2);for(let o=s;o<this._width;o+=r){let r=this._map[o][t],s=this._getNeighbors(o,t);r&&-1!=n.indexOf(s)?e[o][t]=1:r||-1==i.indexOf(s)||(e[o][t]=1)}}this._map=e,t&&this._serviceCallback(t)}_serviceCallback(t){for(let e=0;e<this._height;e++){let i=1,n=0;6==this._options.topology&&(i=2,n=e%2);for(let r=n;r<this._width;r+=i)t(r,e,this._map[r][e])}}_getNeighbors(t,e){let i=0;for(let n=0;n<this._dirs.length;n++){let r=this._dirs[n],s=t+r[0],o=e+r[1];s<0||s>=this._width||o<0||o>=this._height||(i+=1==this._map[s][o]?1:0)}return i}connect(t,e,i){e||(e=0);let n=[],s={},o=1,a=[0,0];6==this._options.topology&&(o=2,a=[0,1]);for(let t=0;t<this._height;t++)for(let i=a[t%2];i<this._width;i+=o)if(this._freeSpace(i,t,e)){let e=[i,t];s[this._pointKey(e)]=e,n.push([i,t])}let h=n[r.a.getUniformInt(0,n.length-1)],l=this._pointKey(h),c={};for(c[l]=h,delete s[l],this._findConnected(c,s,[h],!1,e);Object.keys(s).length>0;){let t=this._getFromTo(c,s),n=t[0],r=t[1],o={};o[this._pointKey(n)]=n,this._findConnected(o,s,[n],!0,e),(6==this._options.topology?this._tunnelToConnected6:this._tunnelToConnected).call(this,r,n,c,s,e,i);for(let t in o){let i=o[t];this._map[i[0]][i[1]]=e,c[t]=i,delete s[t]}}t&&this._serviceCallback(t)}_getFromTo(t,e){let i,n=[0,0],s=[0,0],o=Object.keys(t),a=Object.keys(e);for(let h=0;h<5;h++){if(o.length<a.length){let i=o;s=t[i[r.a.getUniformInt(0,i.length-1)]],n=this._getClosest(s,e)}else{let i=a;n=e[i[r.a.getUniformInt(0,i.length-1)]],s=this._getClosest(n,t)}if(i=(n[0]-s[0])*(n[0]-s[0])+(n[1]-s[1])*(n[1]-s[1]),i<64)break}return[n,s]}_getClosest(t,e){let i=null,n=null;for(let r in e){let s=e[r],o=(s[0]-t[0])*(s[0]-t[0])+(s[1]-t[1])*(s[1]-t[1]);(null==n||o<n)&&(n=o,i=s)}return i}_findConnected(t,e,i,n,r){for(;i.length>0;){let s,o=i.splice(0,1)[0];s=6==this._options.topology?[[o[0]+2,o[1]],[o[0]+1,o[1]-1],[o[0]-1,o[1]-1],[o[0]-2,o[1]],[o[0]-1,o[1]+1],[o[0]+1,o[1]+1]]:[[o[0]+1,o[1]],[o[0]-1,o[1]],[o[0],o[1]+1],[o[0],o[1]-1]];for(let o=0;o<s.length;o++){let a=this._pointKey(s[o]);null==t[a]&&this._freeSpace(s[o][0],s[o][1],r)&&(t[a]=s[o],n||delete e[a],i.push(s[o]))}}}_tunnelToConnected(t,e,i,n,r,s){let o,a;e[0]<t[0]?(o=e,a=t):(o=t,a=e);for(let t=o[0];t<=a[0];t++){this._map[t][o[1]]=r;let e=[t,o[1]],s=this._pointKey(e);i[s]=e,delete n[s]}s&&o[0]<a[0]&&s(o,[a[0],o[1]]);let h=a[0];e[1]<t[1]?(o=e,a=t):(o=t,a=e);for(let t=o[1];t<a[1];t++){this._map[h][t]=r;let e=[h,t],s=this._pointKey(e);i[s]=e,delete n[s]}s&&o[1]<a[1]&&s([a[0],o[1]],[a[0],a[1]])}_tunnelToConnected6(t,e,i,n,r,s){let o,a;e[0]<t[0]?(o=e,a=t):(o=t,a=e);let h=o[0],l=o[1];for(;h!=a[0]||l!=a[1];){let t=2;l<a[1]?(l++,t=1):l>a[1]&&(l--,t=1),h<a[0]?h+=t:h>a[0]||a[1]%2?h-=t:h+=t,this._map[h][l]=r;let e=[h,l],s=this._pointKey(e);i[s]=e,delete n[s]}s&&s(e,t)}_freeSpace(t,e,i){return t>=0&&t<this._width&&e>=0&&e<this._height&&this._map[t][e]==i}_pointKey(t){return t[0]+"."+t[1]}},Digger:class extends W{constructor(t,e,i={}){super(t,e),this._options=Object.assign({roomWidth:[3,9],roomHeight:[3,5],corridorLength:[3,10],dugPercentage:.2,timeLimit:1e3},i),this._features={room:4,corridor:4},this._map=[],this._featureAttempts=20,this._walls={},this._dug=0,this._digCallback=this._digCallback.bind(this),this._canBeDugCallback=this._canBeDugCallback.bind(this),this._isWallCallback=this._isWallCallback.bind(this),this._priorityWallCallback=this._priorityWallCallback.bind(this)}create(t){this._rooms=[],this._corridors=[],this._map=this._fillMap(1),this._walls={},this._dug=0;let e=(this._width-2)*(this._height-2);this._firstRoom();let i,n=Date.now();do{if(i=0,Date.now()-n>this._options.timeLimit)break;let t=this._findWall();if(!t)break;let e=t.split(","),r=parseInt(e[0]),s=parseInt(e[1]),o=this._getDiggingDirection(r,s);if(!o)continue;let a=0;do{if(a++,this._tryFeature(r,s,o[0],o[1])){this._removeSurroundingWalls(r,s),this._removeSurroundingWalls(r-o[0],s-o[1]);break}}while(a<this._featureAttempts);for(let t in this._walls)this._walls[t]>1&&i++}while(this._dug/e<this._options.dugPercentage||i);if(this._addDoors(),t)for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,this._map[e][i]);return this._walls={},this._map=[],this}_digCallback(t,e,i){0==i||2==i?(this._map[t][e]=0,this._dug++):this._walls[t+","+e]=1}_isWallCallback(t,e){return!(t<0||e<0||t>=this._width||e>=this._height)&&1==this._map[t][e]}_canBeDugCallback(t,e){return!(t<1||e<1||t+1>=this._width||e+1>=this._height)&&1==this._map[t][e]}_priorityWallCallback(t,e){this._walls[t+","+e]=2}_firstRoom(){let t=Math.floor(this._width/2),e=Math.floor(this._height/2),i=z.createRandomCenter(t,e,this._options);this._rooms.push(i),i.create(this._digCallback)}_findWall(){let t=[],e=[];for(let i in this._walls){2==this._walls[i]?e.push(i):t.push(i)}let i=e.length?e:t;if(!i.length)return null;let n=r.a.getItem(i.sort());return delete this._walls[n],n}_tryFeature(t,e,i,n){let s=r.a.getWeightedValue(this._features),o=Y[s].createRandomAt(t,e,i,n,this._options);return!!o.isValid(this._isWallCallback,this._canBeDugCallback)&&(o.create(this._digCallback),o instanceof z&&this._rooms.push(o),o instanceof H&&(o.createPriorityWalls(this._priorityWallCallback),this._corridors.push(o)),!0)}_removeSurroundingWalls(t,e){let i=P[4];for(let n=0;n<i.length;n++){let r=i[n],s=t+r[0],o=e+r[1];delete this._walls[s+","+o],s=t+2*r[0],o=e+2*r[1],delete this._walls[s+","+o]}}_getDiggingDirection(t,e){if(t<=0||e<=0||t>=this._width-1||e>=this._height-1)return null;let i=null,n=P[4];for(let r=0;r<n.length;r++){let s=n[r],o=t+s[0],a=e+s[1];if(!this._map[o][a]){if(i)return null;i=s}}return i?[-i[0],-i[1]]:null}_addDoors(){let t=this._map;function e(e,i){return 1==t[e][i]}for(let t=0;t<this._rooms.length;t++){let i=this._rooms[t];i.clearDoors(),i.addDoors(e)}}},EllerMaze:class extends q{create(t){let e,i=this._fillMap(1),n=Math.ceil((this._width-2)/2),s=[],o=[];for(let t=0;t<n;t++)s.push(t),o.push(t);for(s.push(n-1),e=1;e+3<this._height;e+=2)for(let t=0;t<n;t++){let n=2*t+1,a=e;i[n][a]=0,t!=s[t+1]&&r.a.getUniform()>9/24&&(X(t,s,o),i[n+1][a]=0),t!=s[t]&&r.a.getUniform()>9/24?B(t,s,o):i[n][a+1]=0}for(let t=0;t<n;t++){let n=2*t+1,a=e;i[n][a]=0,t!=s[t+1]&&(t==s[t]||r.a.getUniform()>9/24)&&(X(t,s,o),i[n+1][a]=0),B(t,s,o)}for(let e=0;e<this._width;e++)for(let n=0;n<this._height;n++)t(e,n,i[e][n]);return this}},DividedMaze:class extends q{constructor(){super(...arguments),this._stack=[],this._map=[]}create(t){let e=this._width,i=this._height;this._map=[];for(let t=0;t<e;t++){this._map.push([]);for(let n=0;n<i;n++){let r=0==t||0==n||t+1==e||n+1==i;this._map[t].push(r?1:0)}}this._stack=[[1,1,e-2,i-2]],this._process();for(let n=0;n<e;n++)for(let e=0;e<i;e++)t(n,e,this._map[n][e]);return this._map=[],this}_process(){for(;this._stack.length;){let t=this._stack.shift();this._partitionRoom(t)}}_partitionRoom(t){let e=[],i=[];for(let i=t[0]+1;i<t[2];i++){let n=this._map[i][t[1]-1],r=this._map[i][t[3]+1];!n||!r||i%2||e.push(i)}for(let e=t[1]+1;e<t[3];e++){let n=this._map[t[0]-1][e],r=this._map[t[2]+1][e];!n||!r||e%2||i.push(e)}if(!e.length||!i.length)return;let n=r.a.getItem(e),s=r.a.getItem(i);this._map[n][s]=1;let o=[],a=[];o.push(a);for(let e=t[0];e<n;e++)this._map[e][s]=1,a.push([e,s]);a=[],o.push(a);for(let e=n+1;e<=t[2];e++)this._map[e][s]=1,a.push([e,s]);a=[],o.push(a);for(let e=t[1];e<s;e++)this._map[n][e]=1,a.push([n,e]);a=[],o.push(a);for(let e=s+1;e<=t[3];e++)this._map[n][e]=1,a.push([n,e]);let h=r.a.getItem(o);for(let t=0;t<o.length;t++){let e=o[t];if(e==h)continue;let i=r.a.getItem(e);this._map[i[0]][i[1]]=0}this._stack.push([t[0],t[1],n-1,s-1]),this._stack.push([n+1,t[1],t[2],s-1]),this._stack.push([t[0],s+1,n-1,t[3]]),this._stack.push([n+1,s+1,t[2],t[3]])}},IceyMaze:class extends q{constructor(t,e,i=0){super(t,e),this._regularity=i,this._map=[]}create(t){let e=this._width,i=this._height,n=this._fillMap(1);e-=e%2?1:2,i-=i%2?1:2;let s=0,o=0,a=0,h=0,l=0,c=!1,u=[[0,0],[0,0],[0,0],[0,0]];do{if(s=1+2*Math.floor(r.a.getUniform()*(e-1)/2),o=1+2*Math.floor(r.a.getUniform()*(i-1)/2),l||(n[s][o]=0),!n[s][o]){this._randomize(u);do{0==Math.floor(r.a.getUniform()*(this._regularity+1))&&this._randomize(u),c=!0;for(let t=0;t<4;t++)if(a=s+2*u[t][0],h=o+2*u[t][1],this._isFree(n,a,h,e,i)){n[a][h]=0,n[s+u[t][0]][o+u[t][1]]=0,s=a,o=h,c=!1,l++;break}}while(!c)}}while(l+1<e*i/4);for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,n[e][i]);return this._map=[],this}_randomize(t){for(let e=0;e<4;e++)t[e][0]=0,t[e][1]=0;switch(Math.floor(4*r.a.getUniform())){case 0:t[0][0]=-1,t[1][0]=1,t[2][1]=-1,t[3][1]=1;break;case 1:t[3][0]=-1,t[2][0]=1,t[1][1]=-1,t[0][1]=1;break;case 2:t[2][0]=-1,t[3][0]=1,t[0][1]=-1,t[1][1]=1;break;case 3:t[1][0]=-1,t[0][0]=1,t[3][1]=-1,t[2][1]=1}}_isFree(t,e,i,n,r){return!(e<1||i<1||e>=n||i>=r)&&t[e][i]}},Rogue:class extends q{constructor(t,e,i){super(t,e),this.map=[],this.rooms=[],this.connectedCells=[],(i=Object.assign({cellWidth:3,cellHeight:3},i)).hasOwnProperty("roomWidth")||(i.roomWidth=this._calculateRoomSize(this._width,i.cellWidth)),i.hasOwnProperty("roomHeight")||(i.roomHeight=this._calculateRoomSize(this._height,i.cellHeight)),this._options=i}create(t){if(this.map=this._fillMap(1),this.rooms=[],this.connectedCells=[],this._initRooms(),this._connectRooms(),this._connectUnconnectedRooms(),this._createRandomRoomConnections(),this._createRooms(),this._createCorridors(),t)for(let e=0;e<this._width;e++)for(let i=0;i<this._height;i++)t(e,i,this.map[e][i]);return this}_calculateRoomSize(t,e){let i=Math.floor(t/e*.8),n=Math.floor(t/e*.25);return n<2&&(n=2),i<2&&(i=2),[n,i]}_initRooms(){for(let t=0;t<this._options.cellWidth;t++){this.rooms.push([]);for(let e=0;e<this._options.cellHeight;e++)this.rooms[t].push({x:0,y:0,width:0,height:0,connections:[],cellx:t,celly:e})}}_connectRooms(){let t,e,i,n,s,o,a=r.a.getUniformInt(0,this._options.cellWidth-1),h=r.a.getUniformInt(0,this._options.cellHeight-1),l=!1;do{o=[0,2,4,6],o=r.a.shuffle(o);do{if(l=!1,t=o.pop(),e=a+P[8][t][0],i=h+P[8][t][1],!(e<0||e>=this._options.cellWidth||i<0||i>=this._options.cellHeight)){if(n=this.rooms[a][h],n.connections.length>0&&n.connections[0][0]==e&&n.connections[0][1]==i)break;s=this.rooms[e][i],0==s.connections.length&&(s.connections.push([a,h]),this.connectedCells.push([e,i]),a=e,h=i,l=!0)}}while(o.length>0&&0==l)}while(o.length>0)}_connectUnconnectedRooms(){let t,e,i,n=this._options.cellWidth,s=this._options.cellHeight;this.connectedCells=r.a.shuffle(this.connectedCells);for(let o=0;o<this._options.cellWidth;o++)for(let a=0;a<this._options.cellHeight;a++)if(t=this.rooms[o][a],0==t.connections.length){let h=[0,2,4,6];h=r.a.shuffle(h),i=!1;do{let t=h.pop(),r=o+P[8][t][0],l=a+P[8][t][1];if(!(r<0||r>=n||l<0||l>=s)){if(e=this.rooms[r][l],i=!0,0==e.connections.length)break;for(let t=0;t<e.connections.length;t++)if(e.connections[t][0]==o&&e.connections[t][1]==a){i=!1;break}if(i)break}}while(h.length);i?t.connections.push([e.cellx,e.celly]):console.log("-- Unable to connect room.")}}_createRandomRoomConnections(){}_createRooms(){let t,e,i,n,s,o=this._width,a=this._height,h=this._options.cellWidth,l=this._options.cellHeight,c=Math.floor(this._width/h),u=Math.floor(this._height/l),_=this._options.roomWidth,p=this._options.roomHeight;for(let f=0;f<h;f++)for(let h=0;h<l;h++){if(i=c*f,n=u*h,0==i&&(i=1),0==n&&(n=1),t=r.a.getUniformInt(_[0],_[1]),e=r.a.getUniformInt(p[0],p[1]),h>0)for(s=this.rooms[f][h-1];n-(s.y+s.height)<3;)n++;if(f>0)for(s=this.rooms[f-1][h];i-(s.x+s.width)<3;)i++;let l=Math.round(r.a.getUniformInt(0,c-t)/2),d=Math.round(r.a.getUniformInt(0,u-e)/2);for(;i+l+t>=o;)l?l--:t--;for(;n+d+e>=a;)d?d--:e--;i+=l,n+=d,this.rooms[f][h].x=i,this.rooms[f][h].y=n,this.rooms[f][h].width=t,this.rooms[f][h].height=e;for(let r=i;r<i+t;r++)for(let t=n;t<n+e;t++)this.map[r][t]=0}}_getWallPosition(t,e){let i,n,s;return 1==e||3==e?(i=r.a.getUniformInt(t.x+1,t.x+t.width-2),1==e?(n=t.y-2,s=n+1):(n=t.y+t.height+1,s=n-1),this.map[i][s]=0):(n=r.a.getUniformInt(t.y+1,t.y+t.height-2),2==e?(i=t.x+t.width+1,s=i-1):(i=t.x-2,s=i+1),this.map[s][n]=0),[i,n]}_drawCorridor(t,e){let i,n,s,o,a=e[0]-t[0],h=e[1]-t[1],l=t[0],c=t[1],u=[],_=Math.abs(a),p=Math.abs(h),f=r.a.getUniform(),d=f,m=1-f;for(n=a>0?2:6,s=h>0?4:0,_<p?(i=Math.ceil(p*d),u.push([s,i]),u.push([n,_]),i=Math.floor(p*m),u.push([s,i])):(i=Math.ceil(_*d),u.push([n,i]),u.push([s,p]),i=Math.floor(_*m),u.push([n,i])),this.map[l][c]=0;u.length>0;)for(o=u.pop();o[1]>0;)l+=P[8][o[0]][0],c+=P[8][o[0]][1],this.map[l][c]=0,o[1]=o[1]-1}_createCorridors(){let t,e,i,n,r,s=this._options.cellWidth,o=this._options.cellHeight;for(let a=0;a<s;a++)for(let s=0;s<o;s++){t=this.rooms[a][s];for(let s=0;s<t.connections.length;s++)e=t.connections[s],i=this.rooms[e[0]][e[1]],i.cellx>t.cellx?(n=2,r=4):i.cellx<t.cellx?(n=4,r=2):i.celly>t.celly?(n=3,r=1):(n=1,r=3),this._drawCorridor(this._getWallPosition(t,n),this._getWallPosition(i,r))}}}};const $=.5*(Math.sqrt(3)-1),Q=(3-Math.sqrt(3))/6;var J={Simplex:class extends class{}{constructor(t=256){super(),this._gradients=[[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0],[-1,-1]];let e=[];for(let i=0;i<t;i++)e.push(i);e=r.a.shuffle(e),this._perms=[],this._indexes=[];for(let i=0;i<2*t;i++)this._perms.push(e[i%t]),this._indexes.push(this._perms[i]%this._gradients.length)}get(t,e){let i,n,r,s=this._perms,o=this._indexes,h=s.length/2,l=0,c=0,u=0,_=(t+e)*$,p=Math.floor(t+_),f=Math.floor(e+_),d=(p+f)*Q,m=t-(p-d),g=e-(f-d);m>g?(n=1,r=0):(n=0,r=1);let y=m-n+Q,v=g-r+Q,b=m-1+2*Q,w=g-1+2*Q,E=Object(a.mod)(p,h),C=Object(a.mod)(f,h),T=.5-m*m-g*g;if(T>=0){T*=T,i=o[E+s[C]];let t=this._gradients[i];l=T*T*(t[0]*m+t[1]*g)}let x=.5-y*y-v*v;if(x>=0){x*=x,i=o[E+n+s[C+r]];let t=this._gradients[i];c=x*x*(t[0]*y+t[1]*v)}let S=.5-b*b-w*w;if(S>=0){S*=S,i=o[E+1+s[C+1]];let t=this._gradients[i];u=S*S*(t[0]*b+t[1]*w)}return 70*(l+c+u)}}};class Z{constructor(t,e,i,n={}){this._toX=t,this._toY=e,this._passableCallback=i,this._options=Object.assign({topology:8},n),this._dirs=P[this._options.topology],8==this._options.topology&&(this._dirs=[this._dirs[0],this._dirs[2],this._dirs[4],this._dirs[6],this._dirs[1],this._dirs[3],this._dirs[5],this._dirs[7]])}_getNeighbors(t,e){let i=[];for(let n=0;n<this._dirs.length;n++){let r=this._dirs[n],s=t+r[0],o=e+r[1];this._passableCallback(s,o)&&i.push([s,o])}return i}}var tt={Dijkstra:class extends Z{constructor(t,e,i,n){super(t,e,i,n),this._computed={},this._todo=[],this._add(t,e,null)}compute(t,e,i){let n=t+","+e;if(n in this._computed||this._compute(t,e),!(n in this._computed))return;let r=this._computed[n];for(;r;)i(r.x,r.y),r=r.prev}_compute(t,e){for(;this._todo.length;){let i=this._todo.shift();if(i.x==t&&i.y==e)return;let n=this._getNeighbors(i.x,i.y);for(let t=0;t<n.length;t++){let e=n[t],r=e[0],s=e[1];r+","+s in this._computed||this._add(r,s,i)}}}_add(t,e,i){let n={x:t,y:e,prev:i};this._computed[t+","+e]=n,this._todo.push(n)}},AStar:class extends Z{constructor(t,e,i,n={}){super(t,e,i,n),this._todo=[],this._done={}}compute(t,e,i){for(this._todo=[],this._done={},this._fromX=t,this._fromY=e,this._add(this._toX,this._toY,null);this._todo.length;){let i=this._todo.shift(),n=i.x+","+i.y;if(n in this._done)continue;if(this._done[n]=i,i.x==t&&i.y==e)break;let r=this._getNeighbors(i.x,i.y);for(let t=0;t<r.length;t++){let e=r[t],n=e[0],s=e[1];n+","+s in this._done||this._add(n,s,i)}}let n=this._done[t+","+e];if(n)for(;n;)i(n.x,n.y),n=n.prev}_add(t,e,i){let n=this._distance(t,e),r={x:t,y:e,prev:i,g:i?i.g+1:0,h:n},s=r.g+r.h;for(let t=0;t<this._todo.length;t++){let e=this._todo[t],i=e.g+e.h;if(s<i||s==i&&n<e.h)return void this._todo.splice(t,0,r)}this._todo.push(r)}_distance(t,e){switch(this._options.topology){case 4:return Math.abs(t-this._fromX)+Math.abs(e-this._fromY);case 6:let i=Math.abs(t-this._fromX),n=Math.abs(e-this._fromY);return n+Math.max(0,(i-n)/2);case 8:return Math.max(Math.abs(t-this._fromX),Math.abs(e-this._fromY))}}}};class et{constructor(t){this._scheduler=t,this._lock=1}start(){return this.unlock()}lock(){return this._lock++,this}unlock(){if(!this._lock)throw new Error("Cannot unlock unlocked engine");for(this._lock--;!this._lock;){let t=this._scheduler.next();if(!t)return this.lock();let e=t.act();e&&e.then&&(this.lock(),e.then(this.unlock.bind(this)))}return this}}class it{constructor(t,e={}){this._reflectivityCallback=t,this._options={},e=Object.assign({passes:1,emissionThreshold:100,range:10},e),this._lights={},this._reflectivityCache={},this._fovCache={},this.setOptions(e)}setOptions(t){return Object.assign(this._options,t),t&&t.range&&this.reset(),this}setFOV(t){return this._fov=t,this._fovCache={},this}setLight(t,e,i){let n=t+","+e;return i?this._lights[n]="string"==typeof i?u.fromString(i):i:delete this._lights[n],this}clearLights(){this._lights={}}reset(){return this._reflectivityCache={},this._fovCache={},this}compute(t){let e={},i={},n={};for(let t in this._lights){let e=this._lights[t];i[t]=[0,0,0],u.add_(i[t],e)}for(let t=0;t<this._options.passes;t++)this._emitLight(i,n,e),t+1!=this._options.passes&&(i=this._computeEmitters(n,e));for(let e in n){let i=e.split(",");t(parseInt(i[0]),parseInt(i[1]),n[e])}return this}_emitLight(t,e,i){for(let n in t){let r=n.split(","),s=parseInt(r[0]),o=parseInt(r[1]);this._emitLightFromCell(s,o,t[n],e),i[n]=1}return this}_computeEmitters(t,e){let i={};for(let n in t){if(n in e)continue;let r,s=t[n];if(n in this._reflectivityCache)r=this._reflectivityCache[n];else{let t=n.split(","),e=parseInt(t[0]),i=parseInt(t[1]);r=this._reflectivityCallback(e,i),this._reflectivityCache[n]=r}if(0==r)continue;let o=[0,0,0],a=0;for(let t=0;t<3;t++){let e=Math.round(s[t]*r);o[t]=e,a+=e}a>this._options.emissionThreshold&&(i[n]=o)}return i}_emitLightFromCell(t,e,i,n){let r,s=t+","+e;r=s in this._fovCache?this._fovCache[s]:this._updateFOV(t,e);for(let t in r){let e,s=r[t];t in n?e=n[t]:(e=[0,0,0],n[t]=e);for(let t=0;t<3;t++)e[t]+=Math.round(i[t]*s)}return this}_updateFOV(t,e){let i=t+","+e,n={};this._fovCache[i]=n;let r=this._options.range;return this._fov.compute(t,e,r,function(t,e,i,s){let o=s*(1-i/r);0!=o&&(n[t+","+e]=o)}.bind(this)),n}}const nt=a,rt=u,st=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,